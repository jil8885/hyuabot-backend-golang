// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubwayRouteStation is an object representing the database table.
type SubwayRouteStation struct {
	StationID       string `boil:"station_id" json:"stationID" toml:"stationID" yaml:"stationID"`
	RouteID         int    `boil:"route_id" json:"routeID" toml:"routeID" yaml:"routeID"`
	StationName     string `boil:"station_name" json:"stationName" toml:"stationName" yaml:"stationName"`
	StationSequence int    `boil:"station_sequence" json:"stationSequence" toml:"stationSequence" yaml:"stationSequence"`
	CumulativeTime  string `boil:"cumulative_time" json:"cumulativeTime" toml:"cumulativeTime" yaml:"cumulativeTime"`

	R *subwayRouteStationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subwayRouteStationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubwayRouteStationColumns = struct {
	StationID       string
	RouteID         string
	StationName     string
	StationSequence string
	CumulativeTime  string
}{
	StationID:       "station_id",
	RouteID:         "route_id",
	StationName:     "station_name",
	StationSequence: "station_sequence",
	CumulativeTime:  "cumulative_time",
}

var SubwayRouteStationTableColumns = struct {
	StationID       string
	RouteID         string
	StationName     string
	StationSequence string
	CumulativeTime  string
}{
	StationID:       "subway_route_station.station_id",
	RouteID:         "subway_route_station.route_id",
	StationName:     "subway_route_station.station_name",
	StationSequence: "subway_route_station.station_sequence",
	CumulativeTime:  "subway_route_station.cumulative_time",
}

// Generated where

var SubwayRouteStationWhere = struct {
	StationID       whereHelperstring
	RouteID         whereHelperint
	StationName     whereHelperstring
	StationSequence whereHelperint
	CumulativeTime  whereHelperstring
}{
	StationID:       whereHelperstring{field: "\"subway_route_station\".\"station_id\""},
	RouteID:         whereHelperint{field: "\"subway_route_station\".\"route_id\""},
	StationName:     whereHelperstring{field: "\"subway_route_station\".\"station_name\""},
	StationSequence: whereHelperint{field: "\"subway_route_station\".\"station_sequence\""},
	CumulativeTime:  whereHelperstring{field: "\"subway_route_station\".\"cumulative_time\""},
}

// SubwayRouteStationRels is where relationship names are stored.
var SubwayRouteStationRels = struct {
	Route                           string
	StationNameSubwayStation        string
	StationSubwayRealtimes          string
	TerminalStationSubwayRealtimes  string
	StartStationSubwayTimetables    string
	StationSubwayTimetables         string
	TerminalStationSubwayTimetables string
}{
	Route:                           "Route",
	StationNameSubwayStation:        "StationNameSubwayStation",
	StationSubwayRealtimes:          "StationSubwayRealtimes",
	TerminalStationSubwayRealtimes:  "TerminalStationSubwayRealtimes",
	StartStationSubwayTimetables:    "StartStationSubwayTimetables",
	StationSubwayTimetables:         "StationSubwayTimetables",
	TerminalStationSubwayTimetables: "TerminalStationSubwayTimetables",
}

// subwayRouteStationR is where relationships are stored.
type subwayRouteStationR struct {
	Route                           *SubwayRoute         `boil:"Route" json:"Route" toml:"Route" yaml:"Route"`
	StationNameSubwayStation        *SubwayStation       `boil:"StationNameSubwayStation" json:"StationNameSubwayStation" toml:"StationNameSubwayStation" yaml:"StationNameSubwayStation"`
	StationSubwayRealtimes          SubwayRealtimeSlice  `boil:"StationSubwayRealtimes" json:"StationSubwayRealtimes" toml:"StationSubwayRealtimes" yaml:"StationSubwayRealtimes"`
	TerminalStationSubwayRealtimes  SubwayRealtimeSlice  `boil:"TerminalStationSubwayRealtimes" json:"TerminalStationSubwayRealtimes" toml:"TerminalStationSubwayRealtimes" yaml:"TerminalStationSubwayRealtimes"`
	StartStationSubwayTimetables    SubwayTimetableSlice `boil:"StartStationSubwayTimetables" json:"StartStationSubwayTimetables" toml:"StartStationSubwayTimetables" yaml:"StartStationSubwayTimetables"`
	StationSubwayTimetables         SubwayTimetableSlice `boil:"StationSubwayTimetables" json:"StationSubwayTimetables" toml:"StationSubwayTimetables" yaml:"StationSubwayTimetables"`
	TerminalStationSubwayTimetables SubwayTimetableSlice `boil:"TerminalStationSubwayTimetables" json:"TerminalStationSubwayTimetables" toml:"TerminalStationSubwayTimetables" yaml:"TerminalStationSubwayTimetables"`
}

// NewStruct creates a new relationship struct
func (*subwayRouteStationR) NewStruct() *subwayRouteStationR {
	return &subwayRouteStationR{}
}

func (r *subwayRouteStationR) GetRoute() *SubwayRoute {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *subwayRouteStationR) GetStationNameSubwayStation() *SubwayStation {
	if r == nil {
		return nil
	}
	return r.StationNameSubwayStation
}

func (r *subwayRouteStationR) GetStationSubwayRealtimes() SubwayRealtimeSlice {
	if r == nil {
		return nil
	}
	return r.StationSubwayRealtimes
}

func (r *subwayRouteStationR) GetTerminalStationSubwayRealtimes() SubwayRealtimeSlice {
	if r == nil {
		return nil
	}
	return r.TerminalStationSubwayRealtimes
}

func (r *subwayRouteStationR) GetStartStationSubwayTimetables() SubwayTimetableSlice {
	if r == nil {
		return nil
	}
	return r.StartStationSubwayTimetables
}

func (r *subwayRouteStationR) GetStationSubwayTimetables() SubwayTimetableSlice {
	if r == nil {
		return nil
	}
	return r.StationSubwayTimetables
}

func (r *subwayRouteStationR) GetTerminalStationSubwayTimetables() SubwayTimetableSlice {
	if r == nil {
		return nil
	}
	return r.TerminalStationSubwayTimetables
}

// subwayRouteStationL is where Load methods for each relationship are stored.
type subwayRouteStationL struct{}

var (
	subwayRouteStationAllColumns            = []string{"station_id", "route_id", "station_name", "station_sequence", "cumulative_time"}
	subwayRouteStationColumnsWithoutDefault = []string{"station_id", "route_id", "station_name", "station_sequence", "cumulative_time"}
	subwayRouteStationColumnsWithDefault    = []string{}
	subwayRouteStationPrimaryKeyColumns     = []string{"station_id"}
	subwayRouteStationGeneratedColumns      = []string{}
)

type (
	// SubwayRouteStationSlice is an alias for a slice of pointers to SubwayRouteStation.
	// This should almost always be used instead of []SubwayRouteStation.
	SubwayRouteStationSlice []*SubwayRouteStation

	subwayRouteStationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subwayRouteStationType                 = reflect.TypeOf(&SubwayRouteStation{})
	subwayRouteStationMapping              = queries.MakeStructMapping(subwayRouteStationType)
	subwayRouteStationPrimaryKeyMapping, _ = queries.BindMapping(subwayRouteStationType, subwayRouteStationMapping, subwayRouteStationPrimaryKeyColumns)
	subwayRouteStationInsertCacheMut       sync.RWMutex
	subwayRouteStationInsertCache          = make(map[string]insertCache)
	subwayRouteStationUpdateCacheMut       sync.RWMutex
	subwayRouteStationUpdateCache          = make(map[string]updateCache)
	subwayRouteStationUpsertCacheMut       sync.RWMutex
	subwayRouteStationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single subwayRouteStation record from the query.
func (q subwayRouteStationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubwayRouteStation, error) {
	o := &SubwayRouteStation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subway_route_station")
	}

	return o, nil
}

// All returns all SubwayRouteStation records from the query.
func (q subwayRouteStationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubwayRouteStationSlice, error) {
	var o []*SubwayRouteStation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubwayRouteStation slice")
	}

	return o, nil
}

// Count returns the count of all SubwayRouteStation records in the query.
func (q subwayRouteStationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subway_route_station rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subwayRouteStationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subway_route_station exists")
	}

	return count > 0, nil
}

// Route pointed to by the foreign key.
func (o *SubwayRouteStation) Route(mods ...qm.QueryMod) subwayRouteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"route_id\" = ?", o.RouteID),
	}

	queryMods = append(queryMods, mods...)

	return SubwayRoutes(queryMods...)
}

// StationNameSubwayStation pointed to by the foreign key.
func (o *SubwayRouteStation) StationNameSubwayStation(mods ...qm.QueryMod) subwayStationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"station_name\" = ?", o.StationName),
	}

	queryMods = append(queryMods, mods...)

	return SubwayStations(queryMods...)
}

// StationSubwayRealtimes retrieves all the subway_realtime's SubwayRealtimes with an executor via station_id column.
func (o *SubwayRouteStation) StationSubwayRealtimes(mods ...qm.QueryMod) subwayRealtimeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subway_realtime\".\"station_id\"=?", o.StationID),
	)

	return SubwayRealtimes(queryMods...)
}

// TerminalStationSubwayRealtimes retrieves all the subway_realtime's SubwayRealtimes with an executor via terminal_station_id column.
func (o *SubwayRouteStation) TerminalStationSubwayRealtimes(mods ...qm.QueryMod) subwayRealtimeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subway_realtime\".\"terminal_station_id\"=?", o.StationID),
	)

	return SubwayRealtimes(queryMods...)
}

// StartStationSubwayTimetables retrieves all the subway_timetable's SubwayTimetables with an executor via start_station_id column.
func (o *SubwayRouteStation) StartStationSubwayTimetables(mods ...qm.QueryMod) subwayTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subway_timetable\".\"start_station_id\"=?", o.StationID),
	)

	return SubwayTimetables(queryMods...)
}

// StationSubwayTimetables retrieves all the subway_timetable's SubwayTimetables with an executor via station_id column.
func (o *SubwayRouteStation) StationSubwayTimetables(mods ...qm.QueryMod) subwayTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subway_timetable\".\"station_id\"=?", o.StationID),
	)

	return SubwayTimetables(queryMods...)
}

// TerminalStationSubwayTimetables retrieves all the subway_timetable's SubwayTimetables with an executor via terminal_station_id column.
func (o *SubwayRouteStation) TerminalStationSubwayTimetables(mods ...qm.QueryMod) subwayTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subway_timetable\".\"terminal_station_id\"=?", o.StationID),
	)

	return SubwayTimetables(queryMods...)
}

// LoadRoute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayRouteStationL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.RouteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.RouteID {
					continue Outer
				}
			}

			args = append(args, obj.RouteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route`),
		qm.WhereIn(`subway_route.route_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayRoute")
	}

	var resultSlice []*SubwayRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayRoute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Route = foreign
		if foreign.R == nil {
			foreign.R = &subwayRouteR{}
		}
		foreign.R.RouteSubwayRouteStations = append(foreign.R.RouteSubwayRouteStations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RouteID == foreign.RouteID {
				local.R.Route = foreign
				if foreign.R == nil {
					foreign.R = &subwayRouteR{}
				}
				foreign.R.RouteSubwayRouteStations = append(foreign.R.RouteSubwayRouteStations, local)
				break
			}
		}
	}

	return nil
}

// LoadStationNameSubwayStation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayRouteStationL) LoadStationNameSubwayStation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.StationName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.StationName {
					continue Outer
				}
			}

			args = append(args, obj.StationName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_station`),
		qm.WhereIn(`subway_station.station_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayStation")
	}

	var resultSlice []*SubwayStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayStation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_station")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StationNameSubwayStation = foreign
		if foreign.R == nil {
			foreign.R = &subwayStationR{}
		}
		foreign.R.StationNameSubwayRouteStations = append(foreign.R.StationNameSubwayRouteStations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StationName == foreign.StationName {
				local.R.StationNameSubwayStation = foreign
				if foreign.R == nil {
					foreign.R = &subwayStationR{}
				}
				foreign.R.StationNameSubwayRouteStations = append(foreign.R.StationNameSubwayRouteStations, local)
				break
			}
		}
	}

	return nil
}

// LoadStationSubwayRealtimes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subwayRouteStationL) LoadStationSubwayRealtimes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.StationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_realtime`),
		qm.WhereIn(`subway_realtime.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subway_realtime")
	}

	var resultSlice []*SubwayRealtime
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subway_realtime")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subway_realtime")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_realtime")
	}

	if singular {
		object.R.StationSubwayRealtimes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subwayRealtimeR{}
			}
			foreign.R.Station = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StationID == foreign.StationID {
				local.R.StationSubwayRealtimes = append(local.R.StationSubwayRealtimes, foreign)
				if foreign.R == nil {
					foreign.R = &subwayRealtimeR{}
				}
				foreign.R.Station = local
				break
			}
		}
	}

	return nil
}

// LoadTerminalStationSubwayRealtimes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subwayRouteStationL) LoadTerminalStationSubwayRealtimes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.StationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_realtime`),
		qm.WhereIn(`subway_realtime.terminal_station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subway_realtime")
	}

	var resultSlice []*SubwayRealtime
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subway_realtime")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subway_realtime")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_realtime")
	}

	if singular {
		object.R.TerminalStationSubwayRealtimes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subwayRealtimeR{}
			}
			foreign.R.TerminalStation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StationID == foreign.TerminalStationID {
				local.R.TerminalStationSubwayRealtimes = append(local.R.TerminalStationSubwayRealtimes, foreign)
				if foreign.R == nil {
					foreign.R = &subwayRealtimeR{}
				}
				foreign.R.TerminalStation = local
				break
			}
		}
	}

	return nil
}

// LoadStartStationSubwayTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subwayRouteStationL) LoadStartStationSubwayTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.StationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_timetable`),
		qm.WhereIn(`subway_timetable.start_station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subway_timetable")
	}

	var resultSlice []*SubwayTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subway_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subway_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_timetable")
	}

	if singular {
		object.R.StartStationSubwayTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subwayTimetableR{}
			}
			foreign.R.StartStation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StationID == foreign.StartStationID {
				local.R.StartStationSubwayTimetables = append(local.R.StartStationSubwayTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &subwayTimetableR{}
				}
				foreign.R.StartStation = local
				break
			}
		}
	}

	return nil
}

// LoadStationSubwayTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subwayRouteStationL) LoadStationSubwayTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.StationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_timetable`),
		qm.WhereIn(`subway_timetable.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subway_timetable")
	}

	var resultSlice []*SubwayTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subway_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subway_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_timetable")
	}

	if singular {
		object.R.StationSubwayTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subwayTimetableR{}
			}
			foreign.R.Station = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StationID == foreign.StationID {
				local.R.StationSubwayTimetables = append(local.R.StationSubwayTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &subwayTimetableR{}
				}
				foreign.R.Station = local
				break
			}
		}
	}

	return nil
}

// LoadTerminalStationSubwayTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subwayRouteStationL) LoadTerminalStationSubwayTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRouteStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayRouteStation
	var object *SubwayRouteStation

	if singular {
		var ok bool
		object, ok = maybeSubwayRouteStation.(*SubwayRouteStation)
		if !ok {
			object = new(SubwayRouteStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRouteStation))
			}
		}
	} else {
		s, ok := maybeSubwayRouteStation.(*[]*SubwayRouteStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRouteStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRouteStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRouteStationR{}
		}
		args = append(args, object.StationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRouteStationR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_timetable`),
		qm.WhereIn(`subway_timetable.terminal_station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subway_timetable")
	}

	var resultSlice []*SubwayTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subway_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subway_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_timetable")
	}

	if singular {
		object.R.TerminalStationSubwayTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subwayTimetableR{}
			}
			foreign.R.TerminalStation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StationID == foreign.TerminalStationID {
				local.R.TerminalStationSubwayTimetables = append(local.R.TerminalStationSubwayTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &subwayTimetableR{}
				}
				foreign.R.TerminalStation = local
				break
			}
		}
	}

	return nil
}

// SetRoute of the subwayRouteStation to the related item.
// Sets o.R.Route to related.
// Adds o to related.R.RouteSubwayRouteStations.
func (o *SubwayRouteStation) SetRoute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayRoute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_route_station\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"route_id"}),
		strmangle.WhereClause("\"", "\"", 2, subwayRouteStationPrimaryKeyColumns),
	)
	values := []interface{}{related.RouteID, o.StationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RouteID = related.RouteID
	if o.R == nil {
		o.R = &subwayRouteStationR{
			Route: related,
		}
	} else {
		o.R.Route = related
	}

	if related.R == nil {
		related.R = &subwayRouteR{
			RouteSubwayRouteStations: SubwayRouteStationSlice{o},
		}
	} else {
		related.R.RouteSubwayRouteStations = append(related.R.RouteSubwayRouteStations, o)
	}

	return nil
}

// SetStationNameSubwayStation of the subwayRouteStation to the related item.
// Sets o.R.StationNameSubwayStation to related.
// Adds o to related.R.StationNameSubwayRouteStations.
func (o *SubwayRouteStation) SetStationNameSubwayStation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayStation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_route_station\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"station_name"}),
		strmangle.WhereClause("\"", "\"", 2, subwayRouteStationPrimaryKeyColumns),
	)
	values := []interface{}{related.StationName, o.StationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StationName = related.StationName
	if o.R == nil {
		o.R = &subwayRouteStationR{
			StationNameSubwayStation: related,
		}
	} else {
		o.R.StationNameSubwayStation = related
	}

	if related.R == nil {
		related.R = &subwayStationR{
			StationNameSubwayRouteStations: SubwayRouteStationSlice{o},
		}
	} else {
		related.R.StationNameSubwayRouteStations = append(related.R.StationNameSubwayRouteStations, o)
	}

	return nil
}

// AddStationSubwayRealtimes adds the given related objects to the existing relationships
// of the subway_route_station, optionally inserting them as new records.
// Appends related to o.R.StationSubwayRealtimes.
// Sets related.R.Station appropriately.
func (o *SubwayRouteStation) AddStationSubwayRealtimes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubwayRealtime) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StationID = o.StationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subway_realtime\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"station_id"}),
				strmangle.WhereClause("\"", "\"", 2, subwayRealtimePrimaryKeyColumns),
			)
			values := []interface{}{o.StationID, rel.StationID, rel.UpDownType, rel.ArrivalSequence}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StationID = o.StationID
		}
	}

	if o.R == nil {
		o.R = &subwayRouteStationR{
			StationSubwayRealtimes: related,
		}
	} else {
		o.R.StationSubwayRealtimes = append(o.R.StationSubwayRealtimes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subwayRealtimeR{
				Station: o,
			}
		} else {
			rel.R.Station = o
		}
	}
	return nil
}

// AddTerminalStationSubwayRealtimes adds the given related objects to the existing relationships
// of the subway_route_station, optionally inserting them as new records.
// Appends related to o.R.TerminalStationSubwayRealtimes.
// Sets related.R.TerminalStation appropriately.
func (o *SubwayRouteStation) AddTerminalStationSubwayRealtimes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubwayRealtime) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TerminalStationID = o.StationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subway_realtime\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"terminal_station_id"}),
				strmangle.WhereClause("\"", "\"", 2, subwayRealtimePrimaryKeyColumns),
			)
			values := []interface{}{o.StationID, rel.StationID, rel.UpDownType, rel.ArrivalSequence}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TerminalStationID = o.StationID
		}
	}

	if o.R == nil {
		o.R = &subwayRouteStationR{
			TerminalStationSubwayRealtimes: related,
		}
	} else {
		o.R.TerminalStationSubwayRealtimes = append(o.R.TerminalStationSubwayRealtimes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subwayRealtimeR{
				TerminalStation: o,
			}
		} else {
			rel.R.TerminalStation = o
		}
	}
	return nil
}

// AddStartStationSubwayTimetables adds the given related objects to the existing relationships
// of the subway_route_station, optionally inserting them as new records.
// Appends related to o.R.StartStationSubwayTimetables.
// Sets related.R.StartStation appropriately.
func (o *SubwayRouteStation) AddStartStationSubwayTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubwayTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StartStationID = o.StationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subway_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"start_station_id"}),
				strmangle.WhereClause("\"", "\"", 2, subwayTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.StationID, rel.StationID, rel.UpDownType, rel.Weekday, rel.DepartureTime}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StartStationID = o.StationID
		}
	}

	if o.R == nil {
		o.R = &subwayRouteStationR{
			StartStationSubwayTimetables: related,
		}
	} else {
		o.R.StartStationSubwayTimetables = append(o.R.StartStationSubwayTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subwayTimetableR{
				StartStation: o,
			}
		} else {
			rel.R.StartStation = o
		}
	}
	return nil
}

// AddStationSubwayTimetables adds the given related objects to the existing relationships
// of the subway_route_station, optionally inserting them as new records.
// Appends related to o.R.StationSubwayTimetables.
// Sets related.R.Station appropriately.
func (o *SubwayRouteStation) AddStationSubwayTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubwayTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StationID = o.StationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subway_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"station_id"}),
				strmangle.WhereClause("\"", "\"", 2, subwayTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.StationID, rel.StationID, rel.UpDownType, rel.Weekday, rel.DepartureTime}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StationID = o.StationID
		}
	}

	if o.R == nil {
		o.R = &subwayRouteStationR{
			StationSubwayTimetables: related,
		}
	} else {
		o.R.StationSubwayTimetables = append(o.R.StationSubwayTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subwayTimetableR{
				Station: o,
			}
		} else {
			rel.R.Station = o
		}
	}
	return nil
}

// AddTerminalStationSubwayTimetables adds the given related objects to the existing relationships
// of the subway_route_station, optionally inserting them as new records.
// Appends related to o.R.TerminalStationSubwayTimetables.
// Sets related.R.TerminalStation appropriately.
func (o *SubwayRouteStation) AddTerminalStationSubwayTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubwayTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TerminalStationID = o.StationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subway_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"terminal_station_id"}),
				strmangle.WhereClause("\"", "\"", 2, subwayTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.StationID, rel.StationID, rel.UpDownType, rel.Weekday, rel.DepartureTime}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TerminalStationID = o.StationID
		}
	}

	if o.R == nil {
		o.R = &subwayRouteStationR{
			TerminalStationSubwayTimetables: related,
		}
	} else {
		o.R.TerminalStationSubwayTimetables = append(o.R.TerminalStationSubwayTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subwayTimetableR{
				TerminalStation: o,
			}
		} else {
			rel.R.TerminalStation = o
		}
	}
	return nil
}

// SubwayRouteStations retrieves all the records using an executor.
func SubwayRouteStations(mods ...qm.QueryMod) subwayRouteStationQuery {
	mods = append(mods, qm.From("\"subway_route_station\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subway_route_station\".*"})
	}

	return subwayRouteStationQuery{q}
}

// FindSubwayRouteStation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubwayRouteStation(ctx context.Context, exec boil.ContextExecutor, stationID string, selectCols ...string) (*SubwayRouteStation, error) {
	subwayRouteStationObj := &SubwayRouteStation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subway_route_station\" where \"station_id\"=$1", sel,
	)

	q := queries.Raw(query, stationID)

	err := q.Bind(ctx, exec, subwayRouteStationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subway_route_station")
	}

	return subwayRouteStationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubwayRouteStation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_route_station provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(subwayRouteStationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subwayRouteStationInsertCacheMut.RLock()
	cache, cached := subwayRouteStationInsertCache[key]
	subwayRouteStationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subwayRouteStationAllColumns,
			subwayRouteStationColumnsWithDefault,
			subwayRouteStationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subwayRouteStationType, subwayRouteStationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subwayRouteStationType, subwayRouteStationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subway_route_station\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subway_route_station\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subway_route_station")
	}

	if !cached {
		subwayRouteStationInsertCacheMut.Lock()
		subwayRouteStationInsertCache[key] = cache
		subwayRouteStationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SubwayRouteStation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubwayRouteStation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	subwayRouteStationUpdateCacheMut.RLock()
	cache, cached := subwayRouteStationUpdateCache[key]
	subwayRouteStationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subwayRouteStationAllColumns,
			subwayRouteStationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subway_route_station, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subway_route_station\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subwayRouteStationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subwayRouteStationType, subwayRouteStationMapping, append(wl, subwayRouteStationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subway_route_station row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subway_route_station")
	}

	if !cached {
		subwayRouteStationUpdateCacheMut.Lock()
		subwayRouteStationUpdateCache[key] = cache
		subwayRouteStationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q subwayRouteStationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subway_route_station")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subway_route_station")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubwayRouteStationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayRouteStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subway_route_station\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subwayRouteStationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subwayRouteStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subwayRouteStation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubwayRouteStation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_route_station provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(subwayRouteStationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subwayRouteStationUpsertCacheMut.RLock()
	cache, cached := subwayRouteStationUpsertCache[key]
	subwayRouteStationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subwayRouteStationAllColumns,
			subwayRouteStationColumnsWithDefault,
			subwayRouteStationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subwayRouteStationAllColumns,
			subwayRouteStationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert subway_route_station, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subwayRouteStationPrimaryKeyColumns))
			copy(conflict, subwayRouteStationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subway_route_station\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subwayRouteStationType, subwayRouteStationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subwayRouteStationType, subwayRouteStationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert subway_route_station")
	}

	if !cached {
		subwayRouteStationUpsertCacheMut.Lock()
		subwayRouteStationUpsertCache[key] = cache
		subwayRouteStationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SubwayRouteStation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubwayRouteStation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubwayRouteStation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subwayRouteStationPrimaryKeyMapping)
	sql := "DELETE FROM \"subway_route_station\" WHERE \"station_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subway_route_station")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subway_route_station")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subwayRouteStationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subwayRouteStationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subway_route_station")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_route_station")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubwayRouteStationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayRouteStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subway_route_station\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayRouteStationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subwayRouteStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_route_station")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubwayRouteStation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubwayRouteStation(ctx, exec, o.StationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubwayRouteStationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubwayRouteStationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayRouteStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subway_route_station\".* FROM \"subway_route_station\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayRouteStationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubwayRouteStationSlice")
	}

	*o = slice

	return nil
}

// SubwayRouteStationExists checks if the SubwayRouteStation row exists.
func SubwayRouteStationExists(ctx context.Context, exec boil.ContextExecutor, stationID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subway_route_station\" where \"station_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stationID)
	}
	row := exec.QueryRowContext(ctx, sql, stationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subway_route_station exists")
	}

	return exists, nil
}

// Exists checks if the SubwayRouteStation row exists.
func (o *SubwayRouteStation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubwayRouteStationExists(ctx, exec, o.StationID)
}
