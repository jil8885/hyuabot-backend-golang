// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttleRouteStop is an object representing the database table.
type ShuttleRouteStop struct {
	RouteName      string   `boil:"route_name" json:"routeName" toml:"routeName" yaml:"routeName"`
	StopName       string   `boil:"stop_name" json:"stopName" toml:"stopName" yaml:"stopName"`
	StopOrder      null.Int `boil:"stop_order" json:"stopOrder,omitempty" toml:"stopOrder" yaml:"stopOrder,omitempty"`
	CumulativeTime string   `boil:"cumulative_time" json:"cumulativeTime" toml:"cumulativeTime" yaml:"cumulativeTime"`

	R *shuttleRouteStopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shuttleRouteStopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShuttleRouteStopColumns = struct {
	RouteName      string
	StopName       string
	StopOrder      string
	CumulativeTime string
}{
	RouteName:      "route_name",
	StopName:       "stop_name",
	StopOrder:      "stop_order",
	CumulativeTime: "cumulative_time",
}

var ShuttleRouteStopTableColumns = struct {
	RouteName      string
	StopName       string
	StopOrder      string
	CumulativeTime string
}{
	RouteName:      "shuttle_route_stop.route_name",
	StopName:       "shuttle_route_stop.stop_name",
	StopOrder:      "shuttle_route_stop.stop_order",
	CumulativeTime: "shuttle_route_stop.cumulative_time",
}

// Generated where

var ShuttleRouteStopWhere = struct {
	RouteName      whereHelperstring
	StopName       whereHelperstring
	StopOrder      whereHelpernull_Int
	CumulativeTime whereHelperstring
}{
	RouteName:      whereHelperstring{field: "\"shuttle_route_stop\".\"route_name\""},
	StopName:       whereHelperstring{field: "\"shuttle_route_stop\".\"stop_name\""},
	StopOrder:      whereHelpernull_Int{field: "\"shuttle_route_stop\".\"stop_order\""},
	CumulativeTime: whereHelperstring{field: "\"shuttle_route_stop\".\"cumulative_time\""},
}

// ShuttleRouteStopRels is where relationship names are stored.
var ShuttleRouteStopRels = struct {
	RouteNameShuttleRoute string
	StopNameShuttleStop   string
}{
	RouteNameShuttleRoute: "RouteNameShuttleRoute",
	StopNameShuttleStop:   "StopNameShuttleStop",
}

// shuttleRouteStopR is where relationships are stored.
type shuttleRouteStopR struct {
	RouteNameShuttleRoute *ShuttleRoute `boil:"RouteNameShuttleRoute" json:"RouteNameShuttleRoute" toml:"RouteNameShuttleRoute" yaml:"RouteNameShuttleRoute"`
	StopNameShuttleStop   *ShuttleStop  `boil:"StopNameShuttleStop" json:"StopNameShuttleStop" toml:"StopNameShuttleStop" yaml:"StopNameShuttleStop"`
}

// NewStruct creates a new relationship struct
func (*shuttleRouteStopR) NewStruct() *shuttleRouteStopR {
	return &shuttleRouteStopR{}
}

func (r *shuttleRouteStopR) GetRouteNameShuttleRoute() *ShuttleRoute {
	if r == nil {
		return nil
	}
	return r.RouteNameShuttleRoute
}

func (r *shuttleRouteStopR) GetStopNameShuttleStop() *ShuttleStop {
	if r == nil {
		return nil
	}
	return r.StopNameShuttleStop
}

// shuttleRouteStopL is where Load methods for each relationship are stored.
type shuttleRouteStopL struct{}

var (
	shuttleRouteStopAllColumns            = []string{"route_name", "stop_name", "stop_order", "cumulative_time"}
	shuttleRouteStopColumnsWithoutDefault = []string{"route_name", "stop_name", "cumulative_time"}
	shuttleRouteStopColumnsWithDefault    = []string{"stop_order"}
	shuttleRouteStopPrimaryKeyColumns     = []string{"route_name", "stop_name"}
	shuttleRouteStopGeneratedColumns      = []string{}
)

type (
	// ShuttleRouteStopSlice is an alias for a slice of pointers to ShuttleRouteStop.
	// This should almost always be used instead of []ShuttleRouteStop.
	ShuttleRouteStopSlice []*ShuttleRouteStop
	// ShuttleRouteStopHook is the signature for custom ShuttleRouteStop hook methods
	ShuttleRouteStopHook func(context.Context, boil.ContextExecutor, *ShuttleRouteStop) error

	shuttleRouteStopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttleRouteStopType                 = reflect.TypeOf(&ShuttleRouteStop{})
	shuttleRouteStopMapping              = queries.MakeStructMapping(shuttleRouteStopType)
	shuttleRouteStopPrimaryKeyMapping, _ = queries.BindMapping(shuttleRouteStopType, shuttleRouteStopMapping, shuttleRouteStopPrimaryKeyColumns)
	shuttleRouteStopInsertCacheMut       sync.RWMutex
	shuttleRouteStopInsertCache          = make(map[string]insertCache)
	shuttleRouteStopUpdateCacheMut       sync.RWMutex
	shuttleRouteStopUpdateCache          = make(map[string]updateCache)
	shuttleRouteStopUpsertCacheMut       sync.RWMutex
	shuttleRouteStopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shuttleRouteStopAfterSelectHooks []ShuttleRouteStopHook

var shuttleRouteStopBeforeInsertHooks []ShuttleRouteStopHook
var shuttleRouteStopAfterInsertHooks []ShuttleRouteStopHook

var shuttleRouteStopBeforeUpdateHooks []ShuttleRouteStopHook
var shuttleRouteStopAfterUpdateHooks []ShuttleRouteStopHook

var shuttleRouteStopBeforeDeleteHooks []ShuttleRouteStopHook
var shuttleRouteStopAfterDeleteHooks []ShuttleRouteStopHook

var shuttleRouteStopBeforeUpsertHooks []ShuttleRouteStopHook
var shuttleRouteStopAfterUpsertHooks []ShuttleRouteStopHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShuttleRouteStop) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShuttleRouteStop) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShuttleRouteStop) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShuttleRouteStop) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShuttleRouteStop) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShuttleRouteStop) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShuttleRouteStop) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShuttleRouteStop) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShuttleRouteStop) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteStopAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShuttleRouteStopHook registers your hook function for all future operations.
func AddShuttleRouteStopHook(hookPoint boil.HookPoint, shuttleRouteStopHook ShuttleRouteStopHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shuttleRouteStopAfterSelectHooks = append(shuttleRouteStopAfterSelectHooks, shuttleRouteStopHook)
	case boil.BeforeInsertHook:
		shuttleRouteStopBeforeInsertHooks = append(shuttleRouteStopBeforeInsertHooks, shuttleRouteStopHook)
	case boil.AfterInsertHook:
		shuttleRouteStopAfterInsertHooks = append(shuttleRouteStopAfterInsertHooks, shuttleRouteStopHook)
	case boil.BeforeUpdateHook:
		shuttleRouteStopBeforeUpdateHooks = append(shuttleRouteStopBeforeUpdateHooks, shuttleRouteStopHook)
	case boil.AfterUpdateHook:
		shuttleRouteStopAfterUpdateHooks = append(shuttleRouteStopAfterUpdateHooks, shuttleRouteStopHook)
	case boil.BeforeDeleteHook:
		shuttleRouteStopBeforeDeleteHooks = append(shuttleRouteStopBeforeDeleteHooks, shuttleRouteStopHook)
	case boil.AfterDeleteHook:
		shuttleRouteStopAfterDeleteHooks = append(shuttleRouteStopAfterDeleteHooks, shuttleRouteStopHook)
	case boil.BeforeUpsertHook:
		shuttleRouteStopBeforeUpsertHooks = append(shuttleRouteStopBeforeUpsertHooks, shuttleRouteStopHook)
	case boil.AfterUpsertHook:
		shuttleRouteStopAfterUpsertHooks = append(shuttleRouteStopAfterUpsertHooks, shuttleRouteStopHook)
	}
}

// One returns a single shuttleRouteStop record from the query.
func (q shuttleRouteStopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttleRouteStop, error) {
	o := &ShuttleRouteStop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_route_stop")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShuttleRouteStop records from the query.
func (q shuttleRouteStopQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttleRouteStopSlice, error) {
	var o []*ShuttleRouteStop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttleRouteStop slice")
	}

	if len(shuttleRouteStopAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShuttleRouteStop records in the query.
func (q shuttleRouteStopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_route_stop rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttleRouteStopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_route_stop exists")
	}

	return count > 0, nil
}

// RouteNameShuttleRoute pointed to by the foreign key.
func (o *ShuttleRouteStop) RouteNameShuttleRoute(mods ...qm.QueryMod) shuttleRouteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"route_name\" = ?", o.RouteName),
	}

	queryMods = append(queryMods, mods...)

	return ShuttleRoutes(queryMods...)
}

// StopNameShuttleStop pointed to by the foreign key.
func (o *ShuttleRouteStop) StopNameShuttleStop(mods ...qm.QueryMod) shuttleStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_name\" = ?", o.StopName),
	}

	queryMods = append(queryMods, mods...)

	return ShuttleStops(queryMods...)
}

// LoadRouteNameShuttleRoute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttleRouteStopL) LoadRouteNameShuttleRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleRouteStop interface{}, mods queries.Applicator) error {
	var slice []*ShuttleRouteStop
	var object *ShuttleRouteStop

	if singular {
		var ok bool
		object, ok = maybeShuttleRouteStop.(*ShuttleRouteStop)
		if !ok {
			object = new(ShuttleRouteStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleRouteStop))
			}
		}
	} else {
		s, ok := maybeShuttleRouteStop.(*[]*ShuttleRouteStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleRouteStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleRouteStopR{}
		}
		args = append(args, object.RouteName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleRouteStopR{}
			}

			for _, a := range args {
				if a == obj.RouteName {
					continue Outer
				}
			}

			args = append(args, obj.RouteName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_route`),
		qm.WhereIn(`shuttle_route.route_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttleRoute")
	}

	var resultSlice []*ShuttleRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttleRoute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_route")
	}

	if len(shuttleRouteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RouteNameShuttleRoute = foreign
		if foreign.R == nil {
			foreign.R = &shuttleRouteR{}
		}
		foreign.R.RouteNameShuttleRouteStops = append(foreign.R.RouteNameShuttleRouteStops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RouteName == foreign.RouteName {
				local.R.RouteNameShuttleRoute = foreign
				if foreign.R == nil {
					foreign.R = &shuttleRouteR{}
				}
				foreign.R.RouteNameShuttleRouteStops = append(foreign.R.RouteNameShuttleRouteStops, local)
				break
			}
		}
	}

	return nil
}

// LoadStopNameShuttleStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttleRouteStopL) LoadStopNameShuttleStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleRouteStop interface{}, mods queries.Applicator) error {
	var slice []*ShuttleRouteStop
	var object *ShuttleRouteStop

	if singular {
		var ok bool
		object, ok = maybeShuttleRouteStop.(*ShuttleRouteStop)
		if !ok {
			object = new(ShuttleRouteStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleRouteStop))
			}
		}
	} else {
		s, ok := maybeShuttleRouteStop.(*[]*ShuttleRouteStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleRouteStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleRouteStopR{}
		}
		args = append(args, object.StopName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleRouteStopR{}
			}

			for _, a := range args {
				if a == obj.StopName {
					continue Outer
				}
			}

			args = append(args, obj.StopName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_stop`),
		qm.WhereIn(`shuttle_stop.stop_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttleStop")
	}

	var resultSlice []*ShuttleStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttleStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_stop")
	}

	if len(shuttleStopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StopNameShuttleStop = foreign
		if foreign.R == nil {
			foreign.R = &shuttleStopR{}
		}
		foreign.R.StopNameShuttleRouteStops = append(foreign.R.StopNameShuttleRouteStops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StopName == foreign.StopName {
				local.R.StopNameShuttleStop = foreign
				if foreign.R == nil {
					foreign.R = &shuttleStopR{}
				}
				foreign.R.StopNameShuttleRouteStops = append(foreign.R.StopNameShuttleRouteStops, local)
				break
			}
		}
	}

	return nil
}

// SetRouteNameShuttleRoute of the shuttleRouteStop to the related item.
// Sets o.R.RouteNameShuttleRoute to related.
// Adds o to related.R.RouteNameShuttleRouteStops.
func (o *ShuttleRouteStop) SetRouteNameShuttleRoute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttleRoute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"route_name"}),
		strmangle.WhereClause("\"", "\"", 2, shuttleRouteStopPrimaryKeyColumns),
	)
	values := []interface{}{related.RouteName, o.RouteName, o.StopName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RouteName = related.RouteName
	if o.R == nil {
		o.R = &shuttleRouteStopR{
			RouteNameShuttleRoute: related,
		}
	} else {
		o.R.RouteNameShuttleRoute = related
	}

	if related.R == nil {
		related.R = &shuttleRouteR{
			RouteNameShuttleRouteStops: ShuttleRouteStopSlice{o},
		}
	} else {
		related.R.RouteNameShuttleRouteStops = append(related.R.RouteNameShuttleRouteStops, o)
	}

	return nil
}

// SetStopNameShuttleStop of the shuttleRouteStop to the related item.
// Sets o.R.StopNameShuttleStop to related.
// Adds o to related.R.StopNameShuttleRouteStops.
func (o *ShuttleRouteStop) SetStopNameShuttleStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttleStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"stop_name"}),
		strmangle.WhereClause("\"", "\"", 2, shuttleRouteStopPrimaryKeyColumns),
	)
	values := []interface{}{related.StopName, o.RouteName, o.StopName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StopName = related.StopName
	if o.R == nil {
		o.R = &shuttleRouteStopR{
			StopNameShuttleStop: related,
		}
	} else {
		o.R.StopNameShuttleStop = related
	}

	if related.R == nil {
		related.R = &shuttleStopR{
			StopNameShuttleRouteStops: ShuttleRouteStopSlice{o},
		}
	} else {
		related.R.StopNameShuttleRouteStops = append(related.R.StopNameShuttleRouteStops, o)
	}

	return nil
}

// ShuttleRouteStops retrieves all the records using an executor.
func ShuttleRouteStops(mods ...qm.QueryMod) shuttleRouteStopQuery {
	mods = append(mods, qm.From("\"shuttle_route_stop\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_route_stop\".*"})
	}

	return shuttleRouteStopQuery{q}
}

// FindShuttleRouteStop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShuttleRouteStop(ctx context.Context, exec boil.ContextExecutor, routeName string, stopName string, selectCols ...string) (*ShuttleRouteStop, error) {
	shuttleRouteStopObj := &ShuttleRouteStop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shuttle_route_stop\" where \"route_name\"=$1 AND \"stop_name\"=$2", sel,
	)

	q := queries.Raw(query, routeName, stopName)

	err := q.Bind(ctx, exec, shuttleRouteStopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shuttle_route_stop")
	}

	if err = shuttleRouteStopObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shuttleRouteStopObj, err
	}

	return shuttleRouteStopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShuttleRouteStop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_route_stop provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleRouteStopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shuttleRouteStopInsertCacheMut.RLock()
	cache, cached := shuttleRouteStopInsertCache[key]
	shuttleRouteStopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shuttleRouteStopAllColumns,
			shuttleRouteStopColumnsWithDefault,
			shuttleRouteStopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shuttleRouteStopType, shuttleRouteStopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shuttleRouteStopType, shuttleRouteStopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shuttle_route_stop\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shuttle_route_stop\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shuttle_route_stop")
	}

	if !cached {
		shuttleRouteStopInsertCacheMut.Lock()
		shuttleRouteStopInsertCache[key] = cache
		shuttleRouteStopInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShuttleRouteStop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShuttleRouteStop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shuttleRouteStopUpdateCacheMut.RLock()
	cache, cached := shuttleRouteStopUpdateCache[key]
	shuttleRouteStopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shuttleRouteStopAllColumns,
			shuttleRouteStopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shuttle_route_stop, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shuttle_route_stop\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shuttleRouteStopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shuttleRouteStopType, shuttleRouteStopMapping, append(wl, shuttleRouteStopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shuttle_route_stop row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shuttle_route_stop")
	}

	if !cached {
		shuttleRouteStopUpdateCacheMut.Lock()
		shuttleRouteStopUpdateCache[key] = cache
		shuttleRouteStopUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shuttleRouteStopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shuttle_route_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shuttle_route_stop")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShuttleRouteStopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleRouteStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shuttle_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shuttleRouteStopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shuttleRouteStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shuttleRouteStop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShuttleRouteStop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_route_stop provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleRouteStopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shuttleRouteStopUpsertCacheMut.RLock()
	cache, cached := shuttleRouteStopUpsertCache[key]
	shuttleRouteStopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shuttleRouteStopAllColumns,
			shuttleRouteStopColumnsWithDefault,
			shuttleRouteStopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shuttleRouteStopAllColumns,
			shuttleRouteStopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shuttle_route_stop, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shuttleRouteStopPrimaryKeyColumns))
			copy(conflict, shuttleRouteStopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shuttle_route_stop\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shuttleRouteStopType, shuttleRouteStopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shuttleRouteStopType, shuttleRouteStopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shuttle_route_stop")
	}

	if !cached {
		shuttleRouteStopUpsertCacheMut.Lock()
		shuttleRouteStopUpsertCache[key] = cache
		shuttleRouteStopUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShuttleRouteStop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShuttleRouteStop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShuttleRouteStop provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shuttleRouteStopPrimaryKeyMapping)
	sql := "DELETE FROM \"shuttle_route_stop\" WHERE \"route_name\"=$1 AND \"stop_name\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shuttle_route_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shuttle_route_stop")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shuttleRouteStopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shuttleRouteStopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttle_route_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_route_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShuttleRouteStopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shuttleRouteStopBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleRouteStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shuttle_route_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleRouteStopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttleRouteStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_route_stop")
	}

	if len(shuttleRouteStopAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShuttleRouteStop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShuttleRouteStop(ctx, exec, o.RouteName, o.StopName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShuttleRouteStopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShuttleRouteStopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleRouteStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shuttle_route_stop\".* FROM \"shuttle_route_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleRouteStopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShuttleRouteStopSlice")
	}

	*o = slice

	return nil
}

// ShuttleRouteStopExists checks if the ShuttleRouteStop row exists.
func ShuttleRouteStopExists(ctx context.Context, exec boil.ContextExecutor, routeName string, stopName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shuttle_route_stop\" where \"route_name\"=$1 AND \"stop_name\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, routeName, stopName)
	}
	row := exec.QueryRowContext(ctx, sql, routeName, stopName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shuttle_route_stop exists")
	}

	return exists, nil
}

// Exists checks if the ShuttleRouteStop row exists.
func (o *ShuttleRouteStop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShuttleRouteStopExists(ctx, exec, o.RouteName, o.StopName)
}
