// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubwayStation is an object representing the database table.
type SubwayStation struct {
	StationName string `boil:"station_name" json:"stationName" toml:"stationName" yaml:"stationName"`

	R *subwayStationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subwayStationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubwayStationColumns = struct {
	StationName string
}{
	StationName: "station_name",
}

var SubwayStationTableColumns = struct {
	StationName string
}{
	StationName: "subway_station.station_name",
}

// Generated where

var SubwayStationWhere = struct {
	StationName whereHelperstring
}{
	StationName: whereHelperstring{field: "\"subway_station\".\"station_name\""},
}

// SubwayStationRels is where relationship names are stored.
var SubwayStationRels = struct {
	StationNameSubwayRouteStations string
}{
	StationNameSubwayRouteStations: "StationNameSubwayRouteStations",
}

// subwayStationR is where relationships are stored.
type subwayStationR struct {
	StationNameSubwayRouteStations SubwayRouteStationSlice `boil:"StationNameSubwayRouteStations" json:"StationNameSubwayRouteStations" toml:"StationNameSubwayRouteStations" yaml:"StationNameSubwayRouteStations"`
}

// NewStruct creates a new relationship struct
func (*subwayStationR) NewStruct() *subwayStationR {
	return &subwayStationR{}
}

func (r *subwayStationR) GetStationNameSubwayRouteStations() SubwayRouteStationSlice {
	if r == nil {
		return nil
	}
	return r.StationNameSubwayRouteStations
}

// subwayStationL is where Load methods for each relationship are stored.
type subwayStationL struct{}

var (
	subwayStationAllColumns            = []string{"station_name"}
	subwayStationColumnsWithoutDefault = []string{"station_name"}
	subwayStationColumnsWithDefault    = []string{}
	subwayStationPrimaryKeyColumns     = []string{"station_name"}
	subwayStationGeneratedColumns      = []string{}
)

type (
	// SubwayStationSlice is an alias for a slice of pointers to SubwayStation.
	// This should almost always be used instead of []SubwayStation.
	SubwayStationSlice []*SubwayStation

	subwayStationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subwayStationType                 = reflect.TypeOf(&SubwayStation{})
	subwayStationMapping              = queries.MakeStructMapping(subwayStationType)
	subwayStationPrimaryKeyMapping, _ = queries.BindMapping(subwayStationType, subwayStationMapping, subwayStationPrimaryKeyColumns)
	subwayStationInsertCacheMut       sync.RWMutex
	subwayStationInsertCache          = make(map[string]insertCache)
	subwayStationUpdateCacheMut       sync.RWMutex
	subwayStationUpdateCache          = make(map[string]updateCache)
	subwayStationUpsertCacheMut       sync.RWMutex
	subwayStationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single subwayStation record from the query.
func (q subwayStationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubwayStation, error) {
	o := &SubwayStation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subway_station")
	}

	return o, nil
}

// All returns all SubwayStation records from the query.
func (q subwayStationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubwayStationSlice, error) {
	var o []*SubwayStation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubwayStation slice")
	}

	return o, nil
}

// Count returns the count of all SubwayStation records in the query.
func (q subwayStationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subway_station rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subwayStationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subway_station exists")
	}

	return count > 0, nil
}

// StationNameSubwayRouteStations retrieves all the subway_route_station's SubwayRouteStations with an executor via station_name column.
func (o *SubwayStation) StationNameSubwayRouteStations(mods ...qm.QueryMod) subwayRouteStationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subway_route_station\".\"station_name\"=?", o.StationName),
	)

	return SubwayRouteStations(queryMods...)
}

// LoadStationNameSubwayRouteStations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subwayStationL) LoadStationNameSubwayRouteStations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayStation interface{}, mods queries.Applicator) error {
	var slice []*SubwayStation
	var object *SubwayStation

	if singular {
		var ok bool
		object, ok = maybeSubwayStation.(*SubwayStation)
		if !ok {
			object = new(SubwayStation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayStation))
			}
		}
	} else {
		s, ok := maybeSubwayStation.(*[]*SubwayStation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayStation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayStation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayStationR{}
		}
		args = append(args, object.StationName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayStationR{}
			}

			for _, a := range args {
				if a == obj.StationName {
					continue Outer
				}
			}

			args = append(args, obj.StationName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route_station`),
		qm.WhereIn(`subway_route_station.station_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subway_route_station")
	}

	var resultSlice []*SubwayRouteStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subway_route_station")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subway_route_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route_station")
	}

	if singular {
		object.R.StationNameSubwayRouteStations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subwayRouteStationR{}
			}
			foreign.R.StationNameSubwayStation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StationName == foreign.StationName {
				local.R.StationNameSubwayRouteStations = append(local.R.StationNameSubwayRouteStations, foreign)
				if foreign.R == nil {
					foreign.R = &subwayRouteStationR{}
				}
				foreign.R.StationNameSubwayStation = local
				break
			}
		}
	}

	return nil
}

// AddStationNameSubwayRouteStations adds the given related objects to the existing relationships
// of the subway_station, optionally inserting them as new records.
// Appends related to o.R.StationNameSubwayRouteStations.
// Sets related.R.StationNameSubwayStation appropriately.
func (o *SubwayStation) AddStationNameSubwayRouteStations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubwayRouteStation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StationName = o.StationName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subway_route_station\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"station_name"}),
				strmangle.WhereClause("\"", "\"", 2, subwayRouteStationPrimaryKeyColumns),
			)
			values := []interface{}{o.StationName, rel.StationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StationName = o.StationName
		}
	}

	if o.R == nil {
		o.R = &subwayStationR{
			StationNameSubwayRouteStations: related,
		}
	} else {
		o.R.StationNameSubwayRouteStations = append(o.R.StationNameSubwayRouteStations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subwayRouteStationR{
				StationNameSubwayStation: o,
			}
		} else {
			rel.R.StationNameSubwayStation = o
		}
	}
	return nil
}

// SubwayStations retrieves all the records using an executor.
func SubwayStations(mods ...qm.QueryMod) subwayStationQuery {
	mods = append(mods, qm.From("\"subway_station\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subway_station\".*"})
	}

	return subwayStationQuery{q}
}

// FindSubwayStation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubwayStation(ctx context.Context, exec boil.ContextExecutor, stationName string, selectCols ...string) (*SubwayStation, error) {
	subwayStationObj := &SubwayStation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subway_station\" where \"station_name\"=$1", sel,
	)

	q := queries.Raw(query, stationName)

	err := q.Bind(ctx, exec, subwayStationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subway_station")
	}

	return subwayStationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubwayStation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_station provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(subwayStationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subwayStationInsertCacheMut.RLock()
	cache, cached := subwayStationInsertCache[key]
	subwayStationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subwayStationAllColumns,
			subwayStationColumnsWithDefault,
			subwayStationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subwayStationType, subwayStationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subwayStationType, subwayStationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subway_station\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subway_station\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subway_station")
	}

	if !cached {
		subwayStationInsertCacheMut.Lock()
		subwayStationInsertCache[key] = cache
		subwayStationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SubwayStation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubwayStation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	subwayStationUpdateCacheMut.RLock()
	cache, cached := subwayStationUpdateCache[key]
	subwayStationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subwayStationAllColumns,
			subwayStationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subway_station, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subway_station\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subwayStationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subwayStationType, subwayStationMapping, append(wl, subwayStationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subway_station row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subway_station")
	}

	if !cached {
		subwayStationUpdateCacheMut.Lock()
		subwayStationUpdateCache[key] = cache
		subwayStationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q subwayStationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subway_station")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subway_station")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubwayStationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subway_station\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subwayStationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subwayStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subwayStation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubwayStation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_station provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(subwayStationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subwayStationUpsertCacheMut.RLock()
	cache, cached := subwayStationUpsertCache[key]
	subwayStationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subwayStationAllColumns,
			subwayStationColumnsWithDefault,
			subwayStationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subwayStationAllColumns,
			subwayStationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert subway_station, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subwayStationPrimaryKeyColumns))
			copy(conflict, subwayStationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subway_station\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subwayStationType, subwayStationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subwayStationType, subwayStationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert subway_station")
	}

	if !cached {
		subwayStationUpsertCacheMut.Lock()
		subwayStationUpsertCache[key] = cache
		subwayStationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SubwayStation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubwayStation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubwayStation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subwayStationPrimaryKeyMapping)
	sql := "DELETE FROM \"subway_station\" WHERE \"station_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subway_station")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subway_station")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subwayStationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subwayStationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subway_station")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_station")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubwayStationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subway_station\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayStationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subwayStation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_station")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubwayStation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubwayStation(ctx, exec, o.StationName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubwayStationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubwayStationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayStationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subway_station\".* FROM \"subway_station\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayStationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubwayStationSlice")
	}

	*o = slice

	return nil
}

// SubwayStationExists checks if the SubwayStation row exists.
func SubwayStationExists(ctx context.Context, exec boil.ContextExecutor, stationName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subway_station\" where \"station_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stationName)
	}
	row := exec.QueryRowContext(ctx, sql, stationName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subway_station exists")
	}

	return exists, nil
}

// Exists checks if the SubwayStation row exists.
func (o *SubwayStation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubwayStationExists(ctx, exec, o.StationName)
}
