// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommuteShuttleStop is an object representing the database table.
type CommuteShuttleStop struct {
	StopName    string       `boil:"stop_name" json:"stopName" toml:"stopName" yaml:"stopName"`
	Description null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Latitude    null.Float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`
	Longitude   null.Float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`

	R *commuteShuttleStopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L commuteShuttleStopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommuteShuttleStopColumns = struct {
	StopName    string
	Description string
	Latitude    string
	Longitude   string
}{
	StopName:    "stop_name",
	Description: "description",
	Latitude:    "latitude",
	Longitude:   "longitude",
}

var CommuteShuttleStopTableColumns = struct {
	StopName    string
	Description string
	Latitude    string
	Longitude   string
}{
	StopName:    "commute_shuttle_stop.stop_name",
	Description: "commute_shuttle_stop.description",
	Latitude:    "commute_shuttle_stop.latitude",
	Longitude:   "commute_shuttle_stop.longitude",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CommuteShuttleStopWhere = struct {
	StopName    whereHelperstring
	Description whereHelpernull_String
	Latitude    whereHelpernull_Float64
	Longitude   whereHelpernull_Float64
}{
	StopName:    whereHelperstring{field: "\"commute_shuttle_stop\".\"stop_name\""},
	Description: whereHelpernull_String{field: "\"commute_shuttle_stop\".\"description\""},
	Latitude:    whereHelpernull_Float64{field: "\"commute_shuttle_stop\".\"latitude\""},
	Longitude:   whereHelpernull_Float64{field: "\"commute_shuttle_stop\".\"longitude\""},
}

// CommuteShuttleStopRels is where relationship names are stored.
var CommuteShuttleStopRels = struct {
	StopNameCommuteShuttleTimetables string
}{
	StopNameCommuteShuttleTimetables: "StopNameCommuteShuttleTimetables",
}

// commuteShuttleStopR is where relationships are stored.
type commuteShuttleStopR struct {
	StopNameCommuteShuttleTimetables CommuteShuttleTimetableSlice `boil:"StopNameCommuteShuttleTimetables" json:"StopNameCommuteShuttleTimetables" toml:"StopNameCommuteShuttleTimetables" yaml:"StopNameCommuteShuttleTimetables"`
}

// NewStruct creates a new relationship struct
func (*commuteShuttleStopR) NewStruct() *commuteShuttleStopR {
	return &commuteShuttleStopR{}
}

func (r *commuteShuttleStopR) GetStopNameCommuteShuttleTimetables() CommuteShuttleTimetableSlice {
	if r == nil {
		return nil
	}
	return r.StopNameCommuteShuttleTimetables
}

// commuteShuttleStopL is where Load methods for each relationship are stored.
type commuteShuttleStopL struct{}

var (
	commuteShuttleStopAllColumns            = []string{"stop_name", "description", "latitude", "longitude"}
	commuteShuttleStopColumnsWithoutDefault = []string{"stop_name"}
	commuteShuttleStopColumnsWithDefault    = []string{"description", "latitude", "longitude"}
	commuteShuttleStopPrimaryKeyColumns     = []string{"stop_name"}
	commuteShuttleStopGeneratedColumns      = []string{}
)

type (
	// CommuteShuttleStopSlice is an alias for a slice of pointers to CommuteShuttleStop.
	// This should almost always be used instead of []CommuteShuttleStop.
	CommuteShuttleStopSlice []*CommuteShuttleStop

	commuteShuttleStopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commuteShuttleStopType                 = reflect.TypeOf(&CommuteShuttleStop{})
	commuteShuttleStopMapping              = queries.MakeStructMapping(commuteShuttleStopType)
	commuteShuttleStopPrimaryKeyMapping, _ = queries.BindMapping(commuteShuttleStopType, commuteShuttleStopMapping, commuteShuttleStopPrimaryKeyColumns)
	commuteShuttleStopInsertCacheMut       sync.RWMutex
	commuteShuttleStopInsertCache          = make(map[string]insertCache)
	commuteShuttleStopUpdateCacheMut       sync.RWMutex
	commuteShuttleStopUpdateCache          = make(map[string]updateCache)
	commuteShuttleStopUpsertCacheMut       sync.RWMutex
	commuteShuttleStopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single commuteShuttleStop record from the query.
func (q commuteShuttleStopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommuteShuttleStop, error) {
	o := &CommuteShuttleStop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for commute_shuttle_stop")
	}

	return o, nil
}

// All returns all CommuteShuttleStop records from the query.
func (q commuteShuttleStopQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommuteShuttleStopSlice, error) {
	var o []*CommuteShuttleStop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommuteShuttleStop slice")
	}

	return o, nil
}

// Count returns the count of all CommuteShuttleStop records in the query.
func (q commuteShuttleStopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count commute_shuttle_stop rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q commuteShuttleStopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if commute_shuttle_stop exists")
	}

	return count > 0, nil
}

// StopNameCommuteShuttleTimetables retrieves all the commute_shuttle_timetable's CommuteShuttleTimetables with an executor via stop_name column.
func (o *CommuteShuttleStop) StopNameCommuteShuttleTimetables(mods ...qm.QueryMod) commuteShuttleTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"commute_shuttle_timetable\".\"stop_name\"=?", o.StopName),
	)

	return CommuteShuttleTimetables(queryMods...)
}

// LoadStopNameCommuteShuttleTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (commuteShuttleStopL) LoadStopNameCommuteShuttleTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommuteShuttleStop interface{}, mods queries.Applicator) error {
	var slice []*CommuteShuttleStop
	var object *CommuteShuttleStop

	if singular {
		var ok bool
		object, ok = maybeCommuteShuttleStop.(*CommuteShuttleStop)
		if !ok {
			object = new(CommuteShuttleStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCommuteShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCommuteShuttleStop))
			}
		}
	} else {
		s, ok := maybeCommuteShuttleStop.(*[]*CommuteShuttleStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCommuteShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCommuteShuttleStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &commuteShuttleStopR{}
		}
		args = append(args, object.StopName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &commuteShuttleStopR{}
			}

			for _, a := range args {
				if a == obj.StopName {
					continue Outer
				}
			}

			args = append(args, obj.StopName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`commute_shuttle_timetable`),
		qm.WhereIn(`commute_shuttle_timetable.stop_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load commute_shuttle_timetable")
	}

	var resultSlice []*CommuteShuttleTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice commute_shuttle_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on commute_shuttle_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for commute_shuttle_timetable")
	}

	if singular {
		object.R.StopNameCommuteShuttleTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commuteShuttleTimetableR{}
			}
			foreign.R.StopNameCommuteShuttleStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopName == foreign.StopName {
				local.R.StopNameCommuteShuttleTimetables = append(local.R.StopNameCommuteShuttleTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &commuteShuttleTimetableR{}
				}
				foreign.R.StopNameCommuteShuttleStop = local
				break
			}
		}
	}

	return nil
}

// AddStopNameCommuteShuttleTimetables adds the given related objects to the existing relationships
// of the commute_shuttle_stop, optionally inserting them as new records.
// Appends related to o.R.StopNameCommuteShuttleTimetables.
// Sets related.R.StopNameCommuteShuttleStop appropriately.
func (o *CommuteShuttleStop) AddStopNameCommuteShuttleTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommuteShuttleTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StopName = o.StopName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"commute_shuttle_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"stop_name"}),
				strmangle.WhereClause("\"", "\"", 2, commuteShuttleTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.StopName, rel.RouteName, rel.StopName}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StopName = o.StopName
		}
	}

	if o.R == nil {
		o.R = &commuteShuttleStopR{
			StopNameCommuteShuttleTimetables: related,
		}
	} else {
		o.R.StopNameCommuteShuttleTimetables = append(o.R.StopNameCommuteShuttleTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commuteShuttleTimetableR{
				StopNameCommuteShuttleStop: o,
			}
		} else {
			rel.R.StopNameCommuteShuttleStop = o
		}
	}
	return nil
}

// CommuteShuttleStops retrieves all the records using an executor.
func CommuteShuttleStops(mods ...qm.QueryMod) commuteShuttleStopQuery {
	mods = append(mods, qm.From("\"commute_shuttle_stop\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"commute_shuttle_stop\".*"})
	}

	return commuteShuttleStopQuery{q}
}

// FindCommuteShuttleStop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommuteShuttleStop(ctx context.Context, exec boil.ContextExecutor, stopName string, selectCols ...string) (*CommuteShuttleStop, error) {
	commuteShuttleStopObj := &CommuteShuttleStop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"commute_shuttle_stop\" where \"stop_name\"=$1", sel,
	)

	q := queries.Raw(query, stopName)

	err := q.Bind(ctx, exec, commuteShuttleStopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from commute_shuttle_stop")
	}

	return commuteShuttleStopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommuteShuttleStop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commute_shuttle_stop provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(commuteShuttleStopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	commuteShuttleStopInsertCacheMut.RLock()
	cache, cached := commuteShuttleStopInsertCache[key]
	commuteShuttleStopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			commuteShuttleStopAllColumns,
			commuteShuttleStopColumnsWithDefault,
			commuteShuttleStopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(commuteShuttleStopType, commuteShuttleStopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commuteShuttleStopType, commuteShuttleStopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"commute_shuttle_stop\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"commute_shuttle_stop\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into commute_shuttle_stop")
	}

	if !cached {
		commuteShuttleStopInsertCacheMut.Lock()
		commuteShuttleStopInsertCache[key] = cache
		commuteShuttleStopInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CommuteShuttleStop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommuteShuttleStop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	commuteShuttleStopUpdateCacheMut.RLock()
	cache, cached := commuteShuttleStopUpdateCache[key]
	commuteShuttleStopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			commuteShuttleStopAllColumns,
			commuteShuttleStopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update commute_shuttle_stop, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"commute_shuttle_stop\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commuteShuttleStopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commuteShuttleStopType, commuteShuttleStopMapping, append(wl, commuteShuttleStopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update commute_shuttle_stop row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for commute_shuttle_stop")
	}

	if !cached {
		commuteShuttleStopUpdateCacheMut.Lock()
		commuteShuttleStopUpdateCache[key] = cache
		commuteShuttleStopUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q commuteShuttleStopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for commute_shuttle_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for commute_shuttle_stop")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommuteShuttleStopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commuteShuttleStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"commute_shuttle_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, commuteShuttleStopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in commuteShuttleStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all commuteShuttleStop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommuteShuttleStop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no commute_shuttle_stop provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(commuteShuttleStopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commuteShuttleStopUpsertCacheMut.RLock()
	cache, cached := commuteShuttleStopUpsertCache[key]
	commuteShuttleStopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			commuteShuttleStopAllColumns,
			commuteShuttleStopColumnsWithDefault,
			commuteShuttleStopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			commuteShuttleStopAllColumns,
			commuteShuttleStopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert commute_shuttle_stop, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commuteShuttleStopPrimaryKeyColumns))
			copy(conflict, commuteShuttleStopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"commute_shuttle_stop\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(commuteShuttleStopType, commuteShuttleStopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commuteShuttleStopType, commuteShuttleStopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert commute_shuttle_stop")
	}

	if !cached {
		commuteShuttleStopUpsertCacheMut.Lock()
		commuteShuttleStopUpsertCache[key] = cache
		commuteShuttleStopUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CommuteShuttleStop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommuteShuttleStop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CommuteShuttleStop provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commuteShuttleStopPrimaryKeyMapping)
	sql := "DELETE FROM \"commute_shuttle_stop\" WHERE \"stop_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from commute_shuttle_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for commute_shuttle_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q commuteShuttleStopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no commuteShuttleStopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from commute_shuttle_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for commute_shuttle_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommuteShuttleStopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commuteShuttleStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"commute_shuttle_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commuteShuttleStopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from commuteShuttleStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for commute_shuttle_stop")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommuteShuttleStop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommuteShuttleStop(ctx, exec, o.StopName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommuteShuttleStopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommuteShuttleStopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commuteShuttleStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"commute_shuttle_stop\".* FROM \"commute_shuttle_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, commuteShuttleStopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommuteShuttleStopSlice")
	}

	*o = slice

	return nil
}

// CommuteShuttleStopExists checks if the CommuteShuttleStop row exists.
func CommuteShuttleStopExists(ctx context.Context, exec boil.ContextExecutor, stopName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"commute_shuttle_stop\" where \"stop_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stopName)
	}
	row := exec.QueryRowContext(ctx, sql, stopName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if commute_shuttle_stop exists")
	}

	return exists, nil
}

// Exists checks if the CommuteShuttleStop row exists.
func (o *CommuteShuttleStop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CommuteShuttleStopExists(ctx, exec, o.StopName)
}
