// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusRoute is an object representing the database table.
type BusRoute struct {
	CompanyID        null.Int  `boil:"company_id" json:"companyID,omitempty" toml:"companyID" yaml:"companyID,omitempty"`
	CompanyName      string    `boil:"company_name" json:"companyName" toml:"companyName" yaml:"companyName"`
	CompanyTelephone string    `boil:"company_telephone" json:"companyTelephone" toml:"companyTelephone" yaml:"companyTelephone"`
	DistrictCode     int       `boil:"district_code" json:"districtCode" toml:"districtCode" yaml:"districtCode"`
	UpFirstTime      time.Time `boil:"up_first_time" json:"upFirstTime" toml:"upFirstTime" yaml:"upFirstTime"`
	UpLastTime       time.Time `boil:"up_last_time" json:"upLastTime" toml:"upLastTime" yaml:"upLastTime"`
	DownFirstTime    time.Time `boil:"down_first_time" json:"downFirstTime" toml:"downFirstTime" yaml:"downFirstTime"`
	DownLastTime     time.Time `boil:"down_last_time" json:"downLastTime" toml:"downLastTime" yaml:"downLastTime"`
	StartStopID      int       `boil:"start_stop_id" json:"startStopID" toml:"startStopID" yaml:"startStopID"`
	EndStopID        int       `boil:"end_stop_id" json:"endStopID" toml:"endStopID" yaml:"endStopID"`
	RouteID          int       `boil:"route_id" json:"routeID" toml:"routeID" yaml:"routeID"`
	RouteName        string    `boil:"route_name" json:"routeName" toml:"routeName" yaml:"routeName"`
	RouteTypeCode    string    `boil:"route_type_code" json:"routeTypeCode" toml:"routeTypeCode" yaml:"routeTypeCode"`
	RouteTypeName    string    `boil:"route_type_name" json:"routeTypeName" toml:"routeTypeName" yaml:"routeTypeName"`

	R *busRouteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L busRouteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusRouteColumns = struct {
	CompanyID        string
	CompanyName      string
	CompanyTelephone string
	DistrictCode     string
	UpFirstTime      string
	UpLastTime       string
	DownFirstTime    string
	DownLastTime     string
	StartStopID      string
	EndStopID        string
	RouteID          string
	RouteName        string
	RouteTypeCode    string
	RouteTypeName    string
}{
	CompanyID:        "company_id",
	CompanyName:      "company_name",
	CompanyTelephone: "company_telephone",
	DistrictCode:     "district_code",
	UpFirstTime:      "up_first_time",
	UpLastTime:       "up_last_time",
	DownFirstTime:    "down_first_time",
	DownLastTime:     "down_last_time",
	StartStopID:      "start_stop_id",
	EndStopID:        "end_stop_id",
	RouteID:          "route_id",
	RouteName:        "route_name",
	RouteTypeCode:    "route_type_code",
	RouteTypeName:    "route_type_name",
}

var BusRouteTableColumns = struct {
	CompanyID        string
	CompanyName      string
	CompanyTelephone string
	DistrictCode     string
	UpFirstTime      string
	UpLastTime       string
	DownFirstTime    string
	DownLastTime     string
	StartStopID      string
	EndStopID        string
	RouteID          string
	RouteName        string
	RouteTypeCode    string
	RouteTypeName    string
}{
	CompanyID:        "bus_route.company_id",
	CompanyName:      "bus_route.company_name",
	CompanyTelephone: "bus_route.company_telephone",
	DistrictCode:     "bus_route.district_code",
	UpFirstTime:      "bus_route.up_first_time",
	UpLastTime:       "bus_route.up_last_time",
	DownFirstTime:    "bus_route.down_first_time",
	DownLastTime:     "bus_route.down_last_time",
	StartStopID:      "bus_route.start_stop_id",
	EndStopID:        "bus_route.end_stop_id",
	RouteID:          "bus_route.route_id",
	RouteName:        "bus_route.route_name",
	RouteTypeCode:    "bus_route.route_type_code",
	RouteTypeName:    "bus_route.route_type_name",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BusRouteWhere = struct {
	CompanyID        whereHelpernull_Int
	CompanyName      whereHelperstring
	CompanyTelephone whereHelperstring
	DistrictCode     whereHelperint
	UpFirstTime      whereHelpertime_Time
	UpLastTime       whereHelpertime_Time
	DownFirstTime    whereHelpertime_Time
	DownLastTime     whereHelpertime_Time
	StartStopID      whereHelperint
	EndStopID        whereHelperint
	RouteID          whereHelperint
	RouteName        whereHelperstring
	RouteTypeCode    whereHelperstring
	RouteTypeName    whereHelperstring
}{
	CompanyID:        whereHelpernull_Int{field: "\"bus_route\".\"company_id\""},
	CompanyName:      whereHelperstring{field: "\"bus_route\".\"company_name\""},
	CompanyTelephone: whereHelperstring{field: "\"bus_route\".\"company_telephone\""},
	DistrictCode:     whereHelperint{field: "\"bus_route\".\"district_code\""},
	UpFirstTime:      whereHelpertime_Time{field: "\"bus_route\".\"up_first_time\""},
	UpLastTime:       whereHelpertime_Time{field: "\"bus_route\".\"up_last_time\""},
	DownFirstTime:    whereHelpertime_Time{field: "\"bus_route\".\"down_first_time\""},
	DownLastTime:     whereHelpertime_Time{field: "\"bus_route\".\"down_last_time\""},
	StartStopID:      whereHelperint{field: "\"bus_route\".\"start_stop_id\""},
	EndStopID:        whereHelperint{field: "\"bus_route\".\"end_stop_id\""},
	RouteID:          whereHelperint{field: "\"bus_route\".\"route_id\""},
	RouteName:        whereHelperstring{field: "\"bus_route\".\"route_name\""},
	RouteTypeCode:    whereHelperstring{field: "\"bus_route\".\"route_type_code\""},
	RouteTypeName:    whereHelperstring{field: "\"bus_route\".\"route_type_name\""},
}

// BusRouteRels is where relationship names are stored.
var BusRouteRels = struct {
	EndStop            string
	StartStop          string
	RouteBusRouteStops string
	RouteBusTimetables string
}{
	EndStop:            "EndStop",
	StartStop:          "StartStop",
	RouteBusRouteStops: "RouteBusRouteStops",
	RouteBusTimetables: "RouteBusTimetables",
}

// busRouteR is where relationships are stored.
type busRouteR struct {
	EndStop            *BusStop          `boil:"EndStop" json:"EndStop" toml:"EndStop" yaml:"EndStop"`
	StartStop          *BusStop          `boil:"StartStop" json:"StartStop" toml:"StartStop" yaml:"StartStop"`
	RouteBusRouteStops BusRouteStopSlice `boil:"RouteBusRouteStops" json:"RouteBusRouteStops" toml:"RouteBusRouteStops" yaml:"RouteBusRouteStops"`
	RouteBusTimetables BusTimetableSlice `boil:"RouteBusTimetables" json:"RouteBusTimetables" toml:"RouteBusTimetables" yaml:"RouteBusTimetables"`
}

// NewStruct creates a new relationship struct
func (*busRouteR) NewStruct() *busRouteR {
	return &busRouteR{}
}

func (r *busRouteR) GetEndStop() *BusStop {
	if r == nil {
		return nil
	}
	return r.EndStop
}

func (r *busRouteR) GetStartStop() *BusStop {
	if r == nil {
		return nil
	}
	return r.StartStop
}

func (r *busRouteR) GetRouteBusRouteStops() BusRouteStopSlice {
	if r == nil {
		return nil
	}
	return r.RouteBusRouteStops
}

func (r *busRouteR) GetRouteBusTimetables() BusTimetableSlice {
	if r == nil {
		return nil
	}
	return r.RouteBusTimetables
}

// busRouteL is where Load methods for each relationship are stored.
type busRouteL struct{}

var (
	busRouteAllColumns            = []string{"company_id", "company_name", "company_telephone", "district_code", "up_first_time", "up_last_time", "down_first_time", "down_last_time", "start_stop_id", "end_stop_id", "route_id", "route_name", "route_type_code", "route_type_name"}
	busRouteColumnsWithoutDefault = []string{"company_name", "company_telephone", "district_code", "up_first_time", "up_last_time", "down_first_time", "down_last_time", "start_stop_id", "end_stop_id", "route_id", "route_name", "route_type_code", "route_type_name"}
	busRouteColumnsWithDefault    = []string{"company_id"}
	busRoutePrimaryKeyColumns     = []string{"route_id"}
	busRouteGeneratedColumns      = []string{}
)

type (
	// BusRouteSlice is an alias for a slice of pointers to BusRoute.
	// This should almost always be used instead of []BusRoute.
	BusRouteSlice []*BusRoute

	busRouteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	busRouteType                 = reflect.TypeOf(&BusRoute{})
	busRouteMapping              = queries.MakeStructMapping(busRouteType)
	busRoutePrimaryKeyMapping, _ = queries.BindMapping(busRouteType, busRouteMapping, busRoutePrimaryKeyColumns)
	busRouteInsertCacheMut       sync.RWMutex
	busRouteInsertCache          = make(map[string]insertCache)
	busRouteUpdateCacheMut       sync.RWMutex
	busRouteUpdateCache          = make(map[string]updateCache)
	busRouteUpsertCacheMut       sync.RWMutex
	busRouteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single busRoute record from the query.
func (q busRouteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusRoute, error) {
	o := &BusRoute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bus_route")
	}

	return o, nil
}

// All returns all BusRoute records from the query.
func (q busRouteQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusRouteSlice, error) {
	var o []*BusRoute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BusRoute slice")
	}

	return o, nil
}

// Count returns the count of all BusRoute records in the query.
func (q busRouteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bus_route rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q busRouteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bus_route exists")
	}

	return count > 0, nil
}

// EndStop pointed to by the foreign key.
func (o *BusRoute) EndStop(mods ...qm.QueryMod) busStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_id\" = ?", o.EndStopID),
	}

	queryMods = append(queryMods, mods...)

	return BusStops(queryMods...)
}

// StartStop pointed to by the foreign key.
func (o *BusRoute) StartStop(mods ...qm.QueryMod) busStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_id\" = ?", o.StartStopID),
	}

	queryMods = append(queryMods, mods...)

	return BusStops(queryMods...)
}

// RouteBusRouteStops retrieves all the bus_route_stop's BusRouteStops with an executor via route_id column.
func (o *BusRoute) RouteBusRouteStops(mods ...qm.QueryMod) busRouteStopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_route_stop\".\"route_id\"=?", o.RouteID),
	)

	return BusRouteStops(queryMods...)
}

// RouteBusTimetables retrieves all the bus_timetable's BusTimetables with an executor via route_id column.
func (o *BusRoute) RouteBusTimetables(mods ...qm.QueryMod) busTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_timetable\".\"route_id\"=?", o.RouteID),
	)

	return BusTimetables(queryMods...)
}

// LoadEndStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (busRouteL) LoadEndStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRoute interface{}, mods queries.Applicator) error {
	var slice []*BusRoute
	var object *BusRoute

	if singular {
		var ok bool
		object, ok = maybeBusRoute.(*BusRoute)
		if !ok {
			object = new(BusRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRoute))
			}
		}
	} else {
		s, ok := maybeBusRoute.(*[]*BusRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteR{}
		}
		args = append(args, object.EndStopID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteR{}
			}

			for _, a := range args {
				if a == obj.EndStopID {
					continue Outer
				}
			}

			args = append(args, obj.EndStopID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_stop`),
		qm.WhereIn(`bus_stop.stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusStop")
	}

	var resultSlice []*BusStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bus_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_stop")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EndStop = foreign
		if foreign.R == nil {
			foreign.R = &busStopR{}
		}
		foreign.R.EndStopBusRoutes = append(foreign.R.EndStopBusRoutes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EndStopID == foreign.StopID {
				local.R.EndStop = foreign
				if foreign.R == nil {
					foreign.R = &busStopR{}
				}
				foreign.R.EndStopBusRoutes = append(foreign.R.EndStopBusRoutes, local)
				break
			}
		}
	}

	return nil
}

// LoadStartStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (busRouteL) LoadStartStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRoute interface{}, mods queries.Applicator) error {
	var slice []*BusRoute
	var object *BusRoute

	if singular {
		var ok bool
		object, ok = maybeBusRoute.(*BusRoute)
		if !ok {
			object = new(BusRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRoute))
			}
		}
	} else {
		s, ok := maybeBusRoute.(*[]*BusRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteR{}
		}
		args = append(args, object.StartStopID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteR{}
			}

			for _, a := range args {
				if a == obj.StartStopID {
					continue Outer
				}
			}

			args = append(args, obj.StartStopID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_stop`),
		qm.WhereIn(`bus_stop.stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusStop")
	}

	var resultSlice []*BusStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bus_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_stop")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StartStop = foreign
		if foreign.R == nil {
			foreign.R = &busStopR{}
		}
		foreign.R.StartStopBusRoutes = append(foreign.R.StartStopBusRoutes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StartStopID == foreign.StopID {
				local.R.StartStop = foreign
				if foreign.R == nil {
					foreign.R = &busStopR{}
				}
				foreign.R.StartStopBusRoutes = append(foreign.R.StartStopBusRoutes, local)
				break
			}
		}
	}

	return nil
}

// LoadRouteBusRouteStops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busRouteL) LoadRouteBusRouteStops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRoute interface{}, mods queries.Applicator) error {
	var slice []*BusRoute
	var object *BusRoute

	if singular {
		var ok bool
		object, ok = maybeBusRoute.(*BusRoute)
		if !ok {
			object = new(BusRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRoute))
			}
		}
	} else {
		s, ok := maybeBusRoute.(*[]*BusRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteR{}
		}
		args = append(args, object.RouteID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteR{}
			}

			for _, a := range args {
				if a == obj.RouteID {
					continue Outer
				}
			}

			args = append(args, obj.RouteID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_route_stop`),
		qm.WhereIn(`bus_route_stop.route_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_route_stop")
	}

	var resultSlice []*BusRouteStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_route_stop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_route_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_route_stop")
	}

	if singular {
		object.R.RouteBusRouteStops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busRouteStopR{}
			}
			foreign.R.Route = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RouteID == foreign.RouteID {
				local.R.RouteBusRouteStops = append(local.R.RouteBusRouteStops, foreign)
				if foreign.R == nil {
					foreign.R = &busRouteStopR{}
				}
				foreign.R.Route = local
				break
			}
		}
	}

	return nil
}

// LoadRouteBusTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busRouteL) LoadRouteBusTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRoute interface{}, mods queries.Applicator) error {
	var slice []*BusRoute
	var object *BusRoute

	if singular {
		var ok bool
		object, ok = maybeBusRoute.(*BusRoute)
		if !ok {
			object = new(BusRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRoute))
			}
		}
	} else {
		s, ok := maybeBusRoute.(*[]*BusRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteR{}
		}
		args = append(args, object.RouteID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteR{}
			}

			for _, a := range args {
				if a == obj.RouteID {
					continue Outer
				}
			}

			args = append(args, obj.RouteID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_timetable`),
		qm.WhereIn(`bus_timetable.route_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_timetable")
	}

	var resultSlice []*BusTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_timetable")
	}

	if singular {
		object.R.RouteBusTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busTimetableR{}
			}
			foreign.R.Route = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RouteID == foreign.RouteID {
				local.R.RouteBusTimetables = append(local.R.RouteBusTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &busTimetableR{}
				}
				foreign.R.Route = local
				break
			}
		}
	}

	return nil
}

// SetEndStop of the busRoute to the related item.
// Sets o.R.EndStop to related.
// Adds o to related.R.EndStopBusRoutes.
func (o *BusRoute) SetEndStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bus_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"end_stop_id"}),
		strmangle.WhereClause("\"", "\"", 2, busRoutePrimaryKeyColumns),
	)
	values := []interface{}{related.StopID, o.RouteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EndStopID = related.StopID
	if o.R == nil {
		o.R = &busRouteR{
			EndStop: related,
		}
	} else {
		o.R.EndStop = related
	}

	if related.R == nil {
		related.R = &busStopR{
			EndStopBusRoutes: BusRouteSlice{o},
		}
	} else {
		related.R.EndStopBusRoutes = append(related.R.EndStopBusRoutes, o)
	}

	return nil
}

// SetStartStop of the busRoute to the related item.
// Sets o.R.StartStop to related.
// Adds o to related.R.StartStopBusRoutes.
func (o *BusRoute) SetStartStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bus_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop_id"}),
		strmangle.WhereClause("\"", "\"", 2, busRoutePrimaryKeyColumns),
	)
	values := []interface{}{related.StopID, o.RouteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StartStopID = related.StopID
	if o.R == nil {
		o.R = &busRouteR{
			StartStop: related,
		}
	} else {
		o.R.StartStop = related
	}

	if related.R == nil {
		related.R = &busStopR{
			StartStopBusRoutes: BusRouteSlice{o},
		}
	} else {
		related.R.StartStopBusRoutes = append(related.R.StartStopBusRoutes, o)
	}

	return nil
}

// AddRouteBusRouteStops adds the given related objects to the existing relationships
// of the bus_route, optionally inserting them as new records.
// Appends related to o.R.RouteBusRouteStops.
// Sets related.R.Route appropriately.
func (o *BusRoute) AddRouteBusRouteStops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusRouteStop) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RouteID = o.RouteID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_route_stop\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"route_id"}),
				strmangle.WhereClause("\"", "\"", 2, busRouteStopPrimaryKeyColumns),
			)
			values := []interface{}{o.RouteID, rel.RouteID, rel.StopID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RouteID = o.RouteID
		}
	}

	if o.R == nil {
		o.R = &busRouteR{
			RouteBusRouteStops: related,
		}
	} else {
		o.R.RouteBusRouteStops = append(o.R.RouteBusRouteStops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busRouteStopR{
				Route: o,
			}
		} else {
			rel.R.Route = o
		}
	}
	return nil
}

// AddRouteBusTimetables adds the given related objects to the existing relationships
// of the bus_route, optionally inserting them as new records.
// Appends related to o.R.RouteBusTimetables.
// Sets related.R.Route appropriately.
func (o *BusRoute) AddRouteBusTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RouteID = o.RouteID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"route_id"}),
				strmangle.WhereClause("\"", "\"", 2, busTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.RouteID, rel.RouteID, rel.StartStopID, rel.DepartureTime, rel.Weekday}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RouteID = o.RouteID
		}
	}

	if o.R == nil {
		o.R = &busRouteR{
			RouteBusTimetables: related,
		}
	} else {
		o.R.RouteBusTimetables = append(o.R.RouteBusTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busTimetableR{
				Route: o,
			}
		} else {
			rel.R.Route = o
		}
	}
	return nil
}

// BusRoutes retrieves all the records using an executor.
func BusRoutes(mods ...qm.QueryMod) busRouteQuery {
	mods = append(mods, qm.From("\"bus_route\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bus_route\".*"})
	}

	return busRouteQuery{q}
}

// FindBusRoute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusRoute(ctx context.Context, exec boil.ContextExecutor, routeID int, selectCols ...string) (*BusRoute, error) {
	busRouteObj := &BusRoute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bus_route\" where \"route_id\"=$1", sel,
	)

	q := queries.Raw(query, routeID)

	err := q.Bind(ctx, exec, busRouteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bus_route")
	}

	return busRouteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusRoute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_route provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(busRouteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	busRouteInsertCacheMut.RLock()
	cache, cached := busRouteInsertCache[key]
	busRouteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			busRouteAllColumns,
			busRouteColumnsWithDefault,
			busRouteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(busRouteType, busRouteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(busRouteType, busRouteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bus_route\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bus_route\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bus_route")
	}

	if !cached {
		busRouteInsertCacheMut.Lock()
		busRouteInsertCache[key] = cache
		busRouteInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BusRoute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusRoute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	busRouteUpdateCacheMut.RLock()
	cache, cached := busRouteUpdateCache[key]
	busRouteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			busRouteAllColumns,
			busRoutePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bus_route, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bus_route\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, busRoutePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(busRouteType, busRouteMapping, append(wl, busRoutePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bus_route row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bus_route")
	}

	if !cached {
		busRouteUpdateCacheMut.Lock()
		busRouteUpdateCache[key] = cache
		busRouteUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q busRouteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bus_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bus_route")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusRouteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bus_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, busRoutePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in busRoute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all busRoute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusRoute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_route provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(busRouteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	busRouteUpsertCacheMut.RLock()
	cache, cached := busRouteUpsertCache[key]
	busRouteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			busRouteAllColumns,
			busRouteColumnsWithDefault,
			busRouteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			busRouteAllColumns,
			busRoutePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bus_route, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(busRoutePrimaryKeyColumns))
			copy(conflict, busRoutePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bus_route\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(busRouteType, busRouteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(busRouteType, busRouteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bus_route")
	}

	if !cached {
		busRouteUpsertCacheMut.Lock()
		busRouteUpsertCache[key] = cache
		busRouteUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BusRoute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusRoute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusRoute provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), busRoutePrimaryKeyMapping)
	sql := "DELETE FROM \"bus_route\" WHERE \"route_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bus_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bus_route")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q busRouteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no busRouteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bus_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_route")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusRouteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bus_route\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busRoutePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from busRoute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_route")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusRoute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusRoute(ctx, exec, o.RouteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusRouteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusRouteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bus_route\".* FROM \"bus_route\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busRoutePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusRouteSlice")
	}

	*o = slice

	return nil
}

// BusRouteExists checks if the BusRoute row exists.
func BusRouteExists(ctx context.Context, exec boil.ContextExecutor, routeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bus_route\" where \"route_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, routeID)
	}
	row := exec.QueryRowContext(ctx, sql, routeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bus_route exists")
	}

	return exists, nil
}

// Exists checks if the BusRoute row exists.
func (o *BusRoute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BusRouteExists(ctx, exec, o.RouteID)
}
