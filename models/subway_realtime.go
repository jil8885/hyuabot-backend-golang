// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubwayRealtime is an object representing the database table.
type SubwayRealtime struct {
	StationID          string    `boil:"station_id" json:"stationID" toml:"stationID" yaml:"stationID"`
	ArrivalSequence    int       `boil:"arrival_sequence" json:"arrivalSequence" toml:"arrivalSequence" yaml:"arrivalSequence"`
	CurrentStationName string    `boil:"current_station_name" json:"currentStationName" toml:"currentStationName" yaml:"currentStationName"`
	RemainingStopCount int       `boil:"remaining_stop_count" json:"remainingStopCount" toml:"remainingStopCount" yaml:"remainingStopCount"`
	RemainingTime      string    `boil:"remaining_time" json:"remainingTime" toml:"remainingTime" yaml:"remainingTime"`
	UpDownType         string    `boil:"up_down_type" json:"upDownType" toml:"upDownType" yaml:"upDownType"`
	TerminalStationID  string    `boil:"terminal_station_id" json:"terminalStationID" toml:"terminalStationID" yaml:"terminalStationID"`
	TrainNumber        string    `boil:"train_number" json:"trainNumber" toml:"trainNumber" yaml:"trainNumber"`
	LastUpdatedTime    time.Time `boil:"last_updated_time" json:"lastUpdatedTime" toml:"lastUpdatedTime" yaml:"lastUpdatedTime"`
	IsExpressTrain     bool      `boil:"is_express_train" json:"isExpressTrain" toml:"isExpressTrain" yaml:"isExpressTrain"`
	IsLastTrain        bool      `boil:"is_last_train" json:"isLastTrain" toml:"isLastTrain" yaml:"isLastTrain"`
	StatusCode         int       `boil:"status_code" json:"statusCode" toml:"statusCode" yaml:"statusCode"`

	R *subwayRealtimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subwayRealtimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubwayRealtimeColumns = struct {
	StationID          string
	ArrivalSequence    string
	CurrentStationName string
	RemainingStopCount string
	RemainingTime      string
	UpDownType         string
	TerminalStationID  string
	TrainNumber        string
	LastUpdatedTime    string
	IsExpressTrain     string
	IsLastTrain        string
	StatusCode         string
}{
	StationID:          "station_id",
	ArrivalSequence:    "arrival_sequence",
	CurrentStationName: "current_station_name",
	RemainingStopCount: "remaining_stop_count",
	RemainingTime:      "remaining_time",
	UpDownType:         "up_down_type",
	TerminalStationID:  "terminal_station_id",
	TrainNumber:        "train_number",
	LastUpdatedTime:    "last_updated_time",
	IsExpressTrain:     "is_express_train",
	IsLastTrain:        "is_last_train",
	StatusCode:         "status_code",
}

var SubwayRealtimeTableColumns = struct {
	StationID          string
	ArrivalSequence    string
	CurrentStationName string
	RemainingStopCount string
	RemainingTime      string
	UpDownType         string
	TerminalStationID  string
	TrainNumber        string
	LastUpdatedTime    string
	IsExpressTrain     string
	IsLastTrain        string
	StatusCode         string
}{
	StationID:          "subway_realtime.station_id",
	ArrivalSequence:    "subway_realtime.arrival_sequence",
	CurrentStationName: "subway_realtime.current_station_name",
	RemainingStopCount: "subway_realtime.remaining_stop_count",
	RemainingTime:      "subway_realtime.remaining_time",
	UpDownType:         "subway_realtime.up_down_type",
	TerminalStationID:  "subway_realtime.terminal_station_id",
	TrainNumber:        "subway_realtime.train_number",
	LastUpdatedTime:    "subway_realtime.last_updated_time",
	IsExpressTrain:     "subway_realtime.is_express_train",
	IsLastTrain:        "subway_realtime.is_last_train",
	StatusCode:         "subway_realtime.status_code",
}

// Generated where

var SubwayRealtimeWhere = struct {
	StationID          whereHelperstring
	ArrivalSequence    whereHelperint
	CurrentStationName whereHelperstring
	RemainingStopCount whereHelperint
	RemainingTime      whereHelperstring
	UpDownType         whereHelperstring
	TerminalStationID  whereHelperstring
	TrainNumber        whereHelperstring
	LastUpdatedTime    whereHelpertime_Time
	IsExpressTrain     whereHelperbool
	IsLastTrain        whereHelperbool
	StatusCode         whereHelperint
}{
	StationID:          whereHelperstring{field: "\"subway_realtime\".\"station_id\""},
	ArrivalSequence:    whereHelperint{field: "\"subway_realtime\".\"arrival_sequence\""},
	CurrentStationName: whereHelperstring{field: "\"subway_realtime\".\"current_station_name\""},
	RemainingStopCount: whereHelperint{field: "\"subway_realtime\".\"remaining_stop_count\""},
	RemainingTime:      whereHelperstring{field: "\"subway_realtime\".\"remaining_time\""},
	UpDownType:         whereHelperstring{field: "\"subway_realtime\".\"up_down_type\""},
	TerminalStationID:  whereHelperstring{field: "\"subway_realtime\".\"terminal_station_id\""},
	TrainNumber:        whereHelperstring{field: "\"subway_realtime\".\"train_number\""},
	LastUpdatedTime:    whereHelpertime_Time{field: "\"subway_realtime\".\"last_updated_time\""},
	IsExpressTrain:     whereHelperbool{field: "\"subway_realtime\".\"is_express_train\""},
	IsLastTrain:        whereHelperbool{field: "\"subway_realtime\".\"is_last_train\""},
	StatusCode:         whereHelperint{field: "\"subway_realtime\".\"status_code\""},
}

// SubwayRealtimeRels is where relationship names are stored.
var SubwayRealtimeRels = struct {
	Station         string
	TerminalStation string
}{
	Station:         "Station",
	TerminalStation: "TerminalStation",
}

// subwayRealtimeR is where relationships are stored.
type subwayRealtimeR struct {
	Station         *SubwayRouteStation `boil:"Station" json:"Station" toml:"Station" yaml:"Station"`
	TerminalStation *SubwayRouteStation `boil:"TerminalStation" json:"TerminalStation" toml:"TerminalStation" yaml:"TerminalStation"`
}

// NewStruct creates a new relationship struct
func (*subwayRealtimeR) NewStruct() *subwayRealtimeR {
	return &subwayRealtimeR{}
}

func (r *subwayRealtimeR) GetStation() *SubwayRouteStation {
	if r == nil {
		return nil
	}
	return r.Station
}

func (r *subwayRealtimeR) GetTerminalStation() *SubwayRouteStation {
	if r == nil {
		return nil
	}
	return r.TerminalStation
}

// subwayRealtimeL is where Load methods for each relationship are stored.
type subwayRealtimeL struct{}

var (
	subwayRealtimeAllColumns            = []string{"station_id", "arrival_sequence", "current_station_name", "remaining_stop_count", "remaining_time", "up_down_type", "terminal_station_id", "train_number", "last_updated_time", "is_express_train", "is_last_train", "status_code"}
	subwayRealtimeColumnsWithoutDefault = []string{"station_id", "arrival_sequence", "current_station_name", "remaining_stop_count", "remaining_time", "up_down_type", "terminal_station_id", "train_number", "last_updated_time", "is_express_train", "is_last_train", "status_code"}
	subwayRealtimeColumnsWithDefault    = []string{}
	subwayRealtimePrimaryKeyColumns     = []string{"station_id", "up_down_type", "arrival_sequence"}
	subwayRealtimeGeneratedColumns      = []string{}
)

type (
	// SubwayRealtimeSlice is an alias for a slice of pointers to SubwayRealtime.
	// This should almost always be used instead of []SubwayRealtime.
	SubwayRealtimeSlice []*SubwayRealtime

	subwayRealtimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subwayRealtimeType                 = reflect.TypeOf(&SubwayRealtime{})
	subwayRealtimeMapping              = queries.MakeStructMapping(subwayRealtimeType)
	subwayRealtimePrimaryKeyMapping, _ = queries.BindMapping(subwayRealtimeType, subwayRealtimeMapping, subwayRealtimePrimaryKeyColumns)
	subwayRealtimeInsertCacheMut       sync.RWMutex
	subwayRealtimeInsertCache          = make(map[string]insertCache)
	subwayRealtimeUpdateCacheMut       sync.RWMutex
	subwayRealtimeUpdateCache          = make(map[string]updateCache)
	subwayRealtimeUpsertCacheMut       sync.RWMutex
	subwayRealtimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single subwayRealtime record from the query.
func (q subwayRealtimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubwayRealtime, error) {
	o := &SubwayRealtime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subway_realtime")
	}

	return o, nil
}

// All returns all SubwayRealtime records from the query.
func (q subwayRealtimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubwayRealtimeSlice, error) {
	var o []*SubwayRealtime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubwayRealtime slice")
	}

	return o, nil
}

// Count returns the count of all SubwayRealtime records in the query.
func (q subwayRealtimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subway_realtime rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subwayRealtimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subway_realtime exists")
	}

	return count > 0, nil
}

// Station pointed to by the foreign key.
func (o *SubwayRealtime) Station(mods ...qm.QueryMod) subwayRouteStationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"station_id\" = ?", o.StationID),
	}

	queryMods = append(queryMods, mods...)

	return SubwayRouteStations(queryMods...)
}

// TerminalStation pointed to by the foreign key.
func (o *SubwayRealtime) TerminalStation(mods ...qm.QueryMod) subwayRouteStationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"station_id\" = ?", o.TerminalStationID),
	}

	queryMods = append(queryMods, mods...)

	return SubwayRouteStations(queryMods...)
}

// LoadStation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayRealtimeL) LoadStation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRealtime interface{}, mods queries.Applicator) error {
	var slice []*SubwayRealtime
	var object *SubwayRealtime

	if singular {
		var ok bool
		object, ok = maybeSubwayRealtime.(*SubwayRealtime)
		if !ok {
			object = new(SubwayRealtime)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRealtime)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRealtime))
			}
		}
	} else {
		s, ok := maybeSubwayRealtime.(*[]*SubwayRealtime)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRealtime)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRealtime))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRealtimeR{}
		}
		args = append(args, object.StationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRealtimeR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route_station`),
		qm.WhereIn(`subway_route_station.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayRouteStation")
	}

	var resultSlice []*SubwayRouteStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayRouteStation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_route_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route_station")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Station = foreign
		if foreign.R == nil {
			foreign.R = &subwayRouteStationR{}
		}
		foreign.R.StationSubwayRealtimes = append(foreign.R.StationSubwayRealtimes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StationID == foreign.StationID {
				local.R.Station = foreign
				if foreign.R == nil {
					foreign.R = &subwayRouteStationR{}
				}
				foreign.R.StationSubwayRealtimes = append(foreign.R.StationSubwayRealtimes, local)
				break
			}
		}
	}

	return nil
}

// LoadTerminalStation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayRealtimeL) LoadTerminalStation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayRealtime interface{}, mods queries.Applicator) error {
	var slice []*SubwayRealtime
	var object *SubwayRealtime

	if singular {
		var ok bool
		object, ok = maybeSubwayRealtime.(*SubwayRealtime)
		if !ok {
			object = new(SubwayRealtime)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayRealtime)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayRealtime))
			}
		}
	} else {
		s, ok := maybeSubwayRealtime.(*[]*SubwayRealtime)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayRealtime)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayRealtime))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayRealtimeR{}
		}
		args = append(args, object.TerminalStationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayRealtimeR{}
			}

			for _, a := range args {
				if a == obj.TerminalStationID {
					continue Outer
				}
			}

			args = append(args, obj.TerminalStationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route_station`),
		qm.WhereIn(`subway_route_station.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayRouteStation")
	}

	var resultSlice []*SubwayRouteStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayRouteStation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_route_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route_station")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TerminalStation = foreign
		if foreign.R == nil {
			foreign.R = &subwayRouteStationR{}
		}
		foreign.R.TerminalStationSubwayRealtimes = append(foreign.R.TerminalStationSubwayRealtimes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TerminalStationID == foreign.StationID {
				local.R.TerminalStation = foreign
				if foreign.R == nil {
					foreign.R = &subwayRouteStationR{}
				}
				foreign.R.TerminalStationSubwayRealtimes = append(foreign.R.TerminalStationSubwayRealtimes, local)
				break
			}
		}
	}

	return nil
}

// SetStation of the subwayRealtime to the related item.
// Sets o.R.Station to related.
// Adds o to related.R.StationSubwayRealtimes.
func (o *SubwayRealtime) SetStation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayRouteStation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_realtime\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"station_id"}),
		strmangle.WhereClause("\"", "\"", 2, subwayRealtimePrimaryKeyColumns),
	)
	values := []interface{}{related.StationID, o.StationID, o.UpDownType, o.ArrivalSequence}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StationID = related.StationID
	if o.R == nil {
		o.R = &subwayRealtimeR{
			Station: related,
		}
	} else {
		o.R.Station = related
	}

	if related.R == nil {
		related.R = &subwayRouteStationR{
			StationSubwayRealtimes: SubwayRealtimeSlice{o},
		}
	} else {
		related.R.StationSubwayRealtimes = append(related.R.StationSubwayRealtimes, o)
	}

	return nil
}

// SetTerminalStation of the subwayRealtime to the related item.
// Sets o.R.TerminalStation to related.
// Adds o to related.R.TerminalStationSubwayRealtimes.
func (o *SubwayRealtime) SetTerminalStation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayRouteStation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_realtime\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"terminal_station_id"}),
		strmangle.WhereClause("\"", "\"", 2, subwayRealtimePrimaryKeyColumns),
	)
	values := []interface{}{related.StationID, o.StationID, o.UpDownType, o.ArrivalSequence}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TerminalStationID = related.StationID
	if o.R == nil {
		o.R = &subwayRealtimeR{
			TerminalStation: related,
		}
	} else {
		o.R.TerminalStation = related
	}

	if related.R == nil {
		related.R = &subwayRouteStationR{
			TerminalStationSubwayRealtimes: SubwayRealtimeSlice{o},
		}
	} else {
		related.R.TerminalStationSubwayRealtimes = append(related.R.TerminalStationSubwayRealtimes, o)
	}

	return nil
}

// SubwayRealtimes retrieves all the records using an executor.
func SubwayRealtimes(mods ...qm.QueryMod) subwayRealtimeQuery {
	mods = append(mods, qm.From("\"subway_realtime\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subway_realtime\".*"})
	}

	return subwayRealtimeQuery{q}
}

// FindSubwayRealtime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubwayRealtime(ctx context.Context, exec boil.ContextExecutor, stationID string, upDownType string, arrivalSequence int, selectCols ...string) (*SubwayRealtime, error) {
	subwayRealtimeObj := &SubwayRealtime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subway_realtime\" where \"station_id\"=$1 AND \"up_down_type\"=$2 AND \"arrival_sequence\"=$3", sel,
	)

	q := queries.Raw(query, stationID, upDownType, arrivalSequence)

	err := q.Bind(ctx, exec, subwayRealtimeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subway_realtime")
	}

	return subwayRealtimeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubwayRealtime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_realtime provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(subwayRealtimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subwayRealtimeInsertCacheMut.RLock()
	cache, cached := subwayRealtimeInsertCache[key]
	subwayRealtimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subwayRealtimeAllColumns,
			subwayRealtimeColumnsWithDefault,
			subwayRealtimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subwayRealtimeType, subwayRealtimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subwayRealtimeType, subwayRealtimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subway_realtime\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subway_realtime\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subway_realtime")
	}

	if !cached {
		subwayRealtimeInsertCacheMut.Lock()
		subwayRealtimeInsertCache[key] = cache
		subwayRealtimeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SubwayRealtime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubwayRealtime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	subwayRealtimeUpdateCacheMut.RLock()
	cache, cached := subwayRealtimeUpdateCache[key]
	subwayRealtimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subwayRealtimeAllColumns,
			subwayRealtimePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subway_realtime, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subway_realtime\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subwayRealtimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subwayRealtimeType, subwayRealtimeMapping, append(wl, subwayRealtimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subway_realtime row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subway_realtime")
	}

	if !cached {
		subwayRealtimeUpdateCacheMut.Lock()
		subwayRealtimeUpdateCache[key] = cache
		subwayRealtimeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q subwayRealtimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subway_realtime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subway_realtime")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubwayRealtimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayRealtimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subway_realtime\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subwayRealtimePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subwayRealtime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subwayRealtime")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubwayRealtime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_realtime provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(subwayRealtimeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subwayRealtimeUpsertCacheMut.RLock()
	cache, cached := subwayRealtimeUpsertCache[key]
	subwayRealtimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subwayRealtimeAllColumns,
			subwayRealtimeColumnsWithDefault,
			subwayRealtimeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subwayRealtimeAllColumns,
			subwayRealtimePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert subway_realtime, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subwayRealtimePrimaryKeyColumns))
			copy(conflict, subwayRealtimePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subway_realtime\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subwayRealtimeType, subwayRealtimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subwayRealtimeType, subwayRealtimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert subway_realtime")
	}

	if !cached {
		subwayRealtimeUpsertCacheMut.Lock()
		subwayRealtimeUpsertCache[key] = cache
		subwayRealtimeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SubwayRealtime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubwayRealtime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubwayRealtime provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subwayRealtimePrimaryKeyMapping)
	sql := "DELETE FROM \"subway_realtime\" WHERE \"station_id\"=$1 AND \"up_down_type\"=$2 AND \"arrival_sequence\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subway_realtime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subway_realtime")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subwayRealtimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subwayRealtimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subway_realtime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_realtime")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubwayRealtimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayRealtimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subway_realtime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayRealtimePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subwayRealtime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_realtime")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubwayRealtime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubwayRealtime(ctx, exec, o.StationID, o.UpDownType, o.ArrivalSequence)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubwayRealtimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubwayRealtimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayRealtimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subway_realtime\".* FROM \"subway_realtime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayRealtimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubwayRealtimeSlice")
	}

	*o = slice

	return nil
}

// SubwayRealtimeExists checks if the SubwayRealtime row exists.
func SubwayRealtimeExists(ctx context.Context, exec boil.ContextExecutor, stationID string, upDownType string, arrivalSequence int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subway_realtime\" where \"station_id\"=$1 AND \"up_down_type\"=$2 AND \"arrival_sequence\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stationID, upDownType, arrivalSequence)
	}
	row := exec.QueryRowContext(ctx, sql, stationID, upDownType, arrivalSequence)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subway_realtime exists")
	}

	return exists, nil
}

// Exists checks if the SubwayRealtime row exists.
func (o *SubwayRealtime) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubwayRealtimeExists(ctx, exec, o.StationID, o.UpDownType, o.ArrivalSequence)
}
