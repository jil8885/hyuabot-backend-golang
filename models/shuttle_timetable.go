// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttleTimetable is an object representing the database table.
type ShuttleTimetable struct {
	Seq           int       `boil:"seq" json:"seq" toml:"seq" yaml:"seq"`
	PeriodType    string    `boil:"period_type" json:"periodType" toml:"periodType" yaml:"periodType"`
	Weekday       bool      `boil:"weekday" json:"weekday" toml:"weekday" yaml:"weekday"`
	RouteName     string    `boil:"route_name" json:"routeName" toml:"routeName" yaml:"routeName"`
	DepartureTime time.Time `boil:"departure_time" json:"departureTime" toml:"departureTime" yaml:"departureTime"`

	R *shuttleTimetableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shuttleTimetableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShuttleTimetableColumns = struct {
	Seq           string
	PeriodType    string
	Weekday       string
	RouteName     string
	DepartureTime string
}{
	Seq:           "seq",
	PeriodType:    "period_type",
	Weekday:       "weekday",
	RouteName:     "route_name",
	DepartureTime: "departure_time",
}

var ShuttleTimetableTableColumns = struct {
	Seq           string
	PeriodType    string
	Weekday       string
	RouteName     string
	DepartureTime string
}{
	Seq:           "shuttle_timetable.seq",
	PeriodType:    "shuttle_timetable.period_type",
	Weekday:       "shuttle_timetable.weekday",
	RouteName:     "shuttle_timetable.route_name",
	DepartureTime: "shuttle_timetable.departure_time",
}

// Generated where

var ShuttleTimetableWhere = struct {
	Seq           whereHelperint
	PeriodType    whereHelperstring
	Weekday       whereHelperbool
	RouteName     whereHelperstring
	DepartureTime whereHelpertime_Time
}{
	Seq:           whereHelperint{field: "\"shuttle_timetable\".\"seq\""},
	PeriodType:    whereHelperstring{field: "\"shuttle_timetable\".\"period_type\""},
	Weekday:       whereHelperbool{field: "\"shuttle_timetable\".\"weekday\""},
	RouteName:     whereHelperstring{field: "\"shuttle_timetable\".\"route_name\""},
	DepartureTime: whereHelpertime_Time{field: "\"shuttle_timetable\".\"departure_time\""},
}

// ShuttleTimetableRels is where relationship names are stored.
var ShuttleTimetableRels = struct {
	PeriodTypeShuttlePeriodType string
	RouteNameShuttleRoute       string
}{
	PeriodTypeShuttlePeriodType: "PeriodTypeShuttlePeriodType",
	RouteNameShuttleRoute:       "RouteNameShuttleRoute",
}

// shuttleTimetableR is where relationships are stored.
type shuttleTimetableR struct {
	PeriodTypeShuttlePeriodType *ShuttlePeriodType `boil:"PeriodTypeShuttlePeriodType" json:"PeriodTypeShuttlePeriodType" toml:"PeriodTypeShuttlePeriodType" yaml:"PeriodTypeShuttlePeriodType"`
	RouteNameShuttleRoute       *ShuttleRoute      `boil:"RouteNameShuttleRoute" json:"RouteNameShuttleRoute" toml:"RouteNameShuttleRoute" yaml:"RouteNameShuttleRoute"`
}

// NewStruct creates a new relationship struct
func (*shuttleTimetableR) NewStruct() *shuttleTimetableR {
	return &shuttleTimetableR{}
}

func (r *shuttleTimetableR) GetPeriodTypeShuttlePeriodType() *ShuttlePeriodType {
	if r == nil {
		return nil
	}
	return r.PeriodTypeShuttlePeriodType
}

func (r *shuttleTimetableR) GetRouteNameShuttleRoute() *ShuttleRoute {
	if r == nil {
		return nil
	}
	return r.RouteNameShuttleRoute
}

// shuttleTimetableL is where Load methods for each relationship are stored.
type shuttleTimetableL struct{}

var (
	shuttleTimetableAllColumns            = []string{"seq", "period_type", "weekday", "route_name", "departure_time"}
	shuttleTimetableColumnsWithoutDefault = []string{"period_type", "weekday", "route_name", "departure_time"}
	shuttleTimetableColumnsWithDefault    = []string{"seq"}
	shuttleTimetablePrimaryKeyColumns     = []string{"seq"}
	shuttleTimetableGeneratedColumns      = []string{}
)

type (
	// ShuttleTimetableSlice is an alias for a slice of pointers to ShuttleTimetable.
	// This should almost always be used instead of []ShuttleTimetable.
	ShuttleTimetableSlice []*ShuttleTimetable
	// ShuttleTimetableHook is the signature for custom ShuttleTimetable hook methods
	ShuttleTimetableHook func(context.Context, boil.ContextExecutor, *ShuttleTimetable) error

	shuttleTimetableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttleTimetableType                 = reflect.TypeOf(&ShuttleTimetable{})
	shuttleTimetableMapping              = queries.MakeStructMapping(shuttleTimetableType)
	shuttleTimetablePrimaryKeyMapping, _ = queries.BindMapping(shuttleTimetableType, shuttleTimetableMapping, shuttleTimetablePrimaryKeyColumns)
	shuttleTimetableInsertCacheMut       sync.RWMutex
	shuttleTimetableInsertCache          = make(map[string]insertCache)
	shuttleTimetableUpdateCacheMut       sync.RWMutex
	shuttleTimetableUpdateCache          = make(map[string]updateCache)
	shuttleTimetableUpsertCacheMut       sync.RWMutex
	shuttleTimetableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shuttleTimetableAfterSelectHooks []ShuttleTimetableHook

var shuttleTimetableBeforeInsertHooks []ShuttleTimetableHook
var shuttleTimetableAfterInsertHooks []ShuttleTimetableHook

var shuttleTimetableBeforeUpdateHooks []ShuttleTimetableHook
var shuttleTimetableAfterUpdateHooks []ShuttleTimetableHook

var shuttleTimetableBeforeDeleteHooks []ShuttleTimetableHook
var shuttleTimetableAfterDeleteHooks []ShuttleTimetableHook

var shuttleTimetableBeforeUpsertHooks []ShuttleTimetableHook
var shuttleTimetableAfterUpsertHooks []ShuttleTimetableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShuttleTimetable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShuttleTimetable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShuttleTimetable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShuttleTimetable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShuttleTimetable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShuttleTimetable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShuttleTimetable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShuttleTimetable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShuttleTimetable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleTimetableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShuttleTimetableHook registers your hook function for all future operations.
func AddShuttleTimetableHook(hookPoint boil.HookPoint, shuttleTimetableHook ShuttleTimetableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shuttleTimetableAfterSelectHooks = append(shuttleTimetableAfterSelectHooks, shuttleTimetableHook)
	case boil.BeforeInsertHook:
		shuttleTimetableBeforeInsertHooks = append(shuttleTimetableBeforeInsertHooks, shuttleTimetableHook)
	case boil.AfterInsertHook:
		shuttleTimetableAfterInsertHooks = append(shuttleTimetableAfterInsertHooks, shuttleTimetableHook)
	case boil.BeforeUpdateHook:
		shuttleTimetableBeforeUpdateHooks = append(shuttleTimetableBeforeUpdateHooks, shuttleTimetableHook)
	case boil.AfterUpdateHook:
		shuttleTimetableAfterUpdateHooks = append(shuttleTimetableAfterUpdateHooks, shuttleTimetableHook)
	case boil.BeforeDeleteHook:
		shuttleTimetableBeforeDeleteHooks = append(shuttleTimetableBeforeDeleteHooks, shuttleTimetableHook)
	case boil.AfterDeleteHook:
		shuttleTimetableAfterDeleteHooks = append(shuttleTimetableAfterDeleteHooks, shuttleTimetableHook)
	case boil.BeforeUpsertHook:
		shuttleTimetableBeforeUpsertHooks = append(shuttleTimetableBeforeUpsertHooks, shuttleTimetableHook)
	case boil.AfterUpsertHook:
		shuttleTimetableAfterUpsertHooks = append(shuttleTimetableAfterUpsertHooks, shuttleTimetableHook)
	}
}

// One returns a single shuttleTimetable record from the query.
func (q shuttleTimetableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttleTimetable, error) {
	o := &ShuttleTimetable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_timetable")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShuttleTimetable records from the query.
func (q shuttleTimetableQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttleTimetableSlice, error) {
	var o []*ShuttleTimetable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttleTimetable slice")
	}

	if len(shuttleTimetableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShuttleTimetable records in the query.
func (q shuttleTimetableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_timetable rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttleTimetableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_timetable exists")
	}

	return count > 0, nil
}

// PeriodTypeShuttlePeriodType pointed to by the foreign key.
func (o *ShuttleTimetable) PeriodTypeShuttlePeriodType(mods ...qm.QueryMod) shuttlePeriodTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"period_type\" = ?", o.PeriodType),
	}

	queryMods = append(queryMods, mods...)

	return ShuttlePeriodTypes(queryMods...)
}

// RouteNameShuttleRoute pointed to by the foreign key.
func (o *ShuttleTimetable) RouteNameShuttleRoute(mods ...qm.QueryMod) shuttleRouteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"route_name\" = ?", o.RouteName),
	}

	queryMods = append(queryMods, mods...)

	return ShuttleRoutes(queryMods...)
}

// LoadPeriodTypeShuttlePeriodType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttleTimetableL) LoadPeriodTypeShuttlePeriodType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleTimetable interface{}, mods queries.Applicator) error {
	var slice []*ShuttleTimetable
	var object *ShuttleTimetable

	if singular {
		var ok bool
		object, ok = maybeShuttleTimetable.(*ShuttleTimetable)
		if !ok {
			object = new(ShuttleTimetable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleTimetable))
			}
		}
	} else {
		s, ok := maybeShuttleTimetable.(*[]*ShuttleTimetable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleTimetable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleTimetableR{}
		}
		args = append(args, object.PeriodType)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleTimetableR{}
			}

			for _, a := range args {
				if a == obj.PeriodType {
					continue Outer
				}
			}

			args = append(args, obj.PeriodType)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_period_type`),
		qm.WhereIn(`shuttle_period_type.period_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttlePeriodType")
	}

	var resultSlice []*ShuttlePeriodType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttlePeriodType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_period_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_period_type")
	}

	if len(shuttlePeriodTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PeriodTypeShuttlePeriodType = foreign
		if foreign.R == nil {
			foreign.R = &shuttlePeriodTypeR{}
		}
		foreign.R.PeriodTypeShuttleTimetables = append(foreign.R.PeriodTypeShuttleTimetables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeriodType == foreign.PeriodType {
				local.R.PeriodTypeShuttlePeriodType = foreign
				if foreign.R == nil {
					foreign.R = &shuttlePeriodTypeR{}
				}
				foreign.R.PeriodTypeShuttleTimetables = append(foreign.R.PeriodTypeShuttleTimetables, local)
				break
			}
		}
	}

	return nil
}

// LoadRouteNameShuttleRoute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttleTimetableL) LoadRouteNameShuttleRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleTimetable interface{}, mods queries.Applicator) error {
	var slice []*ShuttleTimetable
	var object *ShuttleTimetable

	if singular {
		var ok bool
		object, ok = maybeShuttleTimetable.(*ShuttleTimetable)
		if !ok {
			object = new(ShuttleTimetable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleTimetable))
			}
		}
	} else {
		s, ok := maybeShuttleTimetable.(*[]*ShuttleTimetable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleTimetable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleTimetableR{}
		}
		args = append(args, object.RouteName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleTimetableR{}
			}

			for _, a := range args {
				if a == obj.RouteName {
					continue Outer
				}
			}

			args = append(args, obj.RouteName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_route`),
		qm.WhereIn(`shuttle_route.route_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttleRoute")
	}

	var resultSlice []*ShuttleRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttleRoute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_route")
	}

	if len(shuttleRouteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RouteNameShuttleRoute = foreign
		if foreign.R == nil {
			foreign.R = &shuttleRouteR{}
		}
		foreign.R.RouteNameShuttleTimetables = append(foreign.R.RouteNameShuttleTimetables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RouteName == foreign.RouteName {
				local.R.RouteNameShuttleRoute = foreign
				if foreign.R == nil {
					foreign.R = &shuttleRouteR{}
				}
				foreign.R.RouteNameShuttleTimetables = append(foreign.R.RouteNameShuttleTimetables, local)
				break
			}
		}
	}

	return nil
}

// SetPeriodTypeShuttlePeriodType of the shuttleTimetable to the related item.
// Sets o.R.PeriodTypeShuttlePeriodType to related.
// Adds o to related.R.PeriodTypeShuttleTimetables.
func (o *ShuttleTimetable) SetPeriodTypeShuttlePeriodType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttlePeriodType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"period_type"}),
		strmangle.WhereClause("\"", "\"", 2, shuttleTimetablePrimaryKeyColumns),
	)
	values := []interface{}{related.PeriodType, o.Seq}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeriodType = related.PeriodType
	if o.R == nil {
		o.R = &shuttleTimetableR{
			PeriodTypeShuttlePeriodType: related,
		}
	} else {
		o.R.PeriodTypeShuttlePeriodType = related
	}

	if related.R == nil {
		related.R = &shuttlePeriodTypeR{
			PeriodTypeShuttleTimetables: ShuttleTimetableSlice{o},
		}
	} else {
		related.R.PeriodTypeShuttleTimetables = append(related.R.PeriodTypeShuttleTimetables, o)
	}

	return nil
}

// SetRouteNameShuttleRoute of the shuttleTimetable to the related item.
// Sets o.R.RouteNameShuttleRoute to related.
// Adds o to related.R.RouteNameShuttleTimetables.
func (o *ShuttleTimetable) SetRouteNameShuttleRoute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttleRoute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"route_name"}),
		strmangle.WhereClause("\"", "\"", 2, shuttleTimetablePrimaryKeyColumns),
	)
	values := []interface{}{related.RouteName, o.Seq}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RouteName = related.RouteName
	if o.R == nil {
		o.R = &shuttleTimetableR{
			RouteNameShuttleRoute: related,
		}
	} else {
		o.R.RouteNameShuttleRoute = related
	}

	if related.R == nil {
		related.R = &shuttleRouteR{
			RouteNameShuttleTimetables: ShuttleTimetableSlice{o},
		}
	} else {
		related.R.RouteNameShuttleTimetables = append(related.R.RouteNameShuttleTimetables, o)
	}

	return nil
}

// ShuttleTimetables retrieves all the records using an executor.
func ShuttleTimetables(mods ...qm.QueryMod) shuttleTimetableQuery {
	mods = append(mods, qm.From("\"shuttle_timetable\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_timetable\".*"})
	}

	return shuttleTimetableQuery{q}
}

// FindShuttleTimetable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShuttleTimetable(ctx context.Context, exec boil.ContextExecutor, seq int, selectCols ...string) (*ShuttleTimetable, error) {
	shuttleTimetableObj := &ShuttleTimetable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shuttle_timetable\" where \"seq\"=$1", sel,
	)

	q := queries.Raw(query, seq)

	err := q.Bind(ctx, exec, shuttleTimetableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shuttle_timetable")
	}

	if err = shuttleTimetableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shuttleTimetableObj, err
	}

	return shuttleTimetableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShuttleTimetable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_timetable provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleTimetableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shuttleTimetableInsertCacheMut.RLock()
	cache, cached := shuttleTimetableInsertCache[key]
	shuttleTimetableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shuttleTimetableAllColumns,
			shuttleTimetableColumnsWithDefault,
			shuttleTimetableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shuttleTimetableType, shuttleTimetableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shuttleTimetableType, shuttleTimetableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shuttle_timetable\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shuttle_timetable\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shuttle_timetable")
	}

	if !cached {
		shuttleTimetableInsertCacheMut.Lock()
		shuttleTimetableInsertCache[key] = cache
		shuttleTimetableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShuttleTimetable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShuttleTimetable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shuttleTimetableUpdateCacheMut.RLock()
	cache, cached := shuttleTimetableUpdateCache[key]
	shuttleTimetableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shuttleTimetableAllColumns,
			shuttleTimetablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shuttle_timetable, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shuttle_timetable\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shuttleTimetablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shuttleTimetableType, shuttleTimetableMapping, append(wl, shuttleTimetablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shuttle_timetable row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shuttle_timetable")
	}

	if !cached {
		shuttleTimetableUpdateCacheMut.Lock()
		shuttleTimetableUpdateCache[key] = cache
		shuttleTimetableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shuttleTimetableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shuttle_timetable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shuttle_timetable")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShuttleTimetableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleTimetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shuttle_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shuttleTimetablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shuttleTimetable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shuttleTimetable")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShuttleTimetable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_timetable provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleTimetableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shuttleTimetableUpsertCacheMut.RLock()
	cache, cached := shuttleTimetableUpsertCache[key]
	shuttleTimetableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shuttleTimetableAllColumns,
			shuttleTimetableColumnsWithDefault,
			shuttleTimetableColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shuttleTimetableAllColumns,
			shuttleTimetablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shuttle_timetable, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shuttleTimetablePrimaryKeyColumns))
			copy(conflict, shuttleTimetablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shuttle_timetable\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shuttleTimetableType, shuttleTimetableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shuttleTimetableType, shuttleTimetableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shuttle_timetable")
	}

	if !cached {
		shuttleTimetableUpsertCacheMut.Lock()
		shuttleTimetableUpsertCache[key] = cache
		shuttleTimetableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShuttleTimetable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShuttleTimetable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShuttleTimetable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shuttleTimetablePrimaryKeyMapping)
	sql := "DELETE FROM \"shuttle_timetable\" WHERE \"seq\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shuttle_timetable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shuttle_timetable")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shuttleTimetableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shuttleTimetableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttle_timetable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_timetable")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShuttleTimetableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shuttleTimetableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleTimetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shuttle_timetable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleTimetablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttleTimetable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_timetable")
	}

	if len(shuttleTimetableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShuttleTimetable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShuttleTimetable(ctx, exec, o.Seq)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShuttleTimetableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShuttleTimetableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleTimetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shuttle_timetable\".* FROM \"shuttle_timetable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleTimetablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShuttleTimetableSlice")
	}

	*o = slice

	return nil
}

// ShuttleTimetableExists checks if the ShuttleTimetable row exists.
func ShuttleTimetableExists(ctx context.Context, exec boil.ContextExecutor, seq int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shuttle_timetable\" where \"seq\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, seq)
	}
	row := exec.QueryRowContext(ctx, sql, seq)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shuttle_timetable exists")
	}

	return exists, nil
}

// Exists checks if the ShuttleTimetable row exists.
func (o *ShuttleTimetable) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShuttleTimetableExists(ctx, exec, o.Seq)
}
