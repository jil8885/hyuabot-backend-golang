// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Notice is an object representing the database table.
type Notice struct {
	NoticeID   int       `boil:"notice_id" json:"noticeID" toml:"noticeID" yaml:"noticeID"`
	Title      string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	URL        string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	ExpiredAt  null.Time `boil:"expired_at" json:"expiredAt,omitempty" toml:"expiredAt" yaml:"expiredAt,omitempty"`
	CategoryID int       `boil:"category_id" json:"categoryID" toml:"categoryID" yaml:"categoryID"`
	UserID     string    `boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`

	R *noticeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noticeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoticeColumns = struct {
	NoticeID   string
	Title      string
	URL        string
	ExpiredAt  string
	CategoryID string
	UserID     string
}{
	NoticeID:   "notice_id",
	Title:      "title",
	URL:        "url",
	ExpiredAt:  "expired_at",
	CategoryID: "category_id",
	UserID:     "user_id",
}

var NoticeTableColumns = struct {
	NoticeID   string
	Title      string
	URL        string
	ExpiredAt  string
	CategoryID string
	UserID     string
}{
	NoticeID:   "notices.notice_id",
	Title:      "notices.title",
	URL:        "notices.url",
	ExpiredAt:  "notices.expired_at",
	CategoryID: "notices.category_id",
	UserID:     "notices.user_id",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var NoticeWhere = struct {
	NoticeID   whereHelperint
	Title      whereHelperstring
	URL        whereHelperstring
	ExpiredAt  whereHelpernull_Time
	CategoryID whereHelperint
	UserID     whereHelperstring
}{
	NoticeID:   whereHelperint{field: "\"notices\".\"notice_id\""},
	Title:      whereHelperstring{field: "\"notices\".\"title\""},
	URL:        whereHelperstring{field: "\"notices\".\"url\""},
	ExpiredAt:  whereHelpernull_Time{field: "\"notices\".\"expired_at\""},
	CategoryID: whereHelperint{field: "\"notices\".\"category_id\""},
	UserID:     whereHelperstring{field: "\"notices\".\"user_id\""},
}

// NoticeRels is where relationship names are stored.
var NoticeRels = struct {
	Category string
	User     string
}{
	Category: "Category",
	User:     "User",
}

// noticeR is where relationships are stored.
type noticeR struct {
	Category *NoticeCategory `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	User     *AdminUser      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*noticeR) NewStruct() *noticeR {
	return &noticeR{}
}

func (r *noticeR) GetCategory() *NoticeCategory {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *noticeR) GetUser() *AdminUser {
	if r == nil {
		return nil
	}
	return r.User
}

// noticeL is where Load methods for each relationship are stored.
type noticeL struct{}

var (
	noticeAllColumns            = []string{"notice_id", "title", "url", "expired_at", "category_id", "user_id"}
	noticeColumnsWithoutDefault = []string{"notice_id", "title", "url", "category_id", "user_id"}
	noticeColumnsWithDefault    = []string{"expired_at"}
	noticePrimaryKeyColumns     = []string{"notice_id"}
	noticeGeneratedColumns      = []string{}
)

type (
	// NoticeSlice is an alias for a slice of pointers to Notice.
	// This should almost always be used instead of []Notice.
	NoticeSlice []*Notice

	noticeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noticeType                 = reflect.TypeOf(&Notice{})
	noticeMapping              = queries.MakeStructMapping(noticeType)
	noticePrimaryKeyMapping, _ = queries.BindMapping(noticeType, noticeMapping, noticePrimaryKeyColumns)
	noticeInsertCacheMut       sync.RWMutex
	noticeInsertCache          = make(map[string]insertCache)
	noticeUpdateCacheMut       sync.RWMutex
	noticeUpdateCache          = make(map[string]updateCache)
	noticeUpsertCacheMut       sync.RWMutex
	noticeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single notice record from the query.
func (q noticeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Notice, error) {
	o := &Notice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notices")
	}

	return o, nil
}

// All returns all Notice records from the query.
func (q noticeQuery) All(ctx context.Context, exec boil.ContextExecutor) (NoticeSlice, error) {
	var o []*Notice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Notice slice")
	}

	return o, nil
}

// Count returns the count of all Notice records in the query.
func (q noticeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q noticeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notices exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Notice) Category(mods ...qm.QueryMod) noticeCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"category_id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return NoticeCategories(queryMods...)
}

// User pointed to by the foreign key.
func (o *Notice) User(mods ...qm.QueryMod) adminUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return AdminUsers(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotice interface{}, mods queries.Applicator) error {
	var slice []*Notice
	var object *Notice

	if singular {
		var ok bool
		object, ok = maybeNotice.(*Notice)
		if !ok {
			object = new(Notice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotice))
			}
		}
	} else {
		s, ok := maybeNotice.(*[]*Notice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notice_category`),
		qm.WhereIn(`notice_category.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NoticeCategory")
	}

	var resultSlice []*NoticeCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NoticeCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notice_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notice_category")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &noticeCategoryR{}
		}
		foreign.R.CategoryNotices = append(foreign.R.CategoryNotices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.CategoryID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &noticeCategoryR{}
				}
				foreign.R.CategoryNotices = append(foreign.R.CategoryNotices, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNotice interface{}, mods queries.Applicator) error {
	var slice []*Notice
	var object *Notice

	if singular {
		var ok bool
		object, ok = maybeNotice.(*Notice)
		if !ok {
			object = new(Notice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNotice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNotice))
			}
		}
	} else {
		s, ok := maybeNotice.(*[]*Notice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNotice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNotice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`admin_user`),
		qm.WhereIn(`admin_user.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AdminUser")
	}

	var resultSlice []*AdminUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AdminUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for admin_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for admin_user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &adminUserR{}
		}
		foreign.R.UserNotices = append(foreign.R.UserNotices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &adminUserR{}
				}
				foreign.R.UserNotices = append(foreign.R.UserNotices, local)
				break
			}
		}
	}

	return nil
}

// SetCategory of the notice to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryNotices.
func (o *Notice) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NoticeCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, noticePrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.CategoryID
	if o.R == nil {
		o.R = &noticeR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &noticeCategoryR{
			CategoryNotices: NoticeSlice{o},
		}
	} else {
		related.R.CategoryNotices = append(related.R.CategoryNotices, o)
	}

	return nil
}

// SetUser of the notice to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotices.
func (o *Notice) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AdminUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, noticePrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &noticeR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &adminUserR{
			UserNotices: NoticeSlice{o},
		}
	} else {
		related.R.UserNotices = append(related.R.UserNotices, o)
	}

	return nil
}

// Notices retrieves all the records using an executor.
func Notices(mods ...qm.QueryMod) noticeQuery {
	mods = append(mods, qm.From("\"notices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"notices\".*"})
	}

	return noticeQuery{q}
}

// FindNotice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotice(ctx context.Context, exec boil.ContextExecutor, noticeID int, selectCols ...string) (*Notice, error) {
	noticeObj := &Notice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notices\" where \"notice_id\"=$1", sel,
	)

	q := queries.Raw(query, noticeID)

	err := q.Bind(ctx, exec, noticeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notices")
	}

	return noticeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Notice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notices provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(noticeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noticeInsertCacheMut.RLock()
	cache, cached := noticeInsertCache[key]
	noticeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noticeAllColumns,
			noticeColumnsWithDefault,
			noticeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noticeType, noticeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notices")
	}

	if !cached {
		noticeInsertCacheMut.Lock()
		noticeInsertCache[key] = cache
		noticeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Notice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Notice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	noticeUpdateCacheMut.RLock()
	cache, cached := noticeUpdateCache[key]
	noticeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noticeAllColumns,
			noticePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, noticePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, append(wl, noticePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notices")
	}

	if !cached {
		noticeUpdateCacheMut.Lock()
		noticeUpdateCache[key] = cache
		noticeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q noticeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoticeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, noticePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Notice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notices provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noticeUpsertCacheMut.RLock()
	cache, cached := noticeUpsertCache[key]
	noticeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			noticeAllColumns,
			noticeColumnsWithDefault,
			noticeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			noticeAllColumns,
			noticePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert notices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(noticePrimaryKeyColumns))
			copy(conflict, noticePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"notices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noticeType, noticeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notices")
	}

	if !cached {
		noticeUpsertCacheMut.Lock()
		noticeUpsertCache[key] = cache
		noticeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Notice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Notice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Notice provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), noticePrimaryKeyMapping)
	sql := "DELETE FROM \"notices\" WHERE \"notice_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q noticeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noticeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoticeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, noticePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notices")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Notice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNotice(ctx, exec, o.NoticeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoticeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notices\".* FROM \"notices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, noticePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoticeSlice")
	}

	*o = slice

	return nil
}

// NoticeExists checks if the Notice row exists.
func NoticeExists(ctx context.Context, exec boil.ContextExecutor, noticeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notices\" where \"notice_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, noticeID)
	}
	row := exec.QueryRowContext(ctx, sql, noticeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notices exists")
	}

	return exists, nil
}

// Exists checks if the Notice row exists.
func (o *Notice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NoticeExists(ctx, exec, o.NoticeID)
}
