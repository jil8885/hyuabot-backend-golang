// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AdminUser is an object representing the database table.
type AdminUser struct {
	UserID   string `boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`
	Password string `boil:"password" json:"password" toml:"password" yaml:"password"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email    string `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone    string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Active   bool   `boil:"active" json:"active" toml:"active" yaml:"active"`

	R *adminUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminUserColumns = struct {
	UserID   string
	Password string
	Name     string
	Email    string
	Phone    string
	Active   string
}{
	UserID:   "user_id",
	Password: "password",
	Name:     "name",
	Email:    "email",
	Phone:    "phone",
	Active:   "active",
}

var AdminUserTableColumns = struct {
	UserID   string
	Password string
	Name     string
	Email    string
	Phone    string
	Active   string
}{
	UserID:   "admin_user.user_id",
	Password: "admin_user.password",
	Name:     "admin_user.name",
	Email:    "admin_user.email",
	Phone:    "admin_user.phone",
	Active:   "admin_user.active",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AdminUserWhere = struct {
	UserID   whereHelperstring
	Password whereHelperstring
	Name     whereHelperstring
	Email    whereHelperstring
	Phone    whereHelperstring
	Active   whereHelperbool
}{
	UserID:   whereHelperstring{field: "\"admin_user\".\"user_id\""},
	Password: whereHelperstring{field: "\"admin_user\".\"password\""},
	Name:     whereHelperstring{field: "\"admin_user\".\"name\""},
	Email:    whereHelperstring{field: "\"admin_user\".\"email\""},
	Phone:    whereHelperstring{field: "\"admin_user\".\"phone\""},
	Active:   whereHelperbool{field: "\"admin_user\".\"active\""},
}

// AdminUserRels is where relationship names are stored.
var AdminUserRels = struct {
	UserNotices string
}{
	UserNotices: "UserNotices",
}

// adminUserR is where relationships are stored.
type adminUserR struct {
	UserNotices NoticeSlice `boil:"UserNotices" json:"UserNotices" toml:"UserNotices" yaml:"UserNotices"`
}

// NewStruct creates a new relationship struct
func (*adminUserR) NewStruct() *adminUserR {
	return &adminUserR{}
}

func (r *adminUserR) GetUserNotices() NoticeSlice {
	if r == nil {
		return nil
	}
	return r.UserNotices
}

// adminUserL is where Load methods for each relationship are stored.
type adminUserL struct{}

var (
	adminUserAllColumns            = []string{"user_id", "password", "name", "email", "phone", "active"}
	adminUserColumnsWithoutDefault = []string{"user_id", "password", "name", "email", "phone", "active"}
	adminUserColumnsWithDefault    = []string{}
	adminUserPrimaryKeyColumns     = []string{"user_id"}
	adminUserGeneratedColumns      = []string{}
)

type (
	// AdminUserSlice is an alias for a slice of pointers to AdminUser.
	// This should almost always be used instead of []AdminUser.
	AdminUserSlice []*AdminUser

	adminUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminUserType                 = reflect.TypeOf(&AdminUser{})
	adminUserMapping              = queries.MakeStructMapping(adminUserType)
	adminUserPrimaryKeyMapping, _ = queries.BindMapping(adminUserType, adminUserMapping, adminUserPrimaryKeyColumns)
	adminUserInsertCacheMut       sync.RWMutex
	adminUserInsertCache          = make(map[string]insertCache)
	adminUserUpdateCacheMut       sync.RWMutex
	adminUserUpdateCache          = make(map[string]updateCache)
	adminUserUpsertCacheMut       sync.RWMutex
	adminUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single adminUser record from the query.
func (q adminUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdminUser, error) {
	o := &AdminUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin_user")
	}

	return o, nil
}

// All returns all AdminUser records from the query.
func (q adminUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdminUserSlice, error) {
	var o []*AdminUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdminUser slice")
	}

	return o, nil
}

// Count returns the count of all AdminUser records in the query.
func (q adminUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adminUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin_user exists")
	}

	return count > 0, nil
}

// UserNotices retrieves all the notice's Notices with an executor via user_id column.
func (o *AdminUser) UserNotices(mods ...qm.QueryMod) noticeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notices\".\"user_id\"=?", o.UserID),
	)

	return Notices(queryMods...)
}

// LoadUserNotices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (adminUserL) LoadUserNotices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdminUser interface{}, mods queries.Applicator) error {
	var slice []*AdminUser
	var object *AdminUser

	if singular {
		var ok bool
		object, ok = maybeAdminUser.(*AdminUser)
		if !ok {
			object = new(AdminUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAdminUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAdminUser))
			}
		}
	} else {
		s, ok := maybeAdminUser.(*[]*AdminUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAdminUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAdminUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &adminUserR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminUserR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notices`),
		qm.WhereIn(`notices.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notices")
	}

	var resultSlice []*Notice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notices")
	}

	if singular {
		object.R.UserNotices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &noticeR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.UserID {
				local.R.UserNotices = append(local.R.UserNotices, foreign)
				if foreign.R == nil {
					foreign.R = &noticeR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserNotices adds the given related objects to the existing relationships
// of the admin_user, optionally inserting them as new records.
// Appends related to o.R.UserNotices.
// Sets related.R.User appropriately.
func (o *AdminUser) AddUserNotices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, noticePrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.NoticeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &adminUserR{
			UserNotices: related,
		}
	} else {
		o.R.UserNotices = append(o.R.UserNotices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &noticeR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AdminUsers retrieves all the records using an executor.
func AdminUsers(mods ...qm.QueryMod) adminUserQuery {
	mods = append(mods, qm.From("\"admin_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"admin_user\".*"})
	}

	return adminUserQuery{q}
}

// FindAdminUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminUser(ctx context.Context, exec boil.ContextExecutor, userID string, selectCols ...string) (*AdminUser, error) {
	adminUserObj := &AdminUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"admin_user\" where \"user_id\"=$1", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, adminUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin_user")
	}

	return adminUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdminUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_user provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(adminUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminUserInsertCacheMut.RLock()
	cache, cached := adminUserInsertCache[key]
	adminUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminUserAllColumns,
			adminUserColumnsWithDefault,
			adminUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminUserType, adminUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminUserType, adminUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"admin_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"admin_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin_user")
	}

	if !cached {
		adminUserInsertCacheMut.Lock()
		adminUserInsertCache[key] = cache
		adminUserInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AdminUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdminUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	adminUserUpdateCacheMut.RLock()
	cache, cached := adminUserUpdateCache[key]
	adminUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminUserAllColumns,
			adminUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update admin_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"admin_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, adminUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminUserType, adminUserMapping, append(wl, adminUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update admin_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for admin_user")
	}

	if !cached {
		adminUserUpdateCacheMut.Lock()
		adminUserUpdateCache[key] = cache
		adminUserUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q adminUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for admin_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for admin_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"admin_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, adminUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in adminUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all adminUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdminUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_user provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(adminUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminUserUpsertCacheMut.RLock()
	cache, cached := adminUserUpsertCache[key]
	adminUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			adminUserAllColumns,
			adminUserColumnsWithDefault,
			adminUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			adminUserAllColumns,
			adminUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert admin_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(adminUserPrimaryKeyColumns))
			copy(conflict, adminUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"admin_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(adminUserType, adminUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminUserType, adminUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert admin_user")
	}

	if !cached {
		adminUserUpsertCacheMut.Lock()
		adminUserUpsertCache[key] = cache
		adminUserUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AdminUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdminUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminUserPrimaryKeyMapping)
	sql := "DELETE FROM \"admin_user\" WHERE \"user_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from admin_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for admin_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"admin_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_user")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdminUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAdminUser(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"admin_user\".* FROM \"admin_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminUserSlice")
	}

	*o = slice

	return nil
}

// AdminUserExists checks if the AdminUser row exists.
func AdminUserExists(ctx context.Context, exec boil.ContextExecutor, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"admin_user\" where \"user_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin_user exists")
	}

	return exists, nil
}

// Exists checks if the AdminUser row exists.
func (o *AdminUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AdminUserExists(ctx, exec, o.UserID)
}
