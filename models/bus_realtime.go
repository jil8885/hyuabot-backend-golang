// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusRealtime is an object representing the database table.
type BusRealtime struct {
	RouteStopID        string    `boil:"route_stop_id" json:"routeStopID" toml:"routeStopID" yaml:"routeStopID"`
	ArrivalSequence    int       `boil:"arrival_sequence" json:"arrivalSequence" toml:"arrivalSequence" yaml:"arrivalSequence"`
	RemainingStopCount int       `boil:"remaining_stop_count" json:"remainingStopCount" toml:"remainingStopCount" yaml:"remainingStopCount"`
	RemainingSeatCount int       `boil:"remaining_seat_count" json:"remainingSeatCount" toml:"remainingSeatCount" yaml:"remainingSeatCount"`
	RemainingTime      string    `boil:"remaining_time" json:"remainingTime" toml:"remainingTime" yaml:"remainingTime"`
	LowPlate           bool      `boil:"low_plate" json:"lowPlate" toml:"lowPlate" yaml:"lowPlate"`
	LastUpdatedTime    time.Time `boil:"last_updated_time" json:"lastUpdatedTime" toml:"lastUpdatedTime" yaml:"lastUpdatedTime"`

	R *busRealtimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L busRealtimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusRealtimeColumns = struct {
	RouteStopID        string
	ArrivalSequence    string
	RemainingStopCount string
	RemainingSeatCount string
	RemainingTime      string
	LowPlate           string
	LastUpdatedTime    string
}{
	RouteStopID:        "route_stop_id",
	ArrivalSequence:    "arrival_sequence",
	RemainingStopCount: "remaining_stop_count",
	RemainingSeatCount: "remaining_seat_count",
	RemainingTime:      "remaining_time",
	LowPlate:           "low_plate",
	LastUpdatedTime:    "last_updated_time",
}

var BusRealtimeTableColumns = struct {
	RouteStopID        string
	ArrivalSequence    string
	RemainingStopCount string
	RemainingSeatCount string
	RemainingTime      string
	LowPlate           string
	LastUpdatedTime    string
}{
	RouteStopID:        "bus_realtime.route_stop_id",
	ArrivalSequence:    "bus_realtime.arrival_sequence",
	RemainingStopCount: "bus_realtime.remaining_stop_count",
	RemainingSeatCount: "bus_realtime.remaining_seat_count",
	RemainingTime:      "bus_realtime.remaining_time",
	LowPlate:           "bus_realtime.low_plate",
	LastUpdatedTime:    "bus_realtime.last_updated_time",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusRealtimeWhere = struct {
	RouteStopID        whereHelperstring
	ArrivalSequence    whereHelperint
	RemainingStopCount whereHelperint
	RemainingSeatCount whereHelperint
	RemainingTime      whereHelperstring
	LowPlate           whereHelperbool
	LastUpdatedTime    whereHelpertime_Time
}{
	RouteStopID:        whereHelperstring{field: "\"bus_realtime\".\"route_stop_id\""},
	ArrivalSequence:    whereHelperint{field: "\"bus_realtime\".\"arrival_sequence\""},
	RemainingStopCount: whereHelperint{field: "\"bus_realtime\".\"remaining_stop_count\""},
	RemainingSeatCount: whereHelperint{field: "\"bus_realtime\".\"remaining_seat_count\""},
	RemainingTime:      whereHelperstring{field: "\"bus_realtime\".\"remaining_time\""},
	LowPlate:           whereHelperbool{field: "\"bus_realtime\".\"low_plate\""},
	LastUpdatedTime:    whereHelpertime_Time{field: "\"bus_realtime\".\"last_updated_time\""},
}

// BusRealtimeRels is where relationship names are stored.
var BusRealtimeRels = struct {
}{}

// busRealtimeR is where relationships are stored.
type busRealtimeR struct {
}

// NewStruct creates a new relationship struct
func (*busRealtimeR) NewStruct() *busRealtimeR {
	return &busRealtimeR{}
}

// busRealtimeL is where Load methods for each relationship are stored.
type busRealtimeL struct{}

var (
	busRealtimeAllColumns            = []string{"route_stop_id", "arrival_sequence", "remaining_stop_count", "remaining_seat_count", "remaining_time", "low_plate", "last_updated_time"}
	busRealtimeColumnsWithoutDefault = []string{"route_stop_id", "arrival_sequence", "remaining_stop_count", "remaining_seat_count", "remaining_time", "low_plate", "last_updated_time"}
	busRealtimeColumnsWithDefault    = []string{}
	busRealtimePrimaryKeyColumns     = []string{"route_stop_id", "arrival_sequence"}
	busRealtimeGeneratedColumns      = []string{}
)

type (
	// BusRealtimeSlice is an alias for a slice of pointers to BusRealtime.
	// This should almost always be used instead of []BusRealtime.
	BusRealtimeSlice []*BusRealtime

	busRealtimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	busRealtimeType                 = reflect.TypeOf(&BusRealtime{})
	busRealtimeMapping              = queries.MakeStructMapping(busRealtimeType)
	busRealtimePrimaryKeyMapping, _ = queries.BindMapping(busRealtimeType, busRealtimeMapping, busRealtimePrimaryKeyColumns)
	busRealtimeInsertCacheMut       sync.RWMutex
	busRealtimeInsertCache          = make(map[string]insertCache)
	busRealtimeUpdateCacheMut       sync.RWMutex
	busRealtimeUpdateCache          = make(map[string]updateCache)
	busRealtimeUpsertCacheMut       sync.RWMutex
	busRealtimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single busRealtime record from the query.
func (q busRealtimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusRealtime, error) {
	o := &BusRealtime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bus_realtime")
	}

	return o, nil
}

// All returns all BusRealtime records from the query.
func (q busRealtimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusRealtimeSlice, error) {
	var o []*BusRealtime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BusRealtime slice")
	}

	return o, nil
}

// Count returns the count of all BusRealtime records in the query.
func (q busRealtimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bus_realtime rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q busRealtimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bus_realtime exists")
	}

	return count > 0, nil
}

// BusRealtimes retrieves all the records using an executor.
func BusRealtimes(mods ...qm.QueryMod) busRealtimeQuery {
	mods = append(mods, qm.From("\"bus_realtime\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bus_realtime\".*"})
	}

	return busRealtimeQuery{q}
}

// FindBusRealtime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusRealtime(ctx context.Context, exec boil.ContextExecutor, routeStopID string, arrivalSequence int, selectCols ...string) (*BusRealtime, error) {
	busRealtimeObj := &BusRealtime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bus_realtime\" where \"route_stop_id\"=$1 AND \"arrival_sequence\"=$2", sel,
	)

	q := queries.Raw(query, routeStopID, arrivalSequence)

	err := q.Bind(ctx, exec, busRealtimeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bus_realtime")
	}

	return busRealtimeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusRealtime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_realtime provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(busRealtimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	busRealtimeInsertCacheMut.RLock()
	cache, cached := busRealtimeInsertCache[key]
	busRealtimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			busRealtimeAllColumns,
			busRealtimeColumnsWithDefault,
			busRealtimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(busRealtimeType, busRealtimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(busRealtimeType, busRealtimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bus_realtime\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bus_realtime\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bus_realtime")
	}

	if !cached {
		busRealtimeInsertCacheMut.Lock()
		busRealtimeInsertCache[key] = cache
		busRealtimeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BusRealtime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusRealtime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	busRealtimeUpdateCacheMut.RLock()
	cache, cached := busRealtimeUpdateCache[key]
	busRealtimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			busRealtimeAllColumns,
			busRealtimePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bus_realtime, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bus_realtime\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, busRealtimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(busRealtimeType, busRealtimeMapping, append(wl, busRealtimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bus_realtime row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bus_realtime")
	}

	if !cached {
		busRealtimeUpdateCacheMut.Lock()
		busRealtimeUpdateCache[key] = cache
		busRealtimeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q busRealtimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bus_realtime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bus_realtime")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusRealtimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRealtimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bus_realtime\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, busRealtimePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in busRealtime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all busRealtime")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusRealtime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_realtime provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(busRealtimeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	busRealtimeUpsertCacheMut.RLock()
	cache, cached := busRealtimeUpsertCache[key]
	busRealtimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			busRealtimeAllColumns,
			busRealtimeColumnsWithDefault,
			busRealtimeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			busRealtimeAllColumns,
			busRealtimePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bus_realtime, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(busRealtimePrimaryKeyColumns))
			copy(conflict, busRealtimePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bus_realtime\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(busRealtimeType, busRealtimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(busRealtimeType, busRealtimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bus_realtime")
	}

	if !cached {
		busRealtimeUpsertCacheMut.Lock()
		busRealtimeUpsertCache[key] = cache
		busRealtimeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BusRealtime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusRealtime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusRealtime provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), busRealtimePrimaryKeyMapping)
	sql := "DELETE FROM \"bus_realtime\" WHERE \"route_stop_id\"=$1 AND \"arrival_sequence\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bus_realtime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bus_realtime")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q busRealtimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no busRealtimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bus_realtime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_realtime")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusRealtimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRealtimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bus_realtime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busRealtimePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from busRealtime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_realtime")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusRealtime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusRealtime(ctx, exec, o.RouteStopID, o.ArrivalSequence)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusRealtimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusRealtimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRealtimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bus_realtime\".* FROM \"bus_realtime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busRealtimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusRealtimeSlice")
	}

	*o = slice

	return nil
}

// BusRealtimeExists checks if the BusRealtime row exists.
func BusRealtimeExists(ctx context.Context, exec boil.ContextExecutor, routeStopID string, arrivalSequence int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bus_realtime\" where \"route_stop_id\"=$1 AND \"arrival_sequence\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, routeStopID, arrivalSequence)
	}
	row := exec.QueryRowContext(ctx, sql, routeStopID, arrivalSequence)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bus_realtime exists")
	}

	return exists, nil
}

// Exists checks if the BusRealtime row exists.
func (o *BusRealtime) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BusRealtimeExists(ctx, exec, o.RouteStopID, o.ArrivalSequence)
}
