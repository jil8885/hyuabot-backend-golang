// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReadingRoom is an object representing the database table.
type ReadingRoom struct {
	CampusID        int       `boil:"campus_id" json:"campusID" toml:"campusID" yaml:"campusID"`
	RoomID          int       `boil:"room_id" json:"roomID" toml:"roomID" yaml:"roomID"`
	RoomName        string    `boil:"room_name" json:"roomName" toml:"roomName" yaml:"roomName"`
	IsActive        bool      `boil:"is_active" json:"isActive" toml:"isActive" yaml:"isActive"`
	IsReservable    bool      `boil:"is_reservable" json:"isReservable" toml:"isReservable" yaml:"isReservable"`
	Total           int       `boil:"total" json:"total" toml:"total" yaml:"total"`
	ActiveTotal     int       `boil:"active_total" json:"activeTotal" toml:"activeTotal" yaml:"activeTotal"`
	Occupied        int       `boil:"occupied" json:"occupied" toml:"occupied" yaml:"occupied"`
	Available       null.Int  `boil:"available" json:"available,omitempty" toml:"available" yaml:"available,omitempty"`
	LastUpdatedTime null.Time `boil:"last_updated_time" json:"lastUpdatedTime,omitempty" toml:"lastUpdatedTime" yaml:"lastUpdatedTime,omitempty"`

	R *readingRoomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L readingRoomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReadingRoomColumns = struct {
	CampusID        string
	RoomID          string
	RoomName        string
	IsActive        string
	IsReservable    string
	Total           string
	ActiveTotal     string
	Occupied        string
	Available       string
	LastUpdatedTime string
}{
	CampusID:        "campus_id",
	RoomID:          "room_id",
	RoomName:        "room_name",
	IsActive:        "is_active",
	IsReservable:    "is_reservable",
	Total:           "total",
	ActiveTotal:     "active_total",
	Occupied:        "occupied",
	Available:       "available",
	LastUpdatedTime: "last_updated_time",
}

var ReadingRoomTableColumns = struct {
	CampusID        string
	RoomID          string
	RoomName        string
	IsActive        string
	IsReservable    string
	Total           string
	ActiveTotal     string
	Occupied        string
	Available       string
	LastUpdatedTime string
}{
	CampusID:        "reading_room.campus_id",
	RoomID:          "reading_room.room_id",
	RoomName:        "reading_room.room_name",
	IsActive:        "reading_room.is_active",
	IsReservable:    "reading_room.is_reservable",
	Total:           "reading_room.total",
	ActiveTotal:     "reading_room.active_total",
	Occupied:        "reading_room.occupied",
	Available:       "reading_room.available",
	LastUpdatedTime: "reading_room.last_updated_time",
}

// Generated where

var ReadingRoomWhere = struct {
	CampusID        whereHelperint
	RoomID          whereHelperint
	RoomName        whereHelperstring
	IsActive        whereHelperbool
	IsReservable    whereHelperbool
	Total           whereHelperint
	ActiveTotal     whereHelperint
	Occupied        whereHelperint
	Available       whereHelpernull_Int
	LastUpdatedTime whereHelpernull_Time
}{
	CampusID:        whereHelperint{field: "\"reading_room\".\"campus_id\""},
	RoomID:          whereHelperint{field: "\"reading_room\".\"room_id\""},
	RoomName:        whereHelperstring{field: "\"reading_room\".\"room_name\""},
	IsActive:        whereHelperbool{field: "\"reading_room\".\"is_active\""},
	IsReservable:    whereHelperbool{field: "\"reading_room\".\"is_reservable\""},
	Total:           whereHelperint{field: "\"reading_room\".\"total\""},
	ActiveTotal:     whereHelperint{field: "\"reading_room\".\"active_total\""},
	Occupied:        whereHelperint{field: "\"reading_room\".\"occupied\""},
	Available:       whereHelpernull_Int{field: "\"reading_room\".\"available\""},
	LastUpdatedTime: whereHelpernull_Time{field: "\"reading_room\".\"last_updated_time\""},
}

// ReadingRoomRels is where relationship names are stored.
var ReadingRoomRels = struct {
	Campus string
}{
	Campus: "Campus",
}

// readingRoomR is where relationships are stored.
type readingRoomR struct {
	Campus *Campus `boil:"Campus" json:"Campus" toml:"Campus" yaml:"Campus"`
}

// NewStruct creates a new relationship struct
func (*readingRoomR) NewStruct() *readingRoomR {
	return &readingRoomR{}
}

func (r *readingRoomR) GetCampus() *Campus {
	if r == nil {
		return nil
	}
	return r.Campus
}

// readingRoomL is where Load methods for each relationship are stored.
type readingRoomL struct{}

var (
	readingRoomAllColumns            = []string{"campus_id", "room_id", "room_name", "is_active", "is_reservable", "total", "active_total", "occupied", "available", "last_updated_time"}
	readingRoomColumnsWithoutDefault = []string{"campus_id", "room_id", "room_name", "is_active", "is_reservable", "total", "active_total", "occupied"}
	readingRoomColumnsWithDefault    = []string{"available", "last_updated_time"}
	readingRoomPrimaryKeyColumns     = []string{"room_id"}
	readingRoomGeneratedColumns      = []string{"available"}
)

type (
	// ReadingRoomSlice is an alias for a slice of pointers to ReadingRoom.
	// This should almost always be used instead of []ReadingRoom.
	ReadingRoomSlice []*ReadingRoom
	// ReadingRoomHook is the signature for custom ReadingRoom hook methods
	ReadingRoomHook func(context.Context, boil.ContextExecutor, *ReadingRoom) error

	readingRoomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	readingRoomType                 = reflect.TypeOf(&ReadingRoom{})
	readingRoomMapping              = queries.MakeStructMapping(readingRoomType)
	readingRoomPrimaryKeyMapping, _ = queries.BindMapping(readingRoomType, readingRoomMapping, readingRoomPrimaryKeyColumns)
	readingRoomInsertCacheMut       sync.RWMutex
	readingRoomInsertCache          = make(map[string]insertCache)
	readingRoomUpdateCacheMut       sync.RWMutex
	readingRoomUpdateCache          = make(map[string]updateCache)
	readingRoomUpsertCacheMut       sync.RWMutex
	readingRoomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var readingRoomAfterSelectHooks []ReadingRoomHook

var readingRoomBeforeInsertHooks []ReadingRoomHook
var readingRoomAfterInsertHooks []ReadingRoomHook

var readingRoomBeforeUpdateHooks []ReadingRoomHook
var readingRoomAfterUpdateHooks []ReadingRoomHook

var readingRoomBeforeDeleteHooks []ReadingRoomHook
var readingRoomAfterDeleteHooks []ReadingRoomHook

var readingRoomBeforeUpsertHooks []ReadingRoomHook
var readingRoomAfterUpsertHooks []ReadingRoomHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReadingRoom) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReadingRoom) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReadingRoom) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReadingRoom) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReadingRoom) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReadingRoom) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReadingRoom) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReadingRoom) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReadingRoom) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range readingRoomAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReadingRoomHook registers your hook function for all future operations.
func AddReadingRoomHook(hookPoint boil.HookPoint, readingRoomHook ReadingRoomHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		readingRoomAfterSelectHooks = append(readingRoomAfterSelectHooks, readingRoomHook)
	case boil.BeforeInsertHook:
		readingRoomBeforeInsertHooks = append(readingRoomBeforeInsertHooks, readingRoomHook)
	case boil.AfterInsertHook:
		readingRoomAfterInsertHooks = append(readingRoomAfterInsertHooks, readingRoomHook)
	case boil.BeforeUpdateHook:
		readingRoomBeforeUpdateHooks = append(readingRoomBeforeUpdateHooks, readingRoomHook)
	case boil.AfterUpdateHook:
		readingRoomAfterUpdateHooks = append(readingRoomAfterUpdateHooks, readingRoomHook)
	case boil.BeforeDeleteHook:
		readingRoomBeforeDeleteHooks = append(readingRoomBeforeDeleteHooks, readingRoomHook)
	case boil.AfterDeleteHook:
		readingRoomAfterDeleteHooks = append(readingRoomAfterDeleteHooks, readingRoomHook)
	case boil.BeforeUpsertHook:
		readingRoomBeforeUpsertHooks = append(readingRoomBeforeUpsertHooks, readingRoomHook)
	case boil.AfterUpsertHook:
		readingRoomAfterUpsertHooks = append(readingRoomAfterUpsertHooks, readingRoomHook)
	}
}

// One returns a single readingRoom record from the query.
func (q readingRoomQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReadingRoom, error) {
	o := &ReadingRoom{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reading_room")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReadingRoom records from the query.
func (q readingRoomQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReadingRoomSlice, error) {
	var o []*ReadingRoom

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReadingRoom slice")
	}

	if len(readingRoomAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReadingRoom records in the query.
func (q readingRoomQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reading_room rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q readingRoomQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reading_room exists")
	}

	return count > 0, nil
}

// Campus pointed to by the foreign key.
func (o *ReadingRoom) Campus(mods ...qm.QueryMod) campusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"campus_id\" = ?", o.CampusID),
	}

	queryMods = append(queryMods, mods...)

	return Campuses(queryMods...)
}

// LoadCampus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (readingRoomL) LoadCampus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReadingRoom interface{}, mods queries.Applicator) error {
	var slice []*ReadingRoom
	var object *ReadingRoom

	if singular {
		var ok bool
		object, ok = maybeReadingRoom.(*ReadingRoom)
		if !ok {
			object = new(ReadingRoom)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReadingRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReadingRoom))
			}
		}
	} else {
		s, ok := maybeReadingRoom.(*[]*ReadingRoom)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReadingRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReadingRoom))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &readingRoomR{}
		}
		args = append(args, object.CampusID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &readingRoomR{}
			}

			for _, a := range args {
				if a == obj.CampusID {
					continue Outer
				}
			}

			args = append(args, obj.CampusID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`campus`),
		qm.WhereIn(`campus.campus_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Campus")
	}

	var resultSlice []*Campus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Campus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for campus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for campus")
	}

	if len(campusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Campus = foreign
		if foreign.R == nil {
			foreign.R = &campusR{}
		}
		foreign.R.ReadingRooms = append(foreign.R.ReadingRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CampusID == foreign.CampusID {
				local.R.Campus = foreign
				if foreign.R == nil {
					foreign.R = &campusR{}
				}
				foreign.R.ReadingRooms = append(foreign.R.ReadingRooms, local)
				break
			}
		}
	}

	return nil
}

// SetCampus of the readingRoom to the related item.
// Sets o.R.Campus to related.
// Adds o to related.R.ReadingRooms.
func (o *ReadingRoom) SetCampus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Campus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reading_room\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"campus_id"}),
		strmangle.WhereClause("\"", "\"", 2, readingRoomPrimaryKeyColumns),
	)
	values := []interface{}{related.CampusID, o.RoomID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CampusID = related.CampusID
	if o.R == nil {
		o.R = &readingRoomR{
			Campus: related,
		}
	} else {
		o.R.Campus = related
	}

	if related.R == nil {
		related.R = &campusR{
			ReadingRooms: ReadingRoomSlice{o},
		}
	} else {
		related.R.ReadingRooms = append(related.R.ReadingRooms, o)
	}

	return nil
}

// ReadingRooms retrieves all the records using an executor.
func ReadingRooms(mods ...qm.QueryMod) readingRoomQuery {
	mods = append(mods, qm.From("\"reading_room\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reading_room\".*"})
	}

	return readingRoomQuery{q}
}

// FindReadingRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReadingRoom(ctx context.Context, exec boil.ContextExecutor, roomID int, selectCols ...string) (*ReadingRoom, error) {
	readingRoomObj := &ReadingRoom{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reading_room\" where \"room_id\"=$1", sel,
	)

	q := queries.Raw(query, roomID)

	err := q.Bind(ctx, exec, readingRoomObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reading_room")
	}

	if err = readingRoomObj.doAfterSelectHooks(ctx, exec); err != nil {
		return readingRoomObj, err
	}

	return readingRoomObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReadingRoom) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reading_room provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(readingRoomColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	readingRoomInsertCacheMut.RLock()
	cache, cached := readingRoomInsertCache[key]
	readingRoomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			readingRoomAllColumns,
			readingRoomColumnsWithDefault,
			readingRoomColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, readingRoomGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(readingRoomType, readingRoomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(readingRoomType, readingRoomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reading_room\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reading_room\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reading_room")
	}

	if !cached {
		readingRoomInsertCacheMut.Lock()
		readingRoomInsertCache[key] = cache
		readingRoomInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReadingRoom.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReadingRoom) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	readingRoomUpdateCacheMut.RLock()
	cache, cached := readingRoomUpdateCache[key]
	readingRoomUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			readingRoomAllColumns,
			readingRoomPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, readingRoomGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reading_room, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reading_room\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, readingRoomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(readingRoomType, readingRoomMapping, append(wl, readingRoomPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reading_room row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reading_room")
	}

	if !cached {
		readingRoomUpdateCacheMut.Lock()
		readingRoomUpdateCache[key] = cache
		readingRoomUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q readingRoomQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reading_room")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reading_room")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReadingRoomSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), readingRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reading_room\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, readingRoomPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in readingRoom slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all readingRoom")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReadingRoom) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reading_room provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(readingRoomColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	readingRoomUpsertCacheMut.RLock()
	cache, cached := readingRoomUpsertCache[key]
	readingRoomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			readingRoomAllColumns,
			readingRoomColumnsWithDefault,
			readingRoomColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			readingRoomAllColumns,
			readingRoomPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, readingRoomGeneratedColumns)
		update = strmangle.SetComplement(update, readingRoomGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reading_room, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(readingRoomPrimaryKeyColumns))
			copy(conflict, readingRoomPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reading_room\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(readingRoomType, readingRoomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(readingRoomType, readingRoomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reading_room")
	}

	if !cached {
		readingRoomUpsertCacheMut.Lock()
		readingRoomUpsertCache[key] = cache
		readingRoomUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReadingRoom record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReadingRoom) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReadingRoom provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), readingRoomPrimaryKeyMapping)
	sql := "DELETE FROM \"reading_room\" WHERE \"room_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reading_room")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reading_room")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q readingRoomQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no readingRoomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reading_room")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reading_room")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReadingRoomSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(readingRoomBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), readingRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reading_room\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, readingRoomPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from readingRoom slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reading_room")
	}

	if len(readingRoomAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReadingRoom) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReadingRoom(ctx, exec, o.RoomID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReadingRoomSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReadingRoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), readingRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reading_room\".* FROM \"reading_room\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, readingRoomPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReadingRoomSlice")
	}

	*o = slice

	return nil
}

// ReadingRoomExists checks if the ReadingRoom row exists.
func ReadingRoomExists(ctx context.Context, exec boil.ContextExecutor, roomID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reading_room\" where \"room_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, roomID)
	}
	row := exec.QueryRowContext(ctx, sql, roomID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reading_room exists")
	}

	return exists, nil
}

// Exists checks if the ReadingRoom row exists.
func (o *ReadingRoom) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReadingRoomExists(ctx, exec, o.RoomID)
}
