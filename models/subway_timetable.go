// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubwayTimetable is an object representing the database table.
type SubwayTimetable struct {
	StationID         string    `boil:"station_id" json:"stationID" toml:"stationID" yaml:"stationID"`
	StartStationID    string    `boil:"start_station_id" json:"startStationID" toml:"startStationID" yaml:"startStationID"`
	TerminalStationID string    `boil:"terminal_station_id" json:"terminalStationID" toml:"terminalStationID" yaml:"terminalStationID"`
	DepartureTime     time.Time `boil:"departure_time" json:"departureTime" toml:"departureTime" yaml:"departureTime"`
	Weekday           string    `boil:"weekday" json:"weekday" toml:"weekday" yaml:"weekday"`
	UpDownType        string    `boil:"up_down_type" json:"upDownType" toml:"upDownType" yaml:"upDownType"`

	R *subwayTimetableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subwayTimetableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubwayTimetableColumns = struct {
	StationID         string
	StartStationID    string
	TerminalStationID string
	DepartureTime     string
	Weekday           string
	UpDownType        string
}{
	StationID:         "station_id",
	StartStationID:    "start_station_id",
	TerminalStationID: "terminal_station_id",
	DepartureTime:     "departure_time",
	Weekday:           "weekday",
	UpDownType:        "up_down_type",
}

var SubwayTimetableTableColumns = struct {
	StationID         string
	StartStationID    string
	TerminalStationID string
	DepartureTime     string
	Weekday           string
	UpDownType        string
}{
	StationID:         "subway_timetable.station_id",
	StartStationID:    "subway_timetable.start_station_id",
	TerminalStationID: "subway_timetable.terminal_station_id",
	DepartureTime:     "subway_timetable.departure_time",
	Weekday:           "subway_timetable.weekday",
	UpDownType:        "subway_timetable.up_down_type",
}

// Generated where

var SubwayTimetableWhere = struct {
	StationID         whereHelperstring
	StartStationID    whereHelperstring
	TerminalStationID whereHelperstring
	DepartureTime     whereHelpertime_Time
	Weekday           whereHelperstring
	UpDownType        whereHelperstring
}{
	StationID:         whereHelperstring{field: "\"subway_timetable\".\"station_id\""},
	StartStationID:    whereHelperstring{field: "\"subway_timetable\".\"start_station_id\""},
	TerminalStationID: whereHelperstring{field: "\"subway_timetable\".\"terminal_station_id\""},
	DepartureTime:     whereHelpertime_Time{field: "\"subway_timetable\".\"departure_time\""},
	Weekday:           whereHelperstring{field: "\"subway_timetable\".\"weekday\""},
	UpDownType:        whereHelperstring{field: "\"subway_timetable\".\"up_down_type\""},
}

// SubwayTimetableRels is where relationship names are stored.
var SubwayTimetableRels = struct {
	StartStation    string
	Station         string
	TerminalStation string
}{
	StartStation:    "StartStation",
	Station:         "Station",
	TerminalStation: "TerminalStation",
}

// subwayTimetableR is where relationships are stored.
type subwayTimetableR struct {
	StartStation    *SubwayRouteStation `boil:"StartStation" json:"StartStation" toml:"StartStation" yaml:"StartStation"`
	Station         *SubwayRouteStation `boil:"Station" json:"Station" toml:"Station" yaml:"Station"`
	TerminalStation *SubwayRouteStation `boil:"TerminalStation" json:"TerminalStation" toml:"TerminalStation" yaml:"TerminalStation"`
}

// NewStruct creates a new relationship struct
func (*subwayTimetableR) NewStruct() *subwayTimetableR {
	return &subwayTimetableR{}
}

func (r *subwayTimetableR) GetStartStation() *SubwayRouteStation {
	if r == nil {
		return nil
	}
	return r.StartStation
}

func (r *subwayTimetableR) GetStation() *SubwayRouteStation {
	if r == nil {
		return nil
	}
	return r.Station
}

func (r *subwayTimetableR) GetTerminalStation() *SubwayRouteStation {
	if r == nil {
		return nil
	}
	return r.TerminalStation
}

// subwayTimetableL is where Load methods for each relationship are stored.
type subwayTimetableL struct{}

var (
	subwayTimetableAllColumns            = []string{"station_id", "start_station_id", "terminal_station_id", "departure_time", "weekday", "up_down_type"}
	subwayTimetableColumnsWithoutDefault = []string{"station_id", "start_station_id", "terminal_station_id", "departure_time", "weekday", "up_down_type"}
	subwayTimetableColumnsWithDefault    = []string{}
	subwayTimetablePrimaryKeyColumns     = []string{"station_id", "up_down_type", "weekday", "departure_time"}
	subwayTimetableGeneratedColumns      = []string{}
)

type (
	// SubwayTimetableSlice is an alias for a slice of pointers to SubwayTimetable.
	// This should almost always be used instead of []SubwayTimetable.
	SubwayTimetableSlice []*SubwayTimetable
	// SubwayTimetableHook is the signature for custom SubwayTimetable hook methods
	SubwayTimetableHook func(context.Context, boil.ContextExecutor, *SubwayTimetable) error

	subwayTimetableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subwayTimetableType                 = reflect.TypeOf(&SubwayTimetable{})
	subwayTimetableMapping              = queries.MakeStructMapping(subwayTimetableType)
	subwayTimetablePrimaryKeyMapping, _ = queries.BindMapping(subwayTimetableType, subwayTimetableMapping, subwayTimetablePrimaryKeyColumns)
	subwayTimetableInsertCacheMut       sync.RWMutex
	subwayTimetableInsertCache          = make(map[string]insertCache)
	subwayTimetableUpdateCacheMut       sync.RWMutex
	subwayTimetableUpdateCache          = make(map[string]updateCache)
	subwayTimetableUpsertCacheMut       sync.RWMutex
	subwayTimetableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subwayTimetableAfterSelectHooks []SubwayTimetableHook

var subwayTimetableBeforeInsertHooks []SubwayTimetableHook
var subwayTimetableAfterInsertHooks []SubwayTimetableHook

var subwayTimetableBeforeUpdateHooks []SubwayTimetableHook
var subwayTimetableAfterUpdateHooks []SubwayTimetableHook

var subwayTimetableBeforeDeleteHooks []SubwayTimetableHook
var subwayTimetableAfterDeleteHooks []SubwayTimetableHook

var subwayTimetableBeforeUpsertHooks []SubwayTimetableHook
var subwayTimetableAfterUpsertHooks []SubwayTimetableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SubwayTimetable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SubwayTimetable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SubwayTimetable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SubwayTimetable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SubwayTimetable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SubwayTimetable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SubwayTimetable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SubwayTimetable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SubwayTimetable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subwayTimetableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubwayTimetableHook registers your hook function for all future operations.
func AddSubwayTimetableHook(hookPoint boil.HookPoint, subwayTimetableHook SubwayTimetableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		subwayTimetableAfterSelectHooks = append(subwayTimetableAfterSelectHooks, subwayTimetableHook)
	case boil.BeforeInsertHook:
		subwayTimetableBeforeInsertHooks = append(subwayTimetableBeforeInsertHooks, subwayTimetableHook)
	case boil.AfterInsertHook:
		subwayTimetableAfterInsertHooks = append(subwayTimetableAfterInsertHooks, subwayTimetableHook)
	case boil.BeforeUpdateHook:
		subwayTimetableBeforeUpdateHooks = append(subwayTimetableBeforeUpdateHooks, subwayTimetableHook)
	case boil.AfterUpdateHook:
		subwayTimetableAfterUpdateHooks = append(subwayTimetableAfterUpdateHooks, subwayTimetableHook)
	case boil.BeforeDeleteHook:
		subwayTimetableBeforeDeleteHooks = append(subwayTimetableBeforeDeleteHooks, subwayTimetableHook)
	case boil.AfterDeleteHook:
		subwayTimetableAfterDeleteHooks = append(subwayTimetableAfterDeleteHooks, subwayTimetableHook)
	case boil.BeforeUpsertHook:
		subwayTimetableBeforeUpsertHooks = append(subwayTimetableBeforeUpsertHooks, subwayTimetableHook)
	case boil.AfterUpsertHook:
		subwayTimetableAfterUpsertHooks = append(subwayTimetableAfterUpsertHooks, subwayTimetableHook)
	}
}

// One returns a single subwayTimetable record from the query.
func (q subwayTimetableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubwayTimetable, error) {
	o := &SubwayTimetable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subway_timetable")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SubwayTimetable records from the query.
func (q subwayTimetableQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubwayTimetableSlice, error) {
	var o []*SubwayTimetable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubwayTimetable slice")
	}

	if len(subwayTimetableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SubwayTimetable records in the query.
func (q subwayTimetableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subway_timetable rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subwayTimetableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subway_timetable exists")
	}

	return count > 0, nil
}

// StartStation pointed to by the foreign key.
func (o *SubwayTimetable) StartStation(mods ...qm.QueryMod) subwayRouteStationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"station_id\" = ?", o.StartStationID),
	}

	queryMods = append(queryMods, mods...)

	return SubwayRouteStations(queryMods...)
}

// Station pointed to by the foreign key.
func (o *SubwayTimetable) Station(mods ...qm.QueryMod) subwayRouteStationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"station_id\" = ?", o.StationID),
	}

	queryMods = append(queryMods, mods...)

	return SubwayRouteStations(queryMods...)
}

// TerminalStation pointed to by the foreign key.
func (o *SubwayTimetable) TerminalStation(mods ...qm.QueryMod) subwayRouteStationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"station_id\" = ?", o.TerminalStationID),
	}

	queryMods = append(queryMods, mods...)

	return SubwayRouteStations(queryMods...)
}

// LoadStartStation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayTimetableL) LoadStartStation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayTimetable interface{}, mods queries.Applicator) error {
	var slice []*SubwayTimetable
	var object *SubwayTimetable

	if singular {
		var ok bool
		object, ok = maybeSubwayTimetable.(*SubwayTimetable)
		if !ok {
			object = new(SubwayTimetable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayTimetable))
			}
		}
	} else {
		s, ok := maybeSubwayTimetable.(*[]*SubwayTimetable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayTimetable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayTimetableR{}
		}
		args = append(args, object.StartStationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayTimetableR{}
			}

			for _, a := range args {
				if a == obj.StartStationID {
					continue Outer
				}
			}

			args = append(args, obj.StartStationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route_station`),
		qm.WhereIn(`subway_route_station.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayRouteStation")
	}

	var resultSlice []*SubwayRouteStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayRouteStation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_route_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route_station")
	}

	if len(subwayRouteStationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StartStation = foreign
		if foreign.R == nil {
			foreign.R = &subwayRouteStationR{}
		}
		foreign.R.StartStationSubwayTimetables = append(foreign.R.StartStationSubwayTimetables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StartStationID == foreign.StationID {
				local.R.StartStation = foreign
				if foreign.R == nil {
					foreign.R = &subwayRouteStationR{}
				}
				foreign.R.StartStationSubwayTimetables = append(foreign.R.StartStationSubwayTimetables, local)
				break
			}
		}
	}

	return nil
}

// LoadStation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayTimetableL) LoadStation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayTimetable interface{}, mods queries.Applicator) error {
	var slice []*SubwayTimetable
	var object *SubwayTimetable

	if singular {
		var ok bool
		object, ok = maybeSubwayTimetable.(*SubwayTimetable)
		if !ok {
			object = new(SubwayTimetable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayTimetable))
			}
		}
	} else {
		s, ok := maybeSubwayTimetable.(*[]*SubwayTimetable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayTimetable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayTimetableR{}
		}
		args = append(args, object.StationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayTimetableR{}
			}

			for _, a := range args {
				if a == obj.StationID {
					continue Outer
				}
			}

			args = append(args, obj.StationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route_station`),
		qm.WhereIn(`subway_route_station.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayRouteStation")
	}

	var resultSlice []*SubwayRouteStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayRouteStation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_route_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route_station")
	}

	if len(subwayRouteStationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Station = foreign
		if foreign.R == nil {
			foreign.R = &subwayRouteStationR{}
		}
		foreign.R.StationSubwayTimetables = append(foreign.R.StationSubwayTimetables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StationID == foreign.StationID {
				local.R.Station = foreign
				if foreign.R == nil {
					foreign.R = &subwayRouteStationR{}
				}
				foreign.R.StationSubwayTimetables = append(foreign.R.StationSubwayTimetables, local)
				break
			}
		}
	}

	return nil
}

// LoadTerminalStation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subwayTimetableL) LoadTerminalStation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubwayTimetable interface{}, mods queries.Applicator) error {
	var slice []*SubwayTimetable
	var object *SubwayTimetable

	if singular {
		var ok bool
		object, ok = maybeSubwayTimetable.(*SubwayTimetable)
		if !ok {
			object = new(SubwayTimetable)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubwayTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubwayTimetable))
			}
		}
	} else {
		s, ok := maybeSubwayTimetable.(*[]*SubwayTimetable)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubwayTimetable)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubwayTimetable))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subwayTimetableR{}
		}
		args = append(args, object.TerminalStationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subwayTimetableR{}
			}

			for _, a := range args {
				if a == obj.TerminalStationID {
					continue Outer
				}
			}

			args = append(args, obj.TerminalStationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`subway_route_station`),
		qm.WhereIn(`subway_route_station.station_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SubwayRouteStation")
	}

	var resultSlice []*SubwayRouteStation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SubwayRouteStation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subway_route_station")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subway_route_station")
	}

	if len(subwayRouteStationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TerminalStation = foreign
		if foreign.R == nil {
			foreign.R = &subwayRouteStationR{}
		}
		foreign.R.TerminalStationSubwayTimetables = append(foreign.R.TerminalStationSubwayTimetables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TerminalStationID == foreign.StationID {
				local.R.TerminalStation = foreign
				if foreign.R == nil {
					foreign.R = &subwayRouteStationR{}
				}
				foreign.R.TerminalStationSubwayTimetables = append(foreign.R.TerminalStationSubwayTimetables, local)
				break
			}
		}
	}

	return nil
}

// SetStartStation of the subwayTimetable to the related item.
// Sets o.R.StartStation to related.
// Adds o to related.R.StartStationSubwayTimetables.
func (o *SubwayTimetable) SetStartStation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayRouteStation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"start_station_id"}),
		strmangle.WhereClause("\"", "\"", 2, subwayTimetablePrimaryKeyColumns),
	)
	values := []interface{}{related.StationID, o.StationID, o.UpDownType, o.Weekday, o.DepartureTime}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StartStationID = related.StationID
	if o.R == nil {
		o.R = &subwayTimetableR{
			StartStation: related,
		}
	} else {
		o.R.StartStation = related
	}

	if related.R == nil {
		related.R = &subwayRouteStationR{
			StartStationSubwayTimetables: SubwayTimetableSlice{o},
		}
	} else {
		related.R.StartStationSubwayTimetables = append(related.R.StartStationSubwayTimetables, o)
	}

	return nil
}

// SetStation of the subwayTimetable to the related item.
// Sets o.R.Station to related.
// Adds o to related.R.StationSubwayTimetables.
func (o *SubwayTimetable) SetStation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayRouteStation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"station_id"}),
		strmangle.WhereClause("\"", "\"", 2, subwayTimetablePrimaryKeyColumns),
	)
	values := []interface{}{related.StationID, o.StationID, o.UpDownType, o.Weekday, o.DepartureTime}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StationID = related.StationID
	if o.R == nil {
		o.R = &subwayTimetableR{
			Station: related,
		}
	} else {
		o.R.Station = related
	}

	if related.R == nil {
		related.R = &subwayRouteStationR{
			StationSubwayTimetables: SubwayTimetableSlice{o},
		}
	} else {
		related.R.StationSubwayTimetables = append(related.R.StationSubwayTimetables, o)
	}

	return nil
}

// SetTerminalStation of the subwayTimetable to the related item.
// Sets o.R.TerminalStation to related.
// Adds o to related.R.TerminalStationSubwayTimetables.
func (o *SubwayTimetable) SetTerminalStation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SubwayRouteStation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subway_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"terminal_station_id"}),
		strmangle.WhereClause("\"", "\"", 2, subwayTimetablePrimaryKeyColumns),
	)
	values := []interface{}{related.StationID, o.StationID, o.UpDownType, o.Weekday, o.DepartureTime}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TerminalStationID = related.StationID
	if o.R == nil {
		o.R = &subwayTimetableR{
			TerminalStation: related,
		}
	} else {
		o.R.TerminalStation = related
	}

	if related.R == nil {
		related.R = &subwayRouteStationR{
			TerminalStationSubwayTimetables: SubwayTimetableSlice{o},
		}
	} else {
		related.R.TerminalStationSubwayTimetables = append(related.R.TerminalStationSubwayTimetables, o)
	}

	return nil
}

// SubwayTimetables retrieves all the records using an executor.
func SubwayTimetables(mods ...qm.QueryMod) subwayTimetableQuery {
	mods = append(mods, qm.From("\"subway_timetable\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subway_timetable\".*"})
	}

	return subwayTimetableQuery{q}
}

// FindSubwayTimetable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubwayTimetable(ctx context.Context, exec boil.ContextExecutor, stationID string, upDownType string, weekday string, departureTime time.Time, selectCols ...string) (*SubwayTimetable, error) {
	subwayTimetableObj := &SubwayTimetable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subway_timetable\" where \"station_id\"=$1 AND \"up_down_type\"=$2 AND \"weekday\"=$3 AND \"departure_time\"=$4", sel,
	)

	q := queries.Raw(query, stationID, upDownType, weekday, departureTime)

	err := q.Bind(ctx, exec, subwayTimetableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subway_timetable")
	}

	if err = subwayTimetableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return subwayTimetableObj, err
	}

	return subwayTimetableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubwayTimetable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_timetable provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subwayTimetableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subwayTimetableInsertCacheMut.RLock()
	cache, cached := subwayTimetableInsertCache[key]
	subwayTimetableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subwayTimetableAllColumns,
			subwayTimetableColumnsWithDefault,
			subwayTimetableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subwayTimetableType, subwayTimetableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subwayTimetableType, subwayTimetableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subway_timetable\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subway_timetable\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subway_timetable")
	}

	if !cached {
		subwayTimetableInsertCacheMut.Lock()
		subwayTimetableInsertCache[key] = cache
		subwayTimetableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SubwayTimetable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubwayTimetable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subwayTimetableUpdateCacheMut.RLock()
	cache, cached := subwayTimetableUpdateCache[key]
	subwayTimetableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subwayTimetableAllColumns,
			subwayTimetablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subway_timetable, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subway_timetable\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subwayTimetablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subwayTimetableType, subwayTimetableMapping, append(wl, subwayTimetablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subway_timetable row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subway_timetable")
	}

	if !cached {
		subwayTimetableUpdateCacheMut.Lock()
		subwayTimetableUpdateCache[key] = cache
		subwayTimetableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subwayTimetableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subway_timetable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subway_timetable")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubwayTimetableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayTimetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subway_timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subwayTimetablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subwayTimetable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subwayTimetable")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubwayTimetable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subway_timetable provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subwayTimetableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subwayTimetableUpsertCacheMut.RLock()
	cache, cached := subwayTimetableUpsertCache[key]
	subwayTimetableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subwayTimetableAllColumns,
			subwayTimetableColumnsWithDefault,
			subwayTimetableColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subwayTimetableAllColumns,
			subwayTimetablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert subway_timetable, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subwayTimetablePrimaryKeyColumns))
			copy(conflict, subwayTimetablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subway_timetable\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subwayTimetableType, subwayTimetableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subwayTimetableType, subwayTimetableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert subway_timetable")
	}

	if !cached {
		subwayTimetableUpsertCacheMut.Lock()
		subwayTimetableUpsertCache[key] = cache
		subwayTimetableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SubwayTimetable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubwayTimetable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubwayTimetable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subwayTimetablePrimaryKeyMapping)
	sql := "DELETE FROM \"subway_timetable\" WHERE \"station_id\"=$1 AND \"up_down_type\"=$2 AND \"weekday\"=$3 AND \"departure_time\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subway_timetable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subway_timetable")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subwayTimetableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subwayTimetableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subway_timetable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_timetable")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubwayTimetableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subwayTimetableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayTimetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subway_timetable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayTimetablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subwayTimetable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subway_timetable")
	}

	if len(subwayTimetableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubwayTimetable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubwayTimetable(ctx, exec, o.StationID, o.UpDownType, o.Weekday, o.DepartureTime)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubwayTimetableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubwayTimetableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subwayTimetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subway_timetable\".* FROM \"subway_timetable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subwayTimetablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubwayTimetableSlice")
	}

	*o = slice

	return nil
}

// SubwayTimetableExists checks if the SubwayTimetable row exists.
func SubwayTimetableExists(ctx context.Context, exec boil.ContextExecutor, stationID string, upDownType string, weekday string, departureTime time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subway_timetable\" where \"station_id\"=$1 AND \"up_down_type\"=$2 AND \"weekday\"=$3 AND \"departure_time\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stationID, upDownType, weekday, departureTime)
	}
	row := exec.QueryRowContext(ctx, sql, stationID, upDownType, weekday, departureTime)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subway_timetable exists")
	}

	return exists, nil
}

// Exists checks if the SubwayTimetable row exists.
func (o *SubwayTimetable) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubwayTimetableExists(ctx, exec, o.StationID, o.UpDownType, o.Weekday, o.DepartureTime)
}
