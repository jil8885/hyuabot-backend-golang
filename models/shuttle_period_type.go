// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttlePeriodType is an object representing the database table.
type ShuttlePeriodType struct {
	PeriodType string `boil:"period_type" json:"periodType" toml:"periodType" yaml:"periodType"`

	R *shuttlePeriodTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shuttlePeriodTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShuttlePeriodTypeColumns = struct {
	PeriodType string
}{
	PeriodType: "period_type",
}

var ShuttlePeriodTypeTableColumns = struct {
	PeriodType string
}{
	PeriodType: "shuttle_period_type.period_type",
}

// Generated where

var ShuttlePeriodTypeWhere = struct {
	PeriodType whereHelperstring
}{
	PeriodType: whereHelperstring{field: "\"shuttle_period_type\".\"period_type\""},
}

// ShuttlePeriodTypeRels is where relationship names are stored.
var ShuttlePeriodTypeRels = struct {
	PeriodTypeShuttlePeriods    string
	PeriodTypeShuttleTimetables string
}{
	PeriodTypeShuttlePeriods:    "PeriodTypeShuttlePeriods",
	PeriodTypeShuttleTimetables: "PeriodTypeShuttleTimetables",
}

// shuttlePeriodTypeR is where relationships are stored.
type shuttlePeriodTypeR struct {
	PeriodTypeShuttlePeriods    ShuttlePeriodSlice    `boil:"PeriodTypeShuttlePeriods" json:"PeriodTypeShuttlePeriods" toml:"PeriodTypeShuttlePeriods" yaml:"PeriodTypeShuttlePeriods"`
	PeriodTypeShuttleTimetables ShuttleTimetableSlice `boil:"PeriodTypeShuttleTimetables" json:"PeriodTypeShuttleTimetables" toml:"PeriodTypeShuttleTimetables" yaml:"PeriodTypeShuttleTimetables"`
}

// NewStruct creates a new relationship struct
func (*shuttlePeriodTypeR) NewStruct() *shuttlePeriodTypeR {
	return &shuttlePeriodTypeR{}
}

func (r *shuttlePeriodTypeR) GetPeriodTypeShuttlePeriods() ShuttlePeriodSlice {
	if r == nil {
		return nil
	}
	return r.PeriodTypeShuttlePeriods
}

func (r *shuttlePeriodTypeR) GetPeriodTypeShuttleTimetables() ShuttleTimetableSlice {
	if r == nil {
		return nil
	}
	return r.PeriodTypeShuttleTimetables
}

// shuttlePeriodTypeL is where Load methods for each relationship are stored.
type shuttlePeriodTypeL struct{}

var (
	shuttlePeriodTypeAllColumns            = []string{"period_type"}
	shuttlePeriodTypeColumnsWithoutDefault = []string{"period_type"}
	shuttlePeriodTypeColumnsWithDefault    = []string{}
	shuttlePeriodTypePrimaryKeyColumns     = []string{"period_type"}
	shuttlePeriodTypeGeneratedColumns      = []string{}
)

type (
	// ShuttlePeriodTypeSlice is an alias for a slice of pointers to ShuttlePeriodType.
	// This should almost always be used instead of []ShuttlePeriodType.
	ShuttlePeriodTypeSlice []*ShuttlePeriodType

	shuttlePeriodTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttlePeriodTypeType                 = reflect.TypeOf(&ShuttlePeriodType{})
	shuttlePeriodTypeMapping              = queries.MakeStructMapping(shuttlePeriodTypeType)
	shuttlePeriodTypePrimaryKeyMapping, _ = queries.BindMapping(shuttlePeriodTypeType, shuttlePeriodTypeMapping, shuttlePeriodTypePrimaryKeyColumns)
	shuttlePeriodTypeInsertCacheMut       sync.RWMutex
	shuttlePeriodTypeInsertCache          = make(map[string]insertCache)
	shuttlePeriodTypeUpdateCacheMut       sync.RWMutex
	shuttlePeriodTypeUpdateCache          = make(map[string]updateCache)
	shuttlePeriodTypeUpsertCacheMut       sync.RWMutex
	shuttlePeriodTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shuttlePeriodType record from the query.
func (q shuttlePeriodTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttlePeriodType, error) {
	o := &ShuttlePeriodType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_period_type")
	}

	return o, nil
}

// All returns all ShuttlePeriodType records from the query.
func (q shuttlePeriodTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttlePeriodTypeSlice, error) {
	var o []*ShuttlePeriodType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttlePeriodType slice")
	}

	return o, nil
}

// Count returns the count of all ShuttlePeriodType records in the query.
func (q shuttlePeriodTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_period_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttlePeriodTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_period_type exists")
	}

	return count > 0, nil
}

// PeriodTypeShuttlePeriods retrieves all the shuttle_period's ShuttlePeriods with an executor via period_type column.
func (o *ShuttlePeriodType) PeriodTypeShuttlePeriods(mods ...qm.QueryMod) shuttlePeriodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_period\".\"period_type\"=?", o.PeriodType),
	)

	return ShuttlePeriods(queryMods...)
}

// PeriodTypeShuttleTimetables retrieves all the shuttle_timetable's ShuttleTimetables with an executor via period_type column.
func (o *ShuttlePeriodType) PeriodTypeShuttleTimetables(mods ...qm.QueryMod) shuttleTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_timetable\".\"period_type\"=?", o.PeriodType),
	)

	return ShuttleTimetables(queryMods...)
}

// LoadPeriodTypeShuttlePeriods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttlePeriodTypeL) LoadPeriodTypeShuttlePeriods(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttlePeriodType interface{}, mods queries.Applicator) error {
	var slice []*ShuttlePeriodType
	var object *ShuttlePeriodType

	if singular {
		var ok bool
		object, ok = maybeShuttlePeriodType.(*ShuttlePeriodType)
		if !ok {
			object = new(ShuttlePeriodType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttlePeriodType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttlePeriodType))
			}
		}
	} else {
		s, ok := maybeShuttlePeriodType.(*[]*ShuttlePeriodType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttlePeriodType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttlePeriodType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttlePeriodTypeR{}
		}
		args = append(args, object.PeriodType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttlePeriodTypeR{}
			}

			for _, a := range args {
				if a == obj.PeriodType {
					continue Outer
				}
			}

			args = append(args, obj.PeriodType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_period`),
		qm.WhereIn(`shuttle_period.period_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_period")
	}

	var resultSlice []*ShuttlePeriod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_period")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_period")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_period")
	}

	if singular {
		object.R.PeriodTypeShuttlePeriods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttlePeriodR{}
			}
			foreign.R.PeriodTypeShuttlePeriodType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PeriodType == foreign.PeriodType {
				local.R.PeriodTypeShuttlePeriods = append(local.R.PeriodTypeShuttlePeriods, foreign)
				if foreign.R == nil {
					foreign.R = &shuttlePeriodR{}
				}
				foreign.R.PeriodTypeShuttlePeriodType = local
				break
			}
		}
	}

	return nil
}

// LoadPeriodTypeShuttleTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttlePeriodTypeL) LoadPeriodTypeShuttleTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttlePeriodType interface{}, mods queries.Applicator) error {
	var slice []*ShuttlePeriodType
	var object *ShuttlePeriodType

	if singular {
		var ok bool
		object, ok = maybeShuttlePeriodType.(*ShuttlePeriodType)
		if !ok {
			object = new(ShuttlePeriodType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttlePeriodType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttlePeriodType))
			}
		}
	} else {
		s, ok := maybeShuttlePeriodType.(*[]*ShuttlePeriodType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttlePeriodType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttlePeriodType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttlePeriodTypeR{}
		}
		args = append(args, object.PeriodType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttlePeriodTypeR{}
			}

			for _, a := range args {
				if a == obj.PeriodType {
					continue Outer
				}
			}

			args = append(args, obj.PeriodType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_timetable`),
		qm.WhereIn(`shuttle_timetable.period_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_timetable")
	}

	var resultSlice []*ShuttleTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_timetable")
	}

	if singular {
		object.R.PeriodTypeShuttleTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttleTimetableR{}
			}
			foreign.R.PeriodTypeShuttlePeriodType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PeriodType == foreign.PeriodType {
				local.R.PeriodTypeShuttleTimetables = append(local.R.PeriodTypeShuttleTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &shuttleTimetableR{}
				}
				foreign.R.PeriodTypeShuttlePeriodType = local
				break
			}
		}
	}

	return nil
}

// AddPeriodTypeShuttlePeriods adds the given related objects to the existing relationships
// of the shuttle_period_type, optionally inserting them as new records.
// Appends related to o.R.PeriodTypeShuttlePeriods.
// Sets related.R.PeriodTypeShuttlePeriodType appropriately.
func (o *ShuttlePeriodType) AddPeriodTypeShuttlePeriods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttlePeriod) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PeriodType = o.PeriodType
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_period\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"period_type"}),
				strmangle.WhereClause("\"", "\"", 2, shuttlePeriodPrimaryKeyColumns),
			)
			values := []interface{}{o.PeriodType, rel.PeriodType, rel.PeriodStart, rel.PeriodEnd}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PeriodType = o.PeriodType
		}
	}

	if o.R == nil {
		o.R = &shuttlePeriodTypeR{
			PeriodTypeShuttlePeriods: related,
		}
	} else {
		o.R.PeriodTypeShuttlePeriods = append(o.R.PeriodTypeShuttlePeriods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttlePeriodR{
				PeriodTypeShuttlePeriodType: o,
			}
		} else {
			rel.R.PeriodTypeShuttlePeriodType = o
		}
	}
	return nil
}

// AddPeriodTypeShuttleTimetables adds the given related objects to the existing relationships
// of the shuttle_period_type, optionally inserting them as new records.
// Appends related to o.R.PeriodTypeShuttleTimetables.
// Sets related.R.PeriodTypeShuttlePeriodType appropriately.
func (o *ShuttlePeriodType) AddPeriodTypeShuttleTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PeriodType = o.PeriodType
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"period_type"}),
				strmangle.WhereClause("\"", "\"", 2, shuttleTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.PeriodType, rel.Seq}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PeriodType = o.PeriodType
		}
	}

	if o.R == nil {
		o.R = &shuttlePeriodTypeR{
			PeriodTypeShuttleTimetables: related,
		}
	} else {
		o.R.PeriodTypeShuttleTimetables = append(o.R.PeriodTypeShuttleTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttleTimetableR{
				PeriodTypeShuttlePeriodType: o,
			}
		} else {
			rel.R.PeriodTypeShuttlePeriodType = o
		}
	}
	return nil
}

// ShuttlePeriodTypes retrieves all the records using an executor.
func ShuttlePeriodTypes(mods ...qm.QueryMod) shuttlePeriodTypeQuery {
	mods = append(mods, qm.From("\"shuttle_period_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_period_type\".*"})
	}

	return shuttlePeriodTypeQuery{q}
}

// FindShuttlePeriodType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShuttlePeriodType(ctx context.Context, exec boil.ContextExecutor, periodType string, selectCols ...string) (*ShuttlePeriodType, error) {
	shuttlePeriodTypeObj := &ShuttlePeriodType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shuttle_period_type\" where \"period_type\"=$1", sel,
	)

	q := queries.Raw(query, periodType)

	err := q.Bind(ctx, exec, shuttlePeriodTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shuttle_period_type")
	}

	return shuttlePeriodTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShuttlePeriodType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_period_type provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shuttlePeriodTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shuttlePeriodTypeInsertCacheMut.RLock()
	cache, cached := shuttlePeriodTypeInsertCache[key]
	shuttlePeriodTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shuttlePeriodTypeAllColumns,
			shuttlePeriodTypeColumnsWithDefault,
			shuttlePeriodTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shuttlePeriodTypeType, shuttlePeriodTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shuttlePeriodTypeType, shuttlePeriodTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shuttle_period_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shuttle_period_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shuttle_period_type")
	}

	if !cached {
		shuttlePeriodTypeInsertCacheMut.Lock()
		shuttlePeriodTypeInsertCache[key] = cache
		shuttlePeriodTypeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShuttlePeriodType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShuttlePeriodType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shuttlePeriodTypeUpdateCacheMut.RLock()
	cache, cached := shuttlePeriodTypeUpdateCache[key]
	shuttlePeriodTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shuttlePeriodTypeAllColumns,
			shuttlePeriodTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shuttle_period_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shuttle_period_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shuttlePeriodTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shuttlePeriodTypeType, shuttlePeriodTypeMapping, append(wl, shuttlePeriodTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shuttle_period_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shuttle_period_type")
	}

	if !cached {
		shuttlePeriodTypeUpdateCacheMut.Lock()
		shuttlePeriodTypeUpdateCache[key] = cache
		shuttlePeriodTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shuttlePeriodTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shuttle_period_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shuttle_period_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShuttlePeriodTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttlePeriodTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shuttle_period_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shuttlePeriodTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shuttlePeriodType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shuttlePeriodType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShuttlePeriodType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_period_type provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttlePeriodTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shuttlePeriodTypeUpsertCacheMut.RLock()
	cache, cached := shuttlePeriodTypeUpsertCache[key]
	shuttlePeriodTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shuttlePeriodTypeAllColumns,
			shuttlePeriodTypeColumnsWithDefault,
			shuttlePeriodTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shuttlePeriodTypeAllColumns,
			shuttlePeriodTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shuttle_period_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shuttlePeriodTypePrimaryKeyColumns))
			copy(conflict, shuttlePeriodTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shuttle_period_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shuttlePeriodTypeType, shuttlePeriodTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shuttlePeriodTypeType, shuttlePeriodTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shuttle_period_type")
	}

	if !cached {
		shuttlePeriodTypeUpsertCacheMut.Lock()
		shuttlePeriodTypeUpsertCache[key] = cache
		shuttlePeriodTypeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShuttlePeriodType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShuttlePeriodType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShuttlePeriodType provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shuttlePeriodTypePrimaryKeyMapping)
	sql := "DELETE FROM \"shuttle_period_type\" WHERE \"period_type\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shuttle_period_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shuttle_period_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shuttlePeriodTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shuttlePeriodTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttle_period_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_period_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShuttlePeriodTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttlePeriodTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shuttle_period_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttlePeriodTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttlePeriodType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_period_type")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShuttlePeriodType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShuttlePeriodType(ctx, exec, o.PeriodType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShuttlePeriodTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShuttlePeriodTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttlePeriodTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shuttle_period_type\".* FROM \"shuttle_period_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttlePeriodTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShuttlePeriodTypeSlice")
	}

	*o = slice

	return nil
}

// ShuttlePeriodTypeExists checks if the ShuttlePeriodType row exists.
func ShuttlePeriodTypeExists(ctx context.Context, exec boil.ContextExecutor, periodType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shuttle_period_type\" where \"period_type\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, periodType)
	}
	row := exec.QueryRowContext(ctx, sql, periodType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shuttle_period_type exists")
	}

	return exists, nil
}

// Exists checks if the ShuttlePeriodType row exists.
func (o *ShuttlePeriodType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShuttlePeriodTypeExists(ctx, exec, o.PeriodType)
}
