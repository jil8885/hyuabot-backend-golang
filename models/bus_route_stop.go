// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusRouteStop is an object representing the database table.
type BusRouteStop struct {
	RouteID      int    `boil:"route_id" json:"routeID" toml:"routeID" yaml:"routeID"`
	StopID       int    `boil:"stop_id" json:"stopID" toml:"stopID" yaml:"stopID"`
	RouteStopID  string `boil:"route_stop_id" json:"routeStopID" toml:"routeStopID" yaml:"routeStopID"`
	StopSequence int    `boil:"stop_sequence" json:"stopSequence" toml:"stopSequence" yaml:"stopSequence"`
	StartStopID  int    `boil:"start_stop_id" json:"startStopID" toml:"startStopID" yaml:"startStopID"`

	R *busRouteStopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L busRouteStopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusRouteStopColumns = struct {
	RouteID      string
	StopID       string
	RouteStopID  string
	StopSequence string
	StartStopID  string
}{
	RouteID:      "route_id",
	StopID:       "stop_id",
	RouteStopID:  "route_stop_id",
	StopSequence: "stop_sequence",
	StartStopID:  "start_stop_id",
}

var BusRouteStopTableColumns = struct {
	RouteID      string
	StopID       string
	RouteStopID  string
	StopSequence string
	StartStopID  string
}{
	RouteID:      "bus_route_stop.route_id",
	StopID:       "bus_route_stop.stop_id",
	RouteStopID:  "bus_route_stop.route_stop_id",
	StopSequence: "bus_route_stop.stop_sequence",
	StartStopID:  "bus_route_stop.start_stop_id",
}

// Generated where

var BusRouteStopWhere = struct {
	RouteID      whereHelperint
	StopID       whereHelperint
	RouteStopID  whereHelperstring
	StopSequence whereHelperint
	StartStopID  whereHelperint
}{
	RouteID:      whereHelperint{field: "\"bus_route_stop\".\"route_id\""},
	StopID:       whereHelperint{field: "\"bus_route_stop\".\"stop_id\""},
	RouteStopID:  whereHelperstring{field: "\"bus_route_stop\".\"route_stop_id\""},
	StopSequence: whereHelperint{field: "\"bus_route_stop\".\"stop_sequence\""},
	StartStopID:  whereHelperint{field: "\"bus_route_stop\".\"start_stop_id\""},
}

// BusRouteStopRels is where relationship names are stored.
var BusRouteStopRels = struct {
	Route     string
	StartStop string
	Stop      string
}{
	Route:     "Route",
	StartStop: "StartStop",
	Stop:      "Stop",
}

// busRouteStopR is where relationships are stored.
type busRouteStopR struct {
	Route     *BusRoute `boil:"Route" json:"Route" toml:"Route" yaml:"Route"`
	StartStop *BusStop  `boil:"StartStop" json:"StartStop" toml:"StartStop" yaml:"StartStop"`
	Stop      *BusStop  `boil:"Stop" json:"Stop" toml:"Stop" yaml:"Stop"`
}

// NewStruct creates a new relationship struct
func (*busRouteStopR) NewStruct() *busRouteStopR {
	return &busRouteStopR{}
}

func (r *busRouteStopR) GetRoute() *BusRoute {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *busRouteStopR) GetStartStop() *BusStop {
	if r == nil {
		return nil
	}
	return r.StartStop
}

func (r *busRouteStopR) GetStop() *BusStop {
	if r == nil {
		return nil
	}
	return r.Stop
}

// busRouteStopL is where Load methods for each relationship are stored.
type busRouteStopL struct{}

var (
	busRouteStopAllColumns            = []string{"route_id", "stop_id", "route_stop_id", "stop_sequence", "start_stop_id"}
	busRouteStopColumnsWithoutDefault = []string{"route_id", "stop_id", "stop_sequence", "start_stop_id"}
	busRouteStopColumnsWithDefault    = []string{"route_stop_id"}
	busRouteStopPrimaryKeyColumns     = []string{"route_id", "stop_id"}
	busRouteStopGeneratedColumns      = []string{"route_stop_id"}
)

type (
	// BusRouteStopSlice is an alias for a slice of pointers to BusRouteStop.
	// This should almost always be used instead of []BusRouteStop.
	BusRouteStopSlice []*BusRouteStop

	busRouteStopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	busRouteStopType                 = reflect.TypeOf(&BusRouteStop{})
	busRouteStopMapping              = queries.MakeStructMapping(busRouteStopType)
	busRouteStopPrimaryKeyMapping, _ = queries.BindMapping(busRouteStopType, busRouteStopMapping, busRouteStopPrimaryKeyColumns)
	busRouteStopInsertCacheMut       sync.RWMutex
	busRouteStopInsertCache          = make(map[string]insertCache)
	busRouteStopUpdateCacheMut       sync.RWMutex
	busRouteStopUpdateCache          = make(map[string]updateCache)
	busRouteStopUpsertCacheMut       sync.RWMutex
	busRouteStopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single busRouteStop record from the query.
func (q busRouteStopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusRouteStop, error) {
	o := &BusRouteStop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bus_route_stop")
	}

	return o, nil
}

// All returns all BusRouteStop records from the query.
func (q busRouteStopQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusRouteStopSlice, error) {
	var o []*BusRouteStop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BusRouteStop slice")
	}

	return o, nil
}

// Count returns the count of all BusRouteStop records in the query.
func (q busRouteStopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bus_route_stop rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q busRouteStopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bus_route_stop exists")
	}

	return count > 0, nil
}

// Route pointed to by the foreign key.
func (o *BusRouteStop) Route(mods ...qm.QueryMod) busRouteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"route_id\" = ?", o.RouteID),
	}

	queryMods = append(queryMods, mods...)

	return BusRoutes(queryMods...)
}

// StartStop pointed to by the foreign key.
func (o *BusRouteStop) StartStop(mods ...qm.QueryMod) busStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_id\" = ?", o.StartStopID),
	}

	queryMods = append(queryMods, mods...)

	return BusStops(queryMods...)
}

// Stop pointed to by the foreign key.
func (o *BusRouteStop) Stop(mods ...qm.QueryMod) busStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_id\" = ?", o.StopID),
	}

	queryMods = append(queryMods, mods...)

	return BusStops(queryMods...)
}

// LoadRoute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (busRouteStopL) LoadRoute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRouteStop interface{}, mods queries.Applicator) error {
	var slice []*BusRouteStop
	var object *BusRouteStop

	if singular {
		var ok bool
		object, ok = maybeBusRouteStop.(*BusRouteStop)
		if !ok {
			object = new(BusRouteStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRouteStop))
			}
		}
	} else {
		s, ok := maybeBusRouteStop.(*[]*BusRouteStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRouteStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteStopR{}
		}
		args = append(args, object.RouteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteStopR{}
			}

			for _, a := range args {
				if a == obj.RouteID {
					continue Outer
				}
			}

			args = append(args, obj.RouteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_route`),
		qm.WhereIn(`bus_route.route_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusRoute")
	}

	var resultSlice []*BusRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusRoute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bus_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_route")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Route = foreign
		if foreign.R == nil {
			foreign.R = &busRouteR{}
		}
		foreign.R.RouteBusRouteStops = append(foreign.R.RouteBusRouteStops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RouteID == foreign.RouteID {
				local.R.Route = foreign
				if foreign.R == nil {
					foreign.R = &busRouteR{}
				}
				foreign.R.RouteBusRouteStops = append(foreign.R.RouteBusRouteStops, local)
				break
			}
		}
	}

	return nil
}

// LoadStartStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (busRouteStopL) LoadStartStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRouteStop interface{}, mods queries.Applicator) error {
	var slice []*BusRouteStop
	var object *BusRouteStop

	if singular {
		var ok bool
		object, ok = maybeBusRouteStop.(*BusRouteStop)
		if !ok {
			object = new(BusRouteStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRouteStop))
			}
		}
	} else {
		s, ok := maybeBusRouteStop.(*[]*BusRouteStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRouteStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteStopR{}
		}
		args = append(args, object.StartStopID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteStopR{}
			}

			for _, a := range args {
				if a == obj.StartStopID {
					continue Outer
				}
			}

			args = append(args, obj.StartStopID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_stop`),
		qm.WhereIn(`bus_stop.stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusStop")
	}

	var resultSlice []*BusStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bus_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_stop")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StartStop = foreign
		if foreign.R == nil {
			foreign.R = &busStopR{}
		}
		foreign.R.StartStopBusRouteStops = append(foreign.R.StartStopBusRouteStops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StartStopID == foreign.StopID {
				local.R.StartStop = foreign
				if foreign.R == nil {
					foreign.R = &busStopR{}
				}
				foreign.R.StartStopBusRouteStops = append(foreign.R.StartStopBusRouteStops, local)
				break
			}
		}
	}

	return nil
}

// LoadStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (busRouteStopL) LoadStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusRouteStop interface{}, mods queries.Applicator) error {
	var slice []*BusRouteStop
	var object *BusRouteStop

	if singular {
		var ok bool
		object, ok = maybeBusRouteStop.(*BusRouteStop)
		if !ok {
			object = new(BusRouteStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusRouteStop))
			}
		}
	} else {
		s, ok := maybeBusRouteStop.(*[]*BusRouteStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusRouteStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusRouteStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busRouteStopR{}
		}
		args = append(args, object.StopID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busRouteStopR{}
			}

			for _, a := range args {
				if a == obj.StopID {
					continue Outer
				}
			}

			args = append(args, obj.StopID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_stop`),
		qm.WhereIn(`bus_stop.stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BusStop")
	}

	var resultSlice []*BusStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BusStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bus_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_stop")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Stop = foreign
		if foreign.R == nil {
			foreign.R = &busStopR{}
		}
		foreign.R.StopBusRouteStops = append(foreign.R.StopBusRouteStops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StopID == foreign.StopID {
				local.R.Stop = foreign
				if foreign.R == nil {
					foreign.R = &busStopR{}
				}
				foreign.R.StopBusRouteStops = append(foreign.R.StopBusRouteStops, local)
				break
			}
		}
	}

	return nil
}

// SetRoute of the busRouteStop to the related item.
// Sets o.R.Route to related.
// Adds o to related.R.RouteBusRouteStops.
func (o *BusRouteStop) SetRoute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusRoute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bus_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"route_id"}),
		strmangle.WhereClause("\"", "\"", 2, busRouteStopPrimaryKeyColumns),
	)
	values := []interface{}{related.RouteID, o.RouteID, o.StopID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RouteID = related.RouteID
	if o.R == nil {
		o.R = &busRouteStopR{
			Route: related,
		}
	} else {
		o.R.Route = related
	}

	if related.R == nil {
		related.R = &busRouteR{
			RouteBusRouteStops: BusRouteStopSlice{o},
		}
	} else {
		related.R.RouteBusRouteStops = append(related.R.RouteBusRouteStops, o)
	}

	return nil
}

// SetStartStop of the busRouteStop to the related item.
// Sets o.R.StartStop to related.
// Adds o to related.R.StartStopBusRouteStops.
func (o *BusRouteStop) SetStartStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bus_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop_id"}),
		strmangle.WhereClause("\"", "\"", 2, busRouteStopPrimaryKeyColumns),
	)
	values := []interface{}{related.StopID, o.RouteID, o.StopID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StartStopID = related.StopID
	if o.R == nil {
		o.R = &busRouteStopR{
			StartStop: related,
		}
	} else {
		o.R.StartStop = related
	}

	if related.R == nil {
		related.R = &busStopR{
			StartStopBusRouteStops: BusRouteStopSlice{o},
		}
	} else {
		related.R.StartStopBusRouteStops = append(related.R.StartStopBusRouteStops, o)
	}

	return nil
}

// SetStop of the busRouteStop to the related item.
// Sets o.R.Stop to related.
// Adds o to related.R.StopBusRouteStops.
func (o *BusRouteStop) SetStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BusStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bus_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"stop_id"}),
		strmangle.WhereClause("\"", "\"", 2, busRouteStopPrimaryKeyColumns),
	)
	values := []interface{}{related.StopID, o.RouteID, o.StopID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StopID = related.StopID
	if o.R == nil {
		o.R = &busRouteStopR{
			Stop: related,
		}
	} else {
		o.R.Stop = related
	}

	if related.R == nil {
		related.R = &busStopR{
			StopBusRouteStops: BusRouteStopSlice{o},
		}
	} else {
		related.R.StopBusRouteStops = append(related.R.StopBusRouteStops, o)
	}

	return nil
}

// BusRouteStops retrieves all the records using an executor.
func BusRouteStops(mods ...qm.QueryMod) busRouteStopQuery {
	mods = append(mods, qm.From("\"bus_route_stop\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bus_route_stop\".*"})
	}

	return busRouteStopQuery{q}
}

// FindBusRouteStop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusRouteStop(ctx context.Context, exec boil.ContextExecutor, routeID int, stopID int, selectCols ...string) (*BusRouteStop, error) {
	busRouteStopObj := &BusRouteStop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bus_route_stop\" where \"route_id\"=$1 AND \"stop_id\"=$2", sel,
	)

	q := queries.Raw(query, routeID, stopID)

	err := q.Bind(ctx, exec, busRouteStopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bus_route_stop")
	}

	return busRouteStopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusRouteStop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_route_stop provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(busRouteStopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	busRouteStopInsertCacheMut.RLock()
	cache, cached := busRouteStopInsertCache[key]
	busRouteStopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			busRouteStopAllColumns,
			busRouteStopColumnsWithDefault,
			busRouteStopColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, busRouteStopGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(busRouteStopType, busRouteStopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(busRouteStopType, busRouteStopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bus_route_stop\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bus_route_stop\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bus_route_stop")
	}

	if !cached {
		busRouteStopInsertCacheMut.Lock()
		busRouteStopInsertCache[key] = cache
		busRouteStopInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BusRouteStop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusRouteStop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	busRouteStopUpdateCacheMut.RLock()
	cache, cached := busRouteStopUpdateCache[key]
	busRouteStopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			busRouteStopAllColumns,
			busRouteStopPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, busRouteStopGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bus_route_stop, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bus_route_stop\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, busRouteStopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(busRouteStopType, busRouteStopMapping, append(wl, busRouteStopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bus_route_stop row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bus_route_stop")
	}

	if !cached {
		busRouteStopUpdateCacheMut.Lock()
		busRouteStopUpdateCache[key] = cache
		busRouteStopUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q busRouteStopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bus_route_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bus_route_stop")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusRouteStopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRouteStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bus_route_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, busRouteStopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in busRouteStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all busRouteStop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusRouteStop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_route_stop provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(busRouteStopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	busRouteStopUpsertCacheMut.RLock()
	cache, cached := busRouteStopUpsertCache[key]
	busRouteStopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			busRouteStopAllColumns,
			busRouteStopColumnsWithDefault,
			busRouteStopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			busRouteStopAllColumns,
			busRouteStopPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, busRouteStopGeneratedColumns)
		update = strmangle.SetComplement(update, busRouteStopGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bus_route_stop, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(busRouteStopPrimaryKeyColumns))
			copy(conflict, busRouteStopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bus_route_stop\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(busRouteStopType, busRouteStopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(busRouteStopType, busRouteStopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bus_route_stop")
	}

	if !cached {
		busRouteStopUpsertCacheMut.Lock()
		busRouteStopUpsertCache[key] = cache
		busRouteStopUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BusRouteStop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusRouteStop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusRouteStop provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), busRouteStopPrimaryKeyMapping)
	sql := "DELETE FROM \"bus_route_stop\" WHERE \"route_id\"=$1 AND \"stop_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bus_route_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bus_route_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q busRouteStopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no busRouteStopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bus_route_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_route_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusRouteStopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRouteStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bus_route_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busRouteStopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from busRouteStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_route_stop")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusRouteStop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusRouteStop(ctx, exec, o.RouteID, o.StopID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusRouteStopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusRouteStopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busRouteStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bus_route_stop\".* FROM \"bus_route_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busRouteStopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusRouteStopSlice")
	}

	*o = slice

	return nil
}

// BusRouteStopExists checks if the BusRouteStop row exists.
func BusRouteStopExists(ctx context.Context, exec boil.ContextExecutor, routeID int, stopID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bus_route_stop\" where \"route_id\"=$1 AND \"stop_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, routeID, stopID)
	}
	row := exec.QueryRowContext(ctx, sql, routeID, stopID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bus_route_stop exists")
	}

	return exists, nil
}

// Exists checks if the BusRouteStop row exists.
func (o *BusRouteStop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BusRouteStopExists(ctx, exec, o.RouteID, o.StopID)
}
