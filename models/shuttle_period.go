// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttlePeriod is an object representing the database table.
type ShuttlePeriod struct {
	PeriodType  string    `boil:"period_type" json:"periodType" toml:"periodType" yaml:"periodType"`
	PeriodStart time.Time `boil:"period_start" json:"periodStart" toml:"periodStart" yaml:"periodStart"`
	PeriodEnd   time.Time `boil:"period_end" json:"periodEnd" toml:"periodEnd" yaml:"periodEnd"`

	R *shuttlePeriodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shuttlePeriodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShuttlePeriodColumns = struct {
	PeriodType  string
	PeriodStart string
	PeriodEnd   string
}{
	PeriodType:  "period_type",
	PeriodStart: "period_start",
	PeriodEnd:   "period_end",
}

var ShuttlePeriodTableColumns = struct {
	PeriodType  string
	PeriodStart string
	PeriodEnd   string
}{
	PeriodType:  "shuttle_period.period_type",
	PeriodStart: "shuttle_period.period_start",
	PeriodEnd:   "shuttle_period.period_end",
}

// Generated where

var ShuttlePeriodWhere = struct {
	PeriodType  whereHelperstring
	PeriodStart whereHelpertime_Time
	PeriodEnd   whereHelpertime_Time
}{
	PeriodType:  whereHelperstring{field: "\"shuttle_period\".\"period_type\""},
	PeriodStart: whereHelpertime_Time{field: "\"shuttle_period\".\"period_start\""},
	PeriodEnd:   whereHelpertime_Time{field: "\"shuttle_period\".\"period_end\""},
}

// ShuttlePeriodRels is where relationship names are stored.
var ShuttlePeriodRels = struct {
	PeriodTypeShuttlePeriodType string
}{
	PeriodTypeShuttlePeriodType: "PeriodTypeShuttlePeriodType",
}

// shuttlePeriodR is where relationships are stored.
type shuttlePeriodR struct {
	PeriodTypeShuttlePeriodType *ShuttlePeriodType `boil:"PeriodTypeShuttlePeriodType" json:"PeriodTypeShuttlePeriodType" toml:"PeriodTypeShuttlePeriodType" yaml:"PeriodTypeShuttlePeriodType"`
}

// NewStruct creates a new relationship struct
func (*shuttlePeriodR) NewStruct() *shuttlePeriodR {
	return &shuttlePeriodR{}
}

func (r *shuttlePeriodR) GetPeriodTypeShuttlePeriodType() *ShuttlePeriodType {
	if r == nil {
		return nil
	}
	return r.PeriodTypeShuttlePeriodType
}

// shuttlePeriodL is where Load methods for each relationship are stored.
type shuttlePeriodL struct{}

var (
	shuttlePeriodAllColumns            = []string{"period_type", "period_start", "period_end"}
	shuttlePeriodColumnsWithoutDefault = []string{"period_type", "period_start", "period_end"}
	shuttlePeriodColumnsWithDefault    = []string{}
	shuttlePeriodPrimaryKeyColumns     = []string{"period_type", "period_start", "period_end"}
	shuttlePeriodGeneratedColumns      = []string{}
)

type (
	// ShuttlePeriodSlice is an alias for a slice of pointers to ShuttlePeriod.
	// This should almost always be used instead of []ShuttlePeriod.
	ShuttlePeriodSlice []*ShuttlePeriod

	shuttlePeriodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttlePeriodType                 = reflect.TypeOf(&ShuttlePeriod{})
	shuttlePeriodMapping              = queries.MakeStructMapping(shuttlePeriodType)
	shuttlePeriodPrimaryKeyMapping, _ = queries.BindMapping(shuttlePeriodType, shuttlePeriodMapping, shuttlePeriodPrimaryKeyColumns)
	shuttlePeriodInsertCacheMut       sync.RWMutex
	shuttlePeriodInsertCache          = make(map[string]insertCache)
	shuttlePeriodUpdateCacheMut       sync.RWMutex
	shuttlePeriodUpdateCache          = make(map[string]updateCache)
	shuttlePeriodUpsertCacheMut       sync.RWMutex
	shuttlePeriodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shuttlePeriod record from the query.
func (q shuttlePeriodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttlePeriod, error) {
	o := &ShuttlePeriod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_period")
	}

	return o, nil
}

// All returns all ShuttlePeriod records from the query.
func (q shuttlePeriodQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttlePeriodSlice, error) {
	var o []*ShuttlePeriod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttlePeriod slice")
	}

	return o, nil
}

// Count returns the count of all ShuttlePeriod records in the query.
func (q shuttlePeriodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_period rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttlePeriodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_period exists")
	}

	return count > 0, nil
}

// PeriodTypeShuttlePeriodType pointed to by the foreign key.
func (o *ShuttlePeriod) PeriodTypeShuttlePeriodType(mods ...qm.QueryMod) shuttlePeriodTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"period_type\" = ?", o.PeriodType),
	}

	queryMods = append(queryMods, mods...)

	return ShuttlePeriodTypes(queryMods...)
}

// LoadPeriodTypeShuttlePeriodType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttlePeriodL) LoadPeriodTypeShuttlePeriodType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttlePeriod interface{}, mods queries.Applicator) error {
	var slice []*ShuttlePeriod
	var object *ShuttlePeriod

	if singular {
		var ok bool
		object, ok = maybeShuttlePeriod.(*ShuttlePeriod)
		if !ok {
			object = new(ShuttlePeriod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttlePeriod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttlePeriod))
			}
		}
	} else {
		s, ok := maybeShuttlePeriod.(*[]*ShuttlePeriod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttlePeriod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttlePeriod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttlePeriodR{}
		}
		args = append(args, object.PeriodType)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttlePeriodR{}
			}

			for _, a := range args {
				if a == obj.PeriodType {
					continue Outer
				}
			}

			args = append(args, obj.PeriodType)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_period_type`),
		qm.WhereIn(`shuttle_period_type.period_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttlePeriodType")
	}

	var resultSlice []*ShuttlePeriodType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttlePeriodType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_period_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_period_type")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PeriodTypeShuttlePeriodType = foreign
		if foreign.R == nil {
			foreign.R = &shuttlePeriodTypeR{}
		}
		foreign.R.PeriodTypeShuttlePeriods = append(foreign.R.PeriodTypeShuttlePeriods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PeriodType == foreign.PeriodType {
				local.R.PeriodTypeShuttlePeriodType = foreign
				if foreign.R == nil {
					foreign.R = &shuttlePeriodTypeR{}
				}
				foreign.R.PeriodTypeShuttlePeriods = append(foreign.R.PeriodTypeShuttlePeriods, local)
				break
			}
		}
	}

	return nil
}

// SetPeriodTypeShuttlePeriodType of the shuttlePeriod to the related item.
// Sets o.R.PeriodTypeShuttlePeriodType to related.
// Adds o to related.R.PeriodTypeShuttlePeriods.
func (o *ShuttlePeriod) SetPeriodTypeShuttlePeriodType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttlePeriodType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_period\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"period_type"}),
		strmangle.WhereClause("\"", "\"", 2, shuttlePeriodPrimaryKeyColumns),
	)
	values := []interface{}{related.PeriodType, o.PeriodType, o.PeriodStart, o.PeriodEnd}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PeriodType = related.PeriodType
	if o.R == nil {
		o.R = &shuttlePeriodR{
			PeriodTypeShuttlePeriodType: related,
		}
	} else {
		o.R.PeriodTypeShuttlePeriodType = related
	}

	if related.R == nil {
		related.R = &shuttlePeriodTypeR{
			PeriodTypeShuttlePeriods: ShuttlePeriodSlice{o},
		}
	} else {
		related.R.PeriodTypeShuttlePeriods = append(related.R.PeriodTypeShuttlePeriods, o)
	}

	return nil
}

// ShuttlePeriods retrieves all the records using an executor.
func ShuttlePeriods(mods ...qm.QueryMod) shuttlePeriodQuery {
	mods = append(mods, qm.From("\"shuttle_period\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_period\".*"})
	}

	return shuttlePeriodQuery{q}
}

// FindShuttlePeriod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShuttlePeriod(ctx context.Context, exec boil.ContextExecutor, periodType string, periodStart time.Time, periodEnd time.Time, selectCols ...string) (*ShuttlePeriod, error) {
	shuttlePeriodObj := &ShuttlePeriod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shuttle_period\" where \"period_type\"=$1 AND \"period_start\"=$2 AND \"period_end\"=$3", sel,
	)

	q := queries.Raw(query, periodType, periodStart, periodEnd)

	err := q.Bind(ctx, exec, shuttlePeriodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shuttle_period")
	}

	return shuttlePeriodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShuttlePeriod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_period provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shuttlePeriodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shuttlePeriodInsertCacheMut.RLock()
	cache, cached := shuttlePeriodInsertCache[key]
	shuttlePeriodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shuttlePeriodAllColumns,
			shuttlePeriodColumnsWithDefault,
			shuttlePeriodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shuttlePeriodType, shuttlePeriodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shuttlePeriodType, shuttlePeriodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shuttle_period\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shuttle_period\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shuttle_period")
	}

	if !cached {
		shuttlePeriodInsertCacheMut.Lock()
		shuttlePeriodInsertCache[key] = cache
		shuttlePeriodInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShuttlePeriod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShuttlePeriod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shuttlePeriodUpdateCacheMut.RLock()
	cache, cached := shuttlePeriodUpdateCache[key]
	shuttlePeriodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shuttlePeriodAllColumns,
			shuttlePeriodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shuttle_period, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shuttle_period\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shuttlePeriodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shuttlePeriodType, shuttlePeriodMapping, append(wl, shuttlePeriodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shuttle_period row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shuttle_period")
	}

	if !cached {
		shuttlePeriodUpdateCacheMut.Lock()
		shuttlePeriodUpdateCache[key] = cache
		shuttlePeriodUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shuttlePeriodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shuttle_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shuttle_period")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShuttlePeriodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttlePeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shuttle_period\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shuttlePeriodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shuttlePeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shuttlePeriod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShuttlePeriod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_period provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttlePeriodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shuttlePeriodUpsertCacheMut.RLock()
	cache, cached := shuttlePeriodUpsertCache[key]
	shuttlePeriodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shuttlePeriodAllColumns,
			shuttlePeriodColumnsWithDefault,
			shuttlePeriodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shuttlePeriodAllColumns,
			shuttlePeriodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shuttle_period, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shuttlePeriodPrimaryKeyColumns))
			copy(conflict, shuttlePeriodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shuttle_period\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shuttlePeriodType, shuttlePeriodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shuttlePeriodType, shuttlePeriodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shuttle_period")
	}

	if !cached {
		shuttlePeriodUpsertCacheMut.Lock()
		shuttlePeriodUpsertCache[key] = cache
		shuttlePeriodUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShuttlePeriod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShuttlePeriod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShuttlePeriod provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shuttlePeriodPrimaryKeyMapping)
	sql := "DELETE FROM \"shuttle_period\" WHERE \"period_type\"=$1 AND \"period_start\"=$2 AND \"period_end\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shuttle_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shuttle_period")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shuttlePeriodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shuttlePeriodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttle_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_period")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShuttlePeriodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttlePeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shuttle_period\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttlePeriodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttlePeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_period")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShuttlePeriod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShuttlePeriod(ctx, exec, o.PeriodType, o.PeriodStart, o.PeriodEnd)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShuttlePeriodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShuttlePeriodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttlePeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shuttle_period\".* FROM \"shuttle_period\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttlePeriodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShuttlePeriodSlice")
	}

	*o = slice

	return nil
}

// ShuttlePeriodExists checks if the ShuttlePeriod row exists.
func ShuttlePeriodExists(ctx context.Context, exec boil.ContextExecutor, periodType string, periodStart time.Time, periodEnd time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shuttle_period\" where \"period_type\"=$1 AND \"period_start\"=$2 AND \"period_end\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, periodType, periodStart, periodEnd)
	}
	row := exec.QueryRowContext(ctx, sql, periodType, periodStart, periodEnd)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shuttle_period exists")
	}

	return exists, nil
}

// Exists checks if the ShuttlePeriod row exists.
func (o *ShuttlePeriod) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShuttlePeriodExists(ctx, exec, o.PeriodType, o.PeriodStart, o.PeriodEnd)
}
