// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttleRoute is an object representing the database table.
type ShuttleRoute struct {
	RouteName               string      `boil:"route_name" json:"routeName" toml:"routeName" yaml:"routeName"`
	RouteDescriptionKorean  null.String `boil:"route_description_korean" json:"routeDescriptionKorean,omitempty" toml:"routeDescriptionKorean" yaml:"routeDescriptionKorean,omitempty"`
	RouteDescriptionEnglish null.String `boil:"route_description_english" json:"routeDescriptionEnglish,omitempty" toml:"routeDescriptionEnglish" yaml:"routeDescriptionEnglish,omitempty"`
	RouteTag                null.String `boil:"route_tag" json:"routeTag,omitempty" toml:"routeTag" yaml:"routeTag,omitempty"`
	StartStop               null.String `boil:"start_stop" json:"startStop,omitempty" toml:"startStop" yaml:"startStop,omitempty"`
	EndStop                 null.String `boil:"end_stop" json:"endStop,omitempty" toml:"endStop" yaml:"endStop,omitempty"`

	R *shuttleRouteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shuttleRouteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShuttleRouteColumns = struct {
	RouteName               string
	RouteDescriptionKorean  string
	RouteDescriptionEnglish string
	RouteTag                string
	StartStop               string
	EndStop                 string
}{
	RouteName:               "route_name",
	RouteDescriptionKorean:  "route_description_korean",
	RouteDescriptionEnglish: "route_description_english",
	RouteTag:                "route_tag",
	StartStop:               "start_stop",
	EndStop:                 "end_stop",
}

var ShuttleRouteTableColumns = struct {
	RouteName               string
	RouteDescriptionKorean  string
	RouteDescriptionEnglish string
	RouteTag                string
	StartStop               string
	EndStop                 string
}{
	RouteName:               "shuttle_route.route_name",
	RouteDescriptionKorean:  "shuttle_route.route_description_korean",
	RouteDescriptionEnglish: "shuttle_route.route_description_english",
	RouteTag:                "shuttle_route.route_tag",
	StartStop:               "shuttle_route.start_stop",
	EndStop:                 "shuttle_route.end_stop",
}

// Generated where

var ShuttleRouteWhere = struct {
	RouteName               whereHelperstring
	RouteDescriptionKorean  whereHelpernull_String
	RouteDescriptionEnglish whereHelpernull_String
	RouteTag                whereHelpernull_String
	StartStop               whereHelpernull_String
	EndStop                 whereHelpernull_String
}{
	RouteName:               whereHelperstring{field: "\"shuttle_route\".\"route_name\""},
	RouteDescriptionKorean:  whereHelpernull_String{field: "\"shuttle_route\".\"route_description_korean\""},
	RouteDescriptionEnglish: whereHelpernull_String{field: "\"shuttle_route\".\"route_description_english\""},
	RouteTag:                whereHelpernull_String{field: "\"shuttle_route\".\"route_tag\""},
	StartStop:               whereHelpernull_String{field: "\"shuttle_route\".\"start_stop\""},
	EndStop:                 whereHelpernull_String{field: "\"shuttle_route\".\"end_stop\""},
}

// ShuttleRouteRels is where relationship names are stored.
var ShuttleRouteRels = struct {
	EndStopShuttleStop         string
	StartStopShuttleStop       string
	RouteNameShuttleRouteStops string
	RouteNameShuttleTimetables string
}{
	EndStopShuttleStop:         "EndStopShuttleStop",
	StartStopShuttleStop:       "StartStopShuttleStop",
	RouteNameShuttleRouteStops: "RouteNameShuttleRouteStops",
	RouteNameShuttleTimetables: "RouteNameShuttleTimetables",
}

// shuttleRouteR is where relationships are stored.
type shuttleRouteR struct {
	EndStopShuttleStop         *ShuttleStop          `boil:"EndStopShuttleStop" json:"EndStopShuttleStop" toml:"EndStopShuttleStop" yaml:"EndStopShuttleStop"`
	StartStopShuttleStop       *ShuttleStop          `boil:"StartStopShuttleStop" json:"StartStopShuttleStop" toml:"StartStopShuttleStop" yaml:"StartStopShuttleStop"`
	RouteNameShuttleRouteStops ShuttleRouteStopSlice `boil:"RouteNameShuttleRouteStops" json:"RouteNameShuttleRouteStops" toml:"RouteNameShuttleRouteStops" yaml:"RouteNameShuttleRouteStops"`
	RouteNameShuttleTimetables ShuttleTimetableSlice `boil:"RouteNameShuttleTimetables" json:"RouteNameShuttleTimetables" toml:"RouteNameShuttleTimetables" yaml:"RouteNameShuttleTimetables"`
}

// NewStruct creates a new relationship struct
func (*shuttleRouteR) NewStruct() *shuttleRouteR {
	return &shuttleRouteR{}
}

func (r *shuttleRouteR) GetEndStopShuttleStop() *ShuttleStop {
	if r == nil {
		return nil
	}
	return r.EndStopShuttleStop
}

func (r *shuttleRouteR) GetStartStopShuttleStop() *ShuttleStop {
	if r == nil {
		return nil
	}
	return r.StartStopShuttleStop
}

func (r *shuttleRouteR) GetRouteNameShuttleRouteStops() ShuttleRouteStopSlice {
	if r == nil {
		return nil
	}
	return r.RouteNameShuttleRouteStops
}

func (r *shuttleRouteR) GetRouteNameShuttleTimetables() ShuttleTimetableSlice {
	if r == nil {
		return nil
	}
	return r.RouteNameShuttleTimetables
}

// shuttleRouteL is where Load methods for each relationship are stored.
type shuttleRouteL struct{}

var (
	shuttleRouteAllColumns            = []string{"route_name", "route_description_korean", "route_description_english", "route_tag", "start_stop", "end_stop"}
	shuttleRouteColumnsWithoutDefault = []string{"route_name"}
	shuttleRouteColumnsWithDefault    = []string{"route_description_korean", "route_description_english", "route_tag", "start_stop", "end_stop"}
	shuttleRoutePrimaryKeyColumns     = []string{"route_name"}
	shuttleRouteGeneratedColumns      = []string{}
)

type (
	// ShuttleRouteSlice is an alias for a slice of pointers to ShuttleRoute.
	// This should almost always be used instead of []ShuttleRoute.
	ShuttleRouteSlice []*ShuttleRoute
	// ShuttleRouteHook is the signature for custom ShuttleRoute hook methods
	ShuttleRouteHook func(context.Context, boil.ContextExecutor, *ShuttleRoute) error

	shuttleRouteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttleRouteType                 = reflect.TypeOf(&ShuttleRoute{})
	shuttleRouteMapping              = queries.MakeStructMapping(shuttleRouteType)
	shuttleRoutePrimaryKeyMapping, _ = queries.BindMapping(shuttleRouteType, shuttleRouteMapping, shuttleRoutePrimaryKeyColumns)
	shuttleRouteInsertCacheMut       sync.RWMutex
	shuttleRouteInsertCache          = make(map[string]insertCache)
	shuttleRouteUpdateCacheMut       sync.RWMutex
	shuttleRouteUpdateCache          = make(map[string]updateCache)
	shuttleRouteUpsertCacheMut       sync.RWMutex
	shuttleRouteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shuttleRouteAfterSelectHooks []ShuttleRouteHook

var shuttleRouteBeforeInsertHooks []ShuttleRouteHook
var shuttleRouteAfterInsertHooks []ShuttleRouteHook

var shuttleRouteBeforeUpdateHooks []ShuttleRouteHook
var shuttleRouteAfterUpdateHooks []ShuttleRouteHook

var shuttleRouteBeforeDeleteHooks []ShuttleRouteHook
var shuttleRouteAfterDeleteHooks []ShuttleRouteHook

var shuttleRouteBeforeUpsertHooks []ShuttleRouteHook
var shuttleRouteAfterUpsertHooks []ShuttleRouteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShuttleRoute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShuttleRoute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShuttleRoute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShuttleRoute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShuttleRoute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShuttleRoute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShuttleRoute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShuttleRoute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShuttleRoute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleRouteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShuttleRouteHook registers your hook function for all future operations.
func AddShuttleRouteHook(hookPoint boil.HookPoint, shuttleRouteHook ShuttleRouteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shuttleRouteAfterSelectHooks = append(shuttleRouteAfterSelectHooks, shuttleRouteHook)
	case boil.BeforeInsertHook:
		shuttleRouteBeforeInsertHooks = append(shuttleRouteBeforeInsertHooks, shuttleRouteHook)
	case boil.AfterInsertHook:
		shuttleRouteAfterInsertHooks = append(shuttleRouteAfterInsertHooks, shuttleRouteHook)
	case boil.BeforeUpdateHook:
		shuttleRouteBeforeUpdateHooks = append(shuttleRouteBeforeUpdateHooks, shuttleRouteHook)
	case boil.AfterUpdateHook:
		shuttleRouteAfterUpdateHooks = append(shuttleRouteAfterUpdateHooks, shuttleRouteHook)
	case boil.BeforeDeleteHook:
		shuttleRouteBeforeDeleteHooks = append(shuttleRouteBeforeDeleteHooks, shuttleRouteHook)
	case boil.AfterDeleteHook:
		shuttleRouteAfterDeleteHooks = append(shuttleRouteAfterDeleteHooks, shuttleRouteHook)
	case boil.BeforeUpsertHook:
		shuttleRouteBeforeUpsertHooks = append(shuttleRouteBeforeUpsertHooks, shuttleRouteHook)
	case boil.AfterUpsertHook:
		shuttleRouteAfterUpsertHooks = append(shuttleRouteAfterUpsertHooks, shuttleRouteHook)
	}
}

// One returns a single shuttleRoute record from the query.
func (q shuttleRouteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttleRoute, error) {
	o := &ShuttleRoute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_route")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShuttleRoute records from the query.
func (q shuttleRouteQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttleRouteSlice, error) {
	var o []*ShuttleRoute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttleRoute slice")
	}

	if len(shuttleRouteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShuttleRoute records in the query.
func (q shuttleRouteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_route rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttleRouteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_route exists")
	}

	return count > 0, nil
}

// EndStopShuttleStop pointed to by the foreign key.
func (o *ShuttleRoute) EndStopShuttleStop(mods ...qm.QueryMod) shuttleStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_name\" = ?", o.EndStop),
	}

	queryMods = append(queryMods, mods...)

	return ShuttleStops(queryMods...)
}

// StartStopShuttleStop pointed to by the foreign key.
func (o *ShuttleRoute) StartStopShuttleStop(mods ...qm.QueryMod) shuttleStopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"stop_name\" = ?", o.StartStop),
	}

	queryMods = append(queryMods, mods...)

	return ShuttleStops(queryMods...)
}

// RouteNameShuttleRouteStops retrieves all the shuttle_route_stop's ShuttleRouteStops with an executor via route_name column.
func (o *ShuttleRoute) RouteNameShuttleRouteStops(mods ...qm.QueryMod) shuttleRouteStopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_route_stop\".\"route_name\"=?", o.RouteName),
	)

	return ShuttleRouteStops(queryMods...)
}

// RouteNameShuttleTimetables retrieves all the shuttle_timetable's ShuttleTimetables with an executor via route_name column.
func (o *ShuttleRoute) RouteNameShuttleTimetables(mods ...qm.QueryMod) shuttleTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_timetable\".\"route_name\"=?", o.RouteName),
	)

	return ShuttleTimetables(queryMods...)
}

// LoadEndStopShuttleStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttleRouteL) LoadEndStopShuttleStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleRoute interface{}, mods queries.Applicator) error {
	var slice []*ShuttleRoute
	var object *ShuttleRoute

	if singular {
		var ok bool
		object, ok = maybeShuttleRoute.(*ShuttleRoute)
		if !ok {
			object = new(ShuttleRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleRoute))
			}
		}
	} else {
		s, ok := maybeShuttleRoute.(*[]*ShuttleRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleRouteR{}
		}
		if !queries.IsNil(object.EndStop) {
			args = append(args, object.EndStop)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleRouteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EndStop) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EndStop) {
				args = append(args, obj.EndStop)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_stop`),
		qm.WhereIn(`shuttle_stop.stop_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttleStop")
	}

	var resultSlice []*ShuttleStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttleStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_stop")
	}

	if len(shuttleStopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EndStopShuttleStop = foreign
		if foreign.R == nil {
			foreign.R = &shuttleStopR{}
		}
		foreign.R.EndStopShuttleRoutes = append(foreign.R.EndStopShuttleRoutes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EndStop, foreign.StopName) {
				local.R.EndStopShuttleStop = foreign
				if foreign.R == nil {
					foreign.R = &shuttleStopR{}
				}
				foreign.R.EndStopShuttleRoutes = append(foreign.R.EndStopShuttleRoutes, local)
				break
			}
		}
	}

	return nil
}

// LoadStartStopShuttleStop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shuttleRouteL) LoadStartStopShuttleStop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleRoute interface{}, mods queries.Applicator) error {
	var slice []*ShuttleRoute
	var object *ShuttleRoute

	if singular {
		var ok bool
		object, ok = maybeShuttleRoute.(*ShuttleRoute)
		if !ok {
			object = new(ShuttleRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleRoute))
			}
		}
	} else {
		s, ok := maybeShuttleRoute.(*[]*ShuttleRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleRouteR{}
		}
		if !queries.IsNil(object.StartStop) {
			args = append(args, object.StartStop)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleRouteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StartStop) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StartStop) {
				args = append(args, obj.StartStop)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_stop`),
		qm.WhereIn(`shuttle_stop.stop_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShuttleStop")
	}

	var resultSlice []*ShuttleStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShuttleStop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shuttle_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_stop")
	}

	if len(shuttleStopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StartStopShuttleStop = foreign
		if foreign.R == nil {
			foreign.R = &shuttleStopR{}
		}
		foreign.R.StartStopShuttleRoutes = append(foreign.R.StartStopShuttleRoutes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StartStop, foreign.StopName) {
				local.R.StartStopShuttleStop = foreign
				if foreign.R == nil {
					foreign.R = &shuttleStopR{}
				}
				foreign.R.StartStopShuttleRoutes = append(foreign.R.StartStopShuttleRoutes, local)
				break
			}
		}
	}

	return nil
}

// LoadRouteNameShuttleRouteStops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttleRouteL) LoadRouteNameShuttleRouteStops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleRoute interface{}, mods queries.Applicator) error {
	var slice []*ShuttleRoute
	var object *ShuttleRoute

	if singular {
		var ok bool
		object, ok = maybeShuttleRoute.(*ShuttleRoute)
		if !ok {
			object = new(ShuttleRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleRoute))
			}
		}
	} else {
		s, ok := maybeShuttleRoute.(*[]*ShuttleRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleRouteR{}
		}
		args = append(args, object.RouteName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleRouteR{}
			}

			for _, a := range args {
				if a == obj.RouteName {
					continue Outer
				}
			}

			args = append(args, obj.RouteName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_route_stop`),
		qm.WhereIn(`shuttle_route_stop.route_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_route_stop")
	}

	var resultSlice []*ShuttleRouteStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_route_stop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_route_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_route_stop")
	}

	if len(shuttleRouteStopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RouteNameShuttleRouteStops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttleRouteStopR{}
			}
			foreign.R.RouteNameShuttleRoute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RouteName == foreign.RouteName {
				local.R.RouteNameShuttleRouteStops = append(local.R.RouteNameShuttleRouteStops, foreign)
				if foreign.R == nil {
					foreign.R = &shuttleRouteStopR{}
				}
				foreign.R.RouteNameShuttleRoute = local
				break
			}
		}
	}

	return nil
}

// LoadRouteNameShuttleTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttleRouteL) LoadRouteNameShuttleTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleRoute interface{}, mods queries.Applicator) error {
	var slice []*ShuttleRoute
	var object *ShuttleRoute

	if singular {
		var ok bool
		object, ok = maybeShuttleRoute.(*ShuttleRoute)
		if !ok {
			object = new(ShuttleRoute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleRoute))
			}
		}
	} else {
		s, ok := maybeShuttleRoute.(*[]*ShuttleRoute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleRoute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleRoute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleRouteR{}
		}
		args = append(args, object.RouteName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleRouteR{}
			}

			for _, a := range args {
				if a == obj.RouteName {
					continue Outer
				}
			}

			args = append(args, obj.RouteName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_timetable`),
		qm.WhereIn(`shuttle_timetable.route_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_timetable")
	}

	var resultSlice []*ShuttleTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_timetable")
	}

	if len(shuttleTimetableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RouteNameShuttleTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttleTimetableR{}
			}
			foreign.R.RouteNameShuttleRoute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RouteName == foreign.RouteName {
				local.R.RouteNameShuttleTimetables = append(local.R.RouteNameShuttleTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &shuttleTimetableR{}
				}
				foreign.R.RouteNameShuttleRoute = local
				break
			}
		}
	}

	return nil
}

// SetEndStopShuttleStop of the shuttleRoute to the related item.
// Sets o.R.EndStopShuttleStop to related.
// Adds o to related.R.EndStopShuttleRoutes.
func (o *ShuttleRoute) SetEndStopShuttleStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttleStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"end_stop"}),
		strmangle.WhereClause("\"", "\"", 2, shuttleRoutePrimaryKeyColumns),
	)
	values := []interface{}{related.StopName, o.RouteName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EndStop, related.StopName)
	if o.R == nil {
		o.R = &shuttleRouteR{
			EndStopShuttleStop: related,
		}
	} else {
		o.R.EndStopShuttleStop = related
	}

	if related.R == nil {
		related.R = &shuttleStopR{
			EndStopShuttleRoutes: ShuttleRouteSlice{o},
		}
	} else {
		related.R.EndStopShuttleRoutes = append(related.R.EndStopShuttleRoutes, o)
	}

	return nil
}

// RemoveEndStopShuttleStop relationship.
// Sets o.R.EndStopShuttleStop to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShuttleRoute) RemoveEndStopShuttleStop(ctx context.Context, exec boil.ContextExecutor, related *ShuttleStop) error {
	var err error

	queries.SetScanner(&o.EndStop, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("end_stop")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EndStopShuttleStop = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EndStopShuttleRoutes {
		if queries.Equal(o.EndStop, ri.EndStop) {
			continue
		}

		ln := len(related.R.EndStopShuttleRoutes)
		if ln > 1 && i < ln-1 {
			related.R.EndStopShuttleRoutes[i] = related.R.EndStopShuttleRoutes[ln-1]
		}
		related.R.EndStopShuttleRoutes = related.R.EndStopShuttleRoutes[:ln-1]
		break
	}
	return nil
}

// SetStartStopShuttleStop of the shuttleRoute to the related item.
// Sets o.R.StartStopShuttleStop to related.
// Adds o to related.R.StartStopShuttleRoutes.
func (o *ShuttleRoute) SetStartStopShuttleStop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShuttleStop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shuttle_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop"}),
		strmangle.WhereClause("\"", "\"", 2, shuttleRoutePrimaryKeyColumns),
	)
	values := []interface{}{related.StopName, o.RouteName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StartStop, related.StopName)
	if o.R == nil {
		o.R = &shuttleRouteR{
			StartStopShuttleStop: related,
		}
	} else {
		o.R.StartStopShuttleStop = related
	}

	if related.R == nil {
		related.R = &shuttleStopR{
			StartStopShuttleRoutes: ShuttleRouteSlice{o},
		}
	} else {
		related.R.StartStopShuttleRoutes = append(related.R.StartStopShuttleRoutes, o)
	}

	return nil
}

// RemoveStartStopShuttleStop relationship.
// Sets o.R.StartStopShuttleStop to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShuttleRoute) RemoveStartStopShuttleStop(ctx context.Context, exec boil.ContextExecutor, related *ShuttleStop) error {
	var err error

	queries.SetScanner(&o.StartStop, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("start_stop")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StartStopShuttleStop = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StartStopShuttleRoutes {
		if queries.Equal(o.StartStop, ri.StartStop) {
			continue
		}

		ln := len(related.R.StartStopShuttleRoutes)
		if ln > 1 && i < ln-1 {
			related.R.StartStopShuttleRoutes[i] = related.R.StartStopShuttleRoutes[ln-1]
		}
		related.R.StartStopShuttleRoutes = related.R.StartStopShuttleRoutes[:ln-1]
		break
	}
	return nil
}

// AddRouteNameShuttleRouteStops adds the given related objects to the existing relationships
// of the shuttle_route, optionally inserting them as new records.
// Appends related to o.R.RouteNameShuttleRouteStops.
// Sets related.R.RouteNameShuttleRoute appropriately.
func (o *ShuttleRoute) AddRouteNameShuttleRouteStops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleRouteStop) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RouteName = o.RouteName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_route_stop\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"route_name"}),
				strmangle.WhereClause("\"", "\"", 2, shuttleRouteStopPrimaryKeyColumns),
			)
			values := []interface{}{o.RouteName, rel.RouteName, rel.StopName}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RouteName = o.RouteName
		}
	}

	if o.R == nil {
		o.R = &shuttleRouteR{
			RouteNameShuttleRouteStops: related,
		}
	} else {
		o.R.RouteNameShuttleRouteStops = append(o.R.RouteNameShuttleRouteStops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttleRouteStopR{
				RouteNameShuttleRoute: o,
			}
		} else {
			rel.R.RouteNameShuttleRoute = o
		}
	}
	return nil
}

// AddRouteNameShuttleTimetables adds the given related objects to the existing relationships
// of the shuttle_route, optionally inserting them as new records.
// Appends related to o.R.RouteNameShuttleTimetables.
// Sets related.R.RouteNameShuttleRoute appropriately.
func (o *ShuttleRoute) AddRouteNameShuttleTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RouteName = o.RouteName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"route_name"}),
				strmangle.WhereClause("\"", "\"", 2, shuttleTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.RouteName, rel.Seq}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RouteName = o.RouteName
		}
	}

	if o.R == nil {
		o.R = &shuttleRouteR{
			RouteNameShuttleTimetables: related,
		}
	} else {
		o.R.RouteNameShuttleTimetables = append(o.R.RouteNameShuttleTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttleTimetableR{
				RouteNameShuttleRoute: o,
			}
		} else {
			rel.R.RouteNameShuttleRoute = o
		}
	}
	return nil
}

// ShuttleRoutes retrieves all the records using an executor.
func ShuttleRoutes(mods ...qm.QueryMod) shuttleRouteQuery {
	mods = append(mods, qm.From("\"shuttle_route\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_route\".*"})
	}

	return shuttleRouteQuery{q}
}

// FindShuttleRoute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShuttleRoute(ctx context.Context, exec boil.ContextExecutor, routeName string, selectCols ...string) (*ShuttleRoute, error) {
	shuttleRouteObj := &ShuttleRoute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shuttle_route\" where \"route_name\"=$1", sel,
	)

	q := queries.Raw(query, routeName)

	err := q.Bind(ctx, exec, shuttleRouteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shuttle_route")
	}

	if err = shuttleRouteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shuttleRouteObj, err
	}

	return shuttleRouteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShuttleRoute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_route provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleRouteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shuttleRouteInsertCacheMut.RLock()
	cache, cached := shuttleRouteInsertCache[key]
	shuttleRouteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shuttleRouteAllColumns,
			shuttleRouteColumnsWithDefault,
			shuttleRouteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shuttleRouteType, shuttleRouteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shuttleRouteType, shuttleRouteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shuttle_route\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shuttle_route\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shuttle_route")
	}

	if !cached {
		shuttleRouteInsertCacheMut.Lock()
		shuttleRouteInsertCache[key] = cache
		shuttleRouteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShuttleRoute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShuttleRoute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shuttleRouteUpdateCacheMut.RLock()
	cache, cached := shuttleRouteUpdateCache[key]
	shuttleRouteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shuttleRouteAllColumns,
			shuttleRoutePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shuttle_route, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shuttle_route\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shuttleRoutePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shuttleRouteType, shuttleRouteMapping, append(wl, shuttleRoutePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shuttle_route row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shuttle_route")
	}

	if !cached {
		shuttleRouteUpdateCacheMut.Lock()
		shuttleRouteUpdateCache[key] = cache
		shuttleRouteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shuttleRouteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shuttle_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shuttle_route")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShuttleRouteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shuttle_route\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shuttleRoutePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shuttleRoute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shuttleRoute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShuttleRoute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_route provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleRouteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shuttleRouteUpsertCacheMut.RLock()
	cache, cached := shuttleRouteUpsertCache[key]
	shuttleRouteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shuttleRouteAllColumns,
			shuttleRouteColumnsWithDefault,
			shuttleRouteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shuttleRouteAllColumns,
			shuttleRoutePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shuttle_route, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shuttleRoutePrimaryKeyColumns))
			copy(conflict, shuttleRoutePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shuttle_route\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shuttleRouteType, shuttleRouteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shuttleRouteType, shuttleRouteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shuttle_route")
	}

	if !cached {
		shuttleRouteUpsertCacheMut.Lock()
		shuttleRouteUpsertCache[key] = cache
		shuttleRouteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShuttleRoute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShuttleRoute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShuttleRoute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shuttleRoutePrimaryKeyMapping)
	sql := "DELETE FROM \"shuttle_route\" WHERE \"route_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shuttle_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shuttle_route")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shuttleRouteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shuttleRouteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttle_route")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_route")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShuttleRouteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shuttleRouteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shuttle_route\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleRoutePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttleRoute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_route")
	}

	if len(shuttleRouteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShuttleRoute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShuttleRoute(ctx, exec, o.RouteName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShuttleRouteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShuttleRouteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleRoutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shuttle_route\".* FROM \"shuttle_route\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleRoutePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShuttleRouteSlice")
	}

	*o = slice

	return nil
}

// ShuttleRouteExists checks if the ShuttleRoute row exists.
func ShuttleRouteExists(ctx context.Context, exec boil.ContextExecutor, routeName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shuttle_route\" where \"route_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, routeName)
	}
	row := exec.QueryRowContext(ctx, sql, routeName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shuttle_route exists")
	}

	return exists, nil
}

// Exists checks if the ShuttleRoute row exists.
func (o *ShuttleRoute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShuttleRouteExists(ctx, exec, o.RouteName)
}
