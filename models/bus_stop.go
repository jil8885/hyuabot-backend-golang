// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BusStop is an object representing the database table.
type BusStop struct {
	StopID       int         `boil:"stop_id" json:"stopID" toml:"stopID" yaml:"stopID"`
	StopName     null.String `boil:"stop_name" json:"stopName,omitempty" toml:"stopName" yaml:"stopName,omitempty"`
	DistrictCode int         `boil:"district_code" json:"districtCode" toml:"districtCode" yaml:"districtCode"`
	MobileNumber string      `boil:"mobile_number" json:"mobileNumber" toml:"mobileNumber" yaml:"mobileNumber"`
	RegionName   string      `boil:"region_name" json:"regionName" toml:"regionName" yaml:"regionName"`
	Latitude     float64     `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude    float64     `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`

	R *busStopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L busStopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusStopColumns = struct {
	StopID       string
	StopName     string
	DistrictCode string
	MobileNumber string
	RegionName   string
	Latitude     string
	Longitude    string
}{
	StopID:       "stop_id",
	StopName:     "stop_name",
	DistrictCode: "district_code",
	MobileNumber: "mobile_number",
	RegionName:   "region_name",
	Latitude:     "latitude",
	Longitude:    "longitude",
}

var BusStopTableColumns = struct {
	StopID       string
	StopName     string
	DistrictCode string
	MobileNumber string
	RegionName   string
	Latitude     string
	Longitude    string
}{
	StopID:       "bus_stop.stop_id",
	StopName:     "bus_stop.stop_name",
	DistrictCode: "bus_stop.district_code",
	MobileNumber: "bus_stop.mobile_number",
	RegionName:   "bus_stop.region_name",
	Latitude:     "bus_stop.latitude",
	Longitude:    "bus_stop.longitude",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BusStopWhere = struct {
	StopID       whereHelperint
	StopName     whereHelpernull_String
	DistrictCode whereHelperint
	MobileNumber whereHelperstring
	RegionName   whereHelperstring
	Latitude     whereHelperfloat64
	Longitude    whereHelperfloat64
}{
	StopID:       whereHelperint{field: "\"bus_stop\".\"stop_id\""},
	StopName:     whereHelpernull_String{field: "\"bus_stop\".\"stop_name\""},
	DistrictCode: whereHelperint{field: "\"bus_stop\".\"district_code\""},
	MobileNumber: whereHelperstring{field: "\"bus_stop\".\"mobile_number\""},
	RegionName:   whereHelperstring{field: "\"bus_stop\".\"region_name\""},
	Latitude:     whereHelperfloat64{field: "\"bus_stop\".\"latitude\""},
	Longitude:    whereHelperfloat64{field: "\"bus_stop\".\"longitude\""},
}

// BusStopRels is where relationship names are stored.
var BusStopRels = struct {
	EndStopBusRoutes       string
	StartStopBusRoutes     string
	StartStopBusRouteStops string
	StopBusRouteStops      string
	StartStopBusTimetables string
}{
	EndStopBusRoutes:       "EndStopBusRoutes",
	StartStopBusRoutes:     "StartStopBusRoutes",
	StartStopBusRouteStops: "StartStopBusRouteStops",
	StopBusRouteStops:      "StopBusRouteStops",
	StartStopBusTimetables: "StartStopBusTimetables",
}

// busStopR is where relationships are stored.
type busStopR struct {
	EndStopBusRoutes       BusRouteSlice     `boil:"EndStopBusRoutes" json:"EndStopBusRoutes" toml:"EndStopBusRoutes" yaml:"EndStopBusRoutes"`
	StartStopBusRoutes     BusRouteSlice     `boil:"StartStopBusRoutes" json:"StartStopBusRoutes" toml:"StartStopBusRoutes" yaml:"StartStopBusRoutes"`
	StartStopBusRouteStops BusRouteStopSlice `boil:"StartStopBusRouteStops" json:"StartStopBusRouteStops" toml:"StartStopBusRouteStops" yaml:"StartStopBusRouteStops"`
	StopBusRouteStops      BusRouteStopSlice `boil:"StopBusRouteStops" json:"StopBusRouteStops" toml:"StopBusRouteStops" yaml:"StopBusRouteStops"`
	StartStopBusTimetables BusTimetableSlice `boil:"StartStopBusTimetables" json:"StartStopBusTimetables" toml:"StartStopBusTimetables" yaml:"StartStopBusTimetables"`
}

// NewStruct creates a new relationship struct
func (*busStopR) NewStruct() *busStopR {
	return &busStopR{}
}

func (r *busStopR) GetEndStopBusRoutes() BusRouteSlice {
	if r == nil {
		return nil
	}
	return r.EndStopBusRoutes
}

func (r *busStopR) GetStartStopBusRoutes() BusRouteSlice {
	if r == nil {
		return nil
	}
	return r.StartStopBusRoutes
}

func (r *busStopR) GetStartStopBusRouteStops() BusRouteStopSlice {
	if r == nil {
		return nil
	}
	return r.StartStopBusRouteStops
}

func (r *busStopR) GetStopBusRouteStops() BusRouteStopSlice {
	if r == nil {
		return nil
	}
	return r.StopBusRouteStops
}

func (r *busStopR) GetStartStopBusTimetables() BusTimetableSlice {
	if r == nil {
		return nil
	}
	return r.StartStopBusTimetables
}

// busStopL is where Load methods for each relationship are stored.
type busStopL struct{}

var (
	busStopAllColumns            = []string{"stop_id", "stop_name", "district_code", "mobile_number", "region_name", "latitude", "longitude"}
	busStopColumnsWithoutDefault = []string{"stop_id", "district_code", "mobile_number", "region_name", "latitude", "longitude"}
	busStopColumnsWithDefault    = []string{"stop_name"}
	busStopPrimaryKeyColumns     = []string{"stop_id"}
	busStopGeneratedColumns      = []string{}
)

type (
	// BusStopSlice is an alias for a slice of pointers to BusStop.
	// This should almost always be used instead of []BusStop.
	BusStopSlice []*BusStop

	busStopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	busStopType                 = reflect.TypeOf(&BusStop{})
	busStopMapping              = queries.MakeStructMapping(busStopType)
	busStopPrimaryKeyMapping, _ = queries.BindMapping(busStopType, busStopMapping, busStopPrimaryKeyColumns)
	busStopInsertCacheMut       sync.RWMutex
	busStopInsertCache          = make(map[string]insertCache)
	busStopUpdateCacheMut       sync.RWMutex
	busStopUpdateCache          = make(map[string]updateCache)
	busStopUpsertCacheMut       sync.RWMutex
	busStopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single busStop record from the query.
func (q busStopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusStop, error) {
	o := &BusStop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bus_stop")
	}

	return o, nil
}

// All returns all BusStop records from the query.
func (q busStopQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusStopSlice, error) {
	var o []*BusStop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BusStop slice")
	}

	return o, nil
}

// Count returns the count of all BusStop records in the query.
func (q busStopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bus_stop rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q busStopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bus_stop exists")
	}

	return count > 0, nil
}

// EndStopBusRoutes retrieves all the bus_route's BusRoutes with an executor via end_stop_id column.
func (o *BusStop) EndStopBusRoutes(mods ...qm.QueryMod) busRouteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_route\".\"end_stop_id\"=?", o.StopID),
	)

	return BusRoutes(queryMods...)
}

// StartStopBusRoutes retrieves all the bus_route's BusRoutes with an executor via start_stop_id column.
func (o *BusStop) StartStopBusRoutes(mods ...qm.QueryMod) busRouteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_route\".\"start_stop_id\"=?", o.StopID),
	)

	return BusRoutes(queryMods...)
}

// StartStopBusRouteStops retrieves all the bus_route_stop's BusRouteStops with an executor via start_stop_id column.
func (o *BusStop) StartStopBusRouteStops(mods ...qm.QueryMod) busRouteStopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_route_stop\".\"start_stop_id\"=?", o.StopID),
	)

	return BusRouteStops(queryMods...)
}

// StopBusRouteStops retrieves all the bus_route_stop's BusRouteStops with an executor via stop_id column.
func (o *BusStop) StopBusRouteStops(mods ...qm.QueryMod) busRouteStopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_route_stop\".\"stop_id\"=?", o.StopID),
	)

	return BusRouteStops(queryMods...)
}

// StartStopBusTimetables retrieves all the bus_timetable's BusTimetables with an executor via start_stop_id column.
func (o *BusStop) StartStopBusTimetables(mods ...qm.QueryMod) busTimetableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bus_timetable\".\"start_stop_id\"=?", o.StopID),
	)

	return BusTimetables(queryMods...)
}

// LoadEndStopBusRoutes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busStopL) LoadEndStopBusRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusStop interface{}, mods queries.Applicator) error {
	var slice []*BusStop
	var object *BusStop

	if singular {
		var ok bool
		object, ok = maybeBusStop.(*BusStop)
		if !ok {
			object = new(BusStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusStop))
			}
		}
	} else {
		s, ok := maybeBusStop.(*[]*BusStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busStopR{}
		}
		args = append(args, object.StopID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busStopR{}
			}

			for _, a := range args {
				if a == obj.StopID {
					continue Outer
				}
			}

			args = append(args, obj.StopID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_route`),
		qm.WhereIn(`bus_route.end_stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_route")
	}

	var resultSlice []*BusRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_route")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_route")
	}

	if singular {
		object.R.EndStopBusRoutes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busRouteR{}
			}
			foreign.R.EndStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopID == foreign.EndStopID {
				local.R.EndStopBusRoutes = append(local.R.EndStopBusRoutes, foreign)
				if foreign.R == nil {
					foreign.R = &busRouteR{}
				}
				foreign.R.EndStop = local
				break
			}
		}
	}

	return nil
}

// LoadStartStopBusRoutes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busStopL) LoadStartStopBusRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusStop interface{}, mods queries.Applicator) error {
	var slice []*BusStop
	var object *BusStop

	if singular {
		var ok bool
		object, ok = maybeBusStop.(*BusStop)
		if !ok {
			object = new(BusStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusStop))
			}
		}
	} else {
		s, ok := maybeBusStop.(*[]*BusStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busStopR{}
		}
		args = append(args, object.StopID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busStopR{}
			}

			for _, a := range args {
				if a == obj.StopID {
					continue Outer
				}
			}

			args = append(args, obj.StopID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_route`),
		qm.WhereIn(`bus_route.start_stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_route")
	}

	var resultSlice []*BusRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_route")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_route")
	}

	if singular {
		object.R.StartStopBusRoutes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busRouteR{}
			}
			foreign.R.StartStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopID == foreign.StartStopID {
				local.R.StartStopBusRoutes = append(local.R.StartStopBusRoutes, foreign)
				if foreign.R == nil {
					foreign.R = &busRouteR{}
				}
				foreign.R.StartStop = local
				break
			}
		}
	}

	return nil
}

// LoadStartStopBusRouteStops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busStopL) LoadStartStopBusRouteStops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusStop interface{}, mods queries.Applicator) error {
	var slice []*BusStop
	var object *BusStop

	if singular {
		var ok bool
		object, ok = maybeBusStop.(*BusStop)
		if !ok {
			object = new(BusStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusStop))
			}
		}
	} else {
		s, ok := maybeBusStop.(*[]*BusStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busStopR{}
		}
		args = append(args, object.StopID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busStopR{}
			}

			for _, a := range args {
				if a == obj.StopID {
					continue Outer
				}
			}

			args = append(args, obj.StopID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_route_stop`),
		qm.WhereIn(`bus_route_stop.start_stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_route_stop")
	}

	var resultSlice []*BusRouteStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_route_stop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_route_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_route_stop")
	}

	if singular {
		object.R.StartStopBusRouteStops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busRouteStopR{}
			}
			foreign.R.StartStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopID == foreign.StartStopID {
				local.R.StartStopBusRouteStops = append(local.R.StartStopBusRouteStops, foreign)
				if foreign.R == nil {
					foreign.R = &busRouteStopR{}
				}
				foreign.R.StartStop = local
				break
			}
		}
	}

	return nil
}

// LoadStopBusRouteStops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busStopL) LoadStopBusRouteStops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusStop interface{}, mods queries.Applicator) error {
	var slice []*BusStop
	var object *BusStop

	if singular {
		var ok bool
		object, ok = maybeBusStop.(*BusStop)
		if !ok {
			object = new(BusStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusStop))
			}
		}
	} else {
		s, ok := maybeBusStop.(*[]*BusStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busStopR{}
		}
		args = append(args, object.StopID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busStopR{}
			}

			for _, a := range args {
				if a == obj.StopID {
					continue Outer
				}
			}

			args = append(args, obj.StopID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_route_stop`),
		qm.WhereIn(`bus_route_stop.stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_route_stop")
	}

	var resultSlice []*BusRouteStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_route_stop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_route_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_route_stop")
	}

	if singular {
		object.R.StopBusRouteStops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busRouteStopR{}
			}
			foreign.R.Stop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopID == foreign.StopID {
				local.R.StopBusRouteStops = append(local.R.StopBusRouteStops, foreign)
				if foreign.R == nil {
					foreign.R = &busRouteStopR{}
				}
				foreign.R.Stop = local
				break
			}
		}
	}

	return nil
}

// LoadStartStopBusTimetables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (busStopL) LoadStartStopBusTimetables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBusStop interface{}, mods queries.Applicator) error {
	var slice []*BusStop
	var object *BusStop

	if singular {
		var ok bool
		object, ok = maybeBusStop.(*BusStop)
		if !ok {
			object = new(BusStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBusStop))
			}
		}
	} else {
		s, ok := maybeBusStop.(*[]*BusStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBusStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBusStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &busStopR{}
		}
		args = append(args, object.StopID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &busStopR{}
			}

			for _, a := range args {
				if a == obj.StopID {
					continue Outer
				}
			}

			args = append(args, obj.StopID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bus_timetable`),
		qm.WhereIn(`bus_timetable.start_stop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bus_timetable")
	}

	var resultSlice []*BusTimetable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bus_timetable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bus_timetable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bus_timetable")
	}

	if singular {
		object.R.StartStopBusTimetables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &busTimetableR{}
			}
			foreign.R.StartStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopID == foreign.StartStopID {
				local.R.StartStopBusTimetables = append(local.R.StartStopBusTimetables, foreign)
				if foreign.R == nil {
					foreign.R = &busTimetableR{}
				}
				foreign.R.StartStop = local
				break
			}
		}
	}

	return nil
}

// AddEndStopBusRoutes adds the given related objects to the existing relationships
// of the bus_stop, optionally inserting them as new records.
// Appends related to o.R.EndStopBusRoutes.
// Sets related.R.EndStop appropriately.
func (o *BusStop) AddEndStopBusRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusRoute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EndStopID = o.StopID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_route\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"end_stop_id"}),
				strmangle.WhereClause("\"", "\"", 2, busRoutePrimaryKeyColumns),
			)
			values := []interface{}{o.StopID, rel.RouteID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EndStopID = o.StopID
		}
	}

	if o.R == nil {
		o.R = &busStopR{
			EndStopBusRoutes: related,
		}
	} else {
		o.R.EndStopBusRoutes = append(o.R.EndStopBusRoutes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busRouteR{
				EndStop: o,
			}
		} else {
			rel.R.EndStop = o
		}
	}
	return nil
}

// AddStartStopBusRoutes adds the given related objects to the existing relationships
// of the bus_stop, optionally inserting them as new records.
// Appends related to o.R.StartStopBusRoutes.
// Sets related.R.StartStop appropriately.
func (o *BusStop) AddStartStopBusRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusRoute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StartStopID = o.StopID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_route\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop_id"}),
				strmangle.WhereClause("\"", "\"", 2, busRoutePrimaryKeyColumns),
			)
			values := []interface{}{o.StopID, rel.RouteID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StartStopID = o.StopID
		}
	}

	if o.R == nil {
		o.R = &busStopR{
			StartStopBusRoutes: related,
		}
	} else {
		o.R.StartStopBusRoutes = append(o.R.StartStopBusRoutes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busRouteR{
				StartStop: o,
			}
		} else {
			rel.R.StartStop = o
		}
	}
	return nil
}

// AddStartStopBusRouteStops adds the given related objects to the existing relationships
// of the bus_stop, optionally inserting them as new records.
// Appends related to o.R.StartStopBusRouteStops.
// Sets related.R.StartStop appropriately.
func (o *BusStop) AddStartStopBusRouteStops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusRouteStop) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StartStopID = o.StopID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_route_stop\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop_id"}),
				strmangle.WhereClause("\"", "\"", 2, busRouteStopPrimaryKeyColumns),
			)
			values := []interface{}{o.StopID, rel.RouteID, rel.StopID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StartStopID = o.StopID
		}
	}

	if o.R == nil {
		o.R = &busStopR{
			StartStopBusRouteStops: related,
		}
	} else {
		o.R.StartStopBusRouteStops = append(o.R.StartStopBusRouteStops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busRouteStopR{
				StartStop: o,
			}
		} else {
			rel.R.StartStop = o
		}
	}
	return nil
}

// AddStopBusRouteStops adds the given related objects to the existing relationships
// of the bus_stop, optionally inserting them as new records.
// Appends related to o.R.StopBusRouteStops.
// Sets related.R.Stop appropriately.
func (o *BusStop) AddStopBusRouteStops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusRouteStop) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StopID = o.StopID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_route_stop\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"stop_id"}),
				strmangle.WhereClause("\"", "\"", 2, busRouteStopPrimaryKeyColumns),
			)
			values := []interface{}{o.StopID, rel.RouteID, rel.StopID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StopID = o.StopID
		}
	}

	if o.R == nil {
		o.R = &busStopR{
			StopBusRouteStops: related,
		}
	} else {
		o.R.StopBusRouteStops = append(o.R.StopBusRouteStops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busRouteStopR{
				Stop: o,
			}
		} else {
			rel.R.Stop = o
		}
	}
	return nil
}

// AddStartStopBusTimetables adds the given related objects to the existing relationships
// of the bus_stop, optionally inserting them as new records.
// Appends related to o.R.StartStopBusTimetables.
// Sets related.R.StartStop appropriately.
func (o *BusStop) AddStartStopBusTimetables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BusTimetable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StartStopID = o.StopID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bus_timetable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop_id"}),
				strmangle.WhereClause("\"", "\"", 2, busTimetablePrimaryKeyColumns),
			)
			values := []interface{}{o.StopID, rel.RouteID, rel.StartStopID, rel.DepartureTime, rel.Weekday}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StartStopID = o.StopID
		}
	}

	if o.R == nil {
		o.R = &busStopR{
			StartStopBusTimetables: related,
		}
	} else {
		o.R.StartStopBusTimetables = append(o.R.StartStopBusTimetables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &busTimetableR{
				StartStop: o,
			}
		} else {
			rel.R.StartStop = o
		}
	}
	return nil
}

// BusStops retrieves all the records using an executor.
func BusStops(mods ...qm.QueryMod) busStopQuery {
	mods = append(mods, qm.From("\"bus_stop\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bus_stop\".*"})
	}

	return busStopQuery{q}
}

// FindBusStop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusStop(ctx context.Context, exec boil.ContextExecutor, stopID int, selectCols ...string) (*BusStop, error) {
	busStopObj := &BusStop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bus_stop\" where \"stop_id\"=$1", sel,
	)

	q := queries.Raw(query, stopID)

	err := q.Bind(ctx, exec, busStopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bus_stop")
	}

	return busStopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusStop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_stop provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(busStopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	busStopInsertCacheMut.RLock()
	cache, cached := busStopInsertCache[key]
	busStopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			busStopAllColumns,
			busStopColumnsWithDefault,
			busStopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(busStopType, busStopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(busStopType, busStopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bus_stop\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bus_stop\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bus_stop")
	}

	if !cached {
		busStopInsertCacheMut.Lock()
		busStopInsertCache[key] = cache
		busStopInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BusStop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusStop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	busStopUpdateCacheMut.RLock()
	cache, cached := busStopUpdateCache[key]
	busStopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			busStopAllColumns,
			busStopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bus_stop, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bus_stop\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, busStopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(busStopType, busStopMapping, append(wl, busStopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bus_stop row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bus_stop")
	}

	if !cached {
		busStopUpdateCacheMut.Lock()
		busStopUpdateCache[key] = cache
		busStopUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q busStopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bus_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bus_stop")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusStopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bus_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, busStopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in busStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all busStop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusStop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bus_stop provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(busStopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	busStopUpsertCacheMut.RLock()
	cache, cached := busStopUpsertCache[key]
	busStopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			busStopAllColumns,
			busStopColumnsWithDefault,
			busStopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			busStopAllColumns,
			busStopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bus_stop, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(busStopPrimaryKeyColumns))
			copy(conflict, busStopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bus_stop\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(busStopType, busStopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(busStopType, busStopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bus_stop")
	}

	if !cached {
		busStopUpsertCacheMut.Lock()
		busStopUpsertCache[key] = cache
		busStopUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BusStop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusStop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusStop provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), busStopPrimaryKeyMapping)
	sql := "DELETE FROM \"bus_stop\" WHERE \"stop_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bus_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bus_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q busStopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no busStopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bus_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusStopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bus_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busStopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from busStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bus_stop")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusStop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusStop(ctx, exec, o.StopID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusStopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusStopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bus_stop\".* FROM \"bus_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busStopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusStopSlice")
	}

	*o = slice

	return nil
}

// BusStopExists checks if the BusStop row exists.
func BusStopExists(ctx context.Context, exec boil.ContextExecutor, stopID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bus_stop\" where \"stop_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stopID)
	}
	row := exec.QueryRowContext(ctx, sql, stopID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bus_stop exists")
	}

	return exists, nil
}

// Exists checks if the BusStop row exists.
func (o *BusStop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BusStopExists(ctx, exec, o.StopID)
}
