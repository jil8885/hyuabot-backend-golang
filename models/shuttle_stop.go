// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttleStop is an object representing the database table.
type ShuttleStop struct {
	StopName  string       `boil:"stop_name" json:"stopName" toml:"stopName" yaml:"stopName"`
	Latitude  null.Float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`
	Longitude null.Float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`

	R *shuttleStopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shuttleStopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShuttleStopColumns = struct {
	StopName  string
	Latitude  string
	Longitude string
}{
	StopName:  "stop_name",
	Latitude:  "latitude",
	Longitude: "longitude",
}

var ShuttleStopTableColumns = struct {
	StopName  string
	Latitude  string
	Longitude string
}{
	StopName:  "shuttle_stop.stop_name",
	Latitude:  "shuttle_stop.latitude",
	Longitude: "shuttle_stop.longitude",
}

// Generated where

var ShuttleStopWhere = struct {
	StopName  whereHelperstring
	Latitude  whereHelpernull_Float64
	Longitude whereHelpernull_Float64
}{
	StopName:  whereHelperstring{field: "\"shuttle_stop\".\"stop_name\""},
	Latitude:  whereHelpernull_Float64{field: "\"shuttle_stop\".\"latitude\""},
	Longitude: whereHelpernull_Float64{field: "\"shuttle_stop\".\"longitude\""},
}

// ShuttleStopRels is where relationship names are stored.
var ShuttleStopRels = struct {
	EndStopShuttleRoutes      string
	StartStopShuttleRoutes    string
	StopNameShuttleRouteStops string
}{
	EndStopShuttleRoutes:      "EndStopShuttleRoutes",
	StartStopShuttleRoutes:    "StartStopShuttleRoutes",
	StopNameShuttleRouteStops: "StopNameShuttleRouteStops",
}

// shuttleStopR is where relationships are stored.
type shuttleStopR struct {
	EndStopShuttleRoutes      ShuttleRouteSlice     `boil:"EndStopShuttleRoutes" json:"EndStopShuttleRoutes" toml:"EndStopShuttleRoutes" yaml:"EndStopShuttleRoutes"`
	StartStopShuttleRoutes    ShuttleRouteSlice     `boil:"StartStopShuttleRoutes" json:"StartStopShuttleRoutes" toml:"StartStopShuttleRoutes" yaml:"StartStopShuttleRoutes"`
	StopNameShuttleRouteStops ShuttleRouteStopSlice `boil:"StopNameShuttleRouteStops" json:"StopNameShuttleRouteStops" toml:"StopNameShuttleRouteStops" yaml:"StopNameShuttleRouteStops"`
}

// NewStruct creates a new relationship struct
func (*shuttleStopR) NewStruct() *shuttleStopR {
	return &shuttleStopR{}
}

func (r *shuttleStopR) GetEndStopShuttleRoutes() ShuttleRouteSlice {
	if r == nil {
		return nil
	}
	return r.EndStopShuttleRoutes
}

func (r *shuttleStopR) GetStartStopShuttleRoutes() ShuttleRouteSlice {
	if r == nil {
		return nil
	}
	return r.StartStopShuttleRoutes
}

func (r *shuttleStopR) GetStopNameShuttleRouteStops() ShuttleRouteStopSlice {
	if r == nil {
		return nil
	}
	return r.StopNameShuttleRouteStops
}

// shuttleStopL is where Load methods for each relationship are stored.
type shuttleStopL struct{}

var (
	shuttleStopAllColumns            = []string{"stop_name", "latitude", "longitude"}
	shuttleStopColumnsWithoutDefault = []string{"stop_name"}
	shuttleStopColumnsWithDefault    = []string{"latitude", "longitude"}
	shuttleStopPrimaryKeyColumns     = []string{"stop_name"}
	shuttleStopGeneratedColumns      = []string{}
)

type (
	// ShuttleStopSlice is an alias for a slice of pointers to ShuttleStop.
	// This should almost always be used instead of []ShuttleStop.
	ShuttleStopSlice []*ShuttleStop
	// ShuttleStopHook is the signature for custom ShuttleStop hook methods
	ShuttleStopHook func(context.Context, boil.ContextExecutor, *ShuttleStop) error

	shuttleStopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttleStopType                 = reflect.TypeOf(&ShuttleStop{})
	shuttleStopMapping              = queries.MakeStructMapping(shuttleStopType)
	shuttleStopPrimaryKeyMapping, _ = queries.BindMapping(shuttleStopType, shuttleStopMapping, shuttleStopPrimaryKeyColumns)
	shuttleStopInsertCacheMut       sync.RWMutex
	shuttleStopInsertCache          = make(map[string]insertCache)
	shuttleStopUpdateCacheMut       sync.RWMutex
	shuttleStopUpdateCache          = make(map[string]updateCache)
	shuttleStopUpsertCacheMut       sync.RWMutex
	shuttleStopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shuttleStopAfterSelectHooks []ShuttleStopHook

var shuttleStopBeforeInsertHooks []ShuttleStopHook
var shuttleStopAfterInsertHooks []ShuttleStopHook

var shuttleStopBeforeUpdateHooks []ShuttleStopHook
var shuttleStopAfterUpdateHooks []ShuttleStopHook

var shuttleStopBeforeDeleteHooks []ShuttleStopHook
var shuttleStopAfterDeleteHooks []ShuttleStopHook

var shuttleStopBeforeUpsertHooks []ShuttleStopHook
var shuttleStopAfterUpsertHooks []ShuttleStopHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShuttleStop) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShuttleStop) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShuttleStop) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShuttleStop) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShuttleStop) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShuttleStop) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShuttleStop) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShuttleStop) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShuttleStop) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shuttleStopAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShuttleStopHook registers your hook function for all future operations.
func AddShuttleStopHook(hookPoint boil.HookPoint, shuttleStopHook ShuttleStopHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shuttleStopAfterSelectHooks = append(shuttleStopAfterSelectHooks, shuttleStopHook)
	case boil.BeforeInsertHook:
		shuttleStopBeforeInsertHooks = append(shuttleStopBeforeInsertHooks, shuttleStopHook)
	case boil.AfterInsertHook:
		shuttleStopAfterInsertHooks = append(shuttleStopAfterInsertHooks, shuttleStopHook)
	case boil.BeforeUpdateHook:
		shuttleStopBeforeUpdateHooks = append(shuttleStopBeforeUpdateHooks, shuttleStopHook)
	case boil.AfterUpdateHook:
		shuttleStopAfterUpdateHooks = append(shuttleStopAfterUpdateHooks, shuttleStopHook)
	case boil.BeforeDeleteHook:
		shuttleStopBeforeDeleteHooks = append(shuttleStopBeforeDeleteHooks, shuttleStopHook)
	case boil.AfterDeleteHook:
		shuttleStopAfterDeleteHooks = append(shuttleStopAfterDeleteHooks, shuttleStopHook)
	case boil.BeforeUpsertHook:
		shuttleStopBeforeUpsertHooks = append(shuttleStopBeforeUpsertHooks, shuttleStopHook)
	case boil.AfterUpsertHook:
		shuttleStopAfterUpsertHooks = append(shuttleStopAfterUpsertHooks, shuttleStopHook)
	}
}

// One returns a single shuttleStop record from the query.
func (q shuttleStopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttleStop, error) {
	o := &ShuttleStop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_stop")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShuttleStop records from the query.
func (q shuttleStopQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttleStopSlice, error) {
	var o []*ShuttleStop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttleStop slice")
	}

	if len(shuttleStopAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShuttleStop records in the query.
func (q shuttleStopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_stop rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttleStopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_stop exists")
	}

	return count > 0, nil
}

// EndStopShuttleRoutes retrieves all the shuttle_route's ShuttleRoutes with an executor via end_stop column.
func (o *ShuttleStop) EndStopShuttleRoutes(mods ...qm.QueryMod) shuttleRouteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_route\".\"end_stop\"=?", o.StopName),
	)

	return ShuttleRoutes(queryMods...)
}

// StartStopShuttleRoutes retrieves all the shuttle_route's ShuttleRoutes with an executor via start_stop column.
func (o *ShuttleStop) StartStopShuttleRoutes(mods ...qm.QueryMod) shuttleRouteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_route\".\"start_stop\"=?", o.StopName),
	)

	return ShuttleRoutes(queryMods...)
}

// StopNameShuttleRouteStops retrieves all the shuttle_route_stop's ShuttleRouteStops with an executor via stop_name column.
func (o *ShuttleStop) StopNameShuttleRouteStops(mods ...qm.QueryMod) shuttleRouteStopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shuttle_route_stop\".\"stop_name\"=?", o.StopName),
	)

	return ShuttleRouteStops(queryMods...)
}

// LoadEndStopShuttleRoutes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttleStopL) LoadEndStopShuttleRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleStop interface{}, mods queries.Applicator) error {
	var slice []*ShuttleStop
	var object *ShuttleStop

	if singular {
		var ok bool
		object, ok = maybeShuttleStop.(*ShuttleStop)
		if !ok {
			object = new(ShuttleStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleStop))
			}
		}
	} else {
		s, ok := maybeShuttleStop.(*[]*ShuttleStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleStopR{}
		}
		args = append(args, object.StopName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleStopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StopName) {
					continue Outer
				}
			}

			args = append(args, obj.StopName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_route`),
		qm.WhereIn(`shuttle_route.end_stop in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_route")
	}

	var resultSlice []*ShuttleRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_route")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_route")
	}

	if len(shuttleRouteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EndStopShuttleRoutes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttleRouteR{}
			}
			foreign.R.EndStopShuttleStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StopName, foreign.EndStop) {
				local.R.EndStopShuttleRoutes = append(local.R.EndStopShuttleRoutes, foreign)
				if foreign.R == nil {
					foreign.R = &shuttleRouteR{}
				}
				foreign.R.EndStopShuttleStop = local
				break
			}
		}
	}

	return nil
}

// LoadStartStopShuttleRoutes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttleStopL) LoadStartStopShuttleRoutes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleStop interface{}, mods queries.Applicator) error {
	var slice []*ShuttleStop
	var object *ShuttleStop

	if singular {
		var ok bool
		object, ok = maybeShuttleStop.(*ShuttleStop)
		if !ok {
			object = new(ShuttleStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleStop))
			}
		}
	} else {
		s, ok := maybeShuttleStop.(*[]*ShuttleStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleStopR{}
		}
		args = append(args, object.StopName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleStopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StopName) {
					continue Outer
				}
			}

			args = append(args, obj.StopName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_route`),
		qm.WhereIn(`shuttle_route.start_stop in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_route")
	}

	var resultSlice []*ShuttleRoute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_route")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_route")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_route")
	}

	if len(shuttleRouteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StartStopShuttleRoutes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttleRouteR{}
			}
			foreign.R.StartStopShuttleStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.StopName, foreign.StartStop) {
				local.R.StartStopShuttleRoutes = append(local.R.StartStopShuttleRoutes, foreign)
				if foreign.R == nil {
					foreign.R = &shuttleRouteR{}
				}
				foreign.R.StartStopShuttleStop = local
				break
			}
		}
	}

	return nil
}

// LoadStopNameShuttleRouteStops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shuttleStopL) LoadStopNameShuttleRouteStops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShuttleStop interface{}, mods queries.Applicator) error {
	var slice []*ShuttleStop
	var object *ShuttleStop

	if singular {
		var ok bool
		object, ok = maybeShuttleStop.(*ShuttleStop)
		if !ok {
			object = new(ShuttleStop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShuttleStop))
			}
		}
	} else {
		s, ok := maybeShuttleStop.(*[]*ShuttleStop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShuttleStop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShuttleStop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shuttleStopR{}
		}
		args = append(args, object.StopName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shuttleStopR{}
			}

			for _, a := range args {
				if a == obj.StopName {
					continue Outer
				}
			}

			args = append(args, obj.StopName)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shuttle_route_stop`),
		qm.WhereIn(`shuttle_route_stop.stop_name in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shuttle_route_stop")
	}

	var resultSlice []*ShuttleRouteStop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shuttle_route_stop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shuttle_route_stop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shuttle_route_stop")
	}

	if len(shuttleRouteStopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StopNameShuttleRouteStops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shuttleRouteStopR{}
			}
			foreign.R.StopNameShuttleStop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StopName == foreign.StopName {
				local.R.StopNameShuttleRouteStops = append(local.R.StopNameShuttleRouteStops, foreign)
				if foreign.R == nil {
					foreign.R = &shuttleRouteStopR{}
				}
				foreign.R.StopNameShuttleStop = local
				break
			}
		}
	}

	return nil
}

// AddEndStopShuttleRoutes adds the given related objects to the existing relationships
// of the shuttle_stop, optionally inserting them as new records.
// Appends related to o.R.EndStopShuttleRoutes.
// Sets related.R.EndStopShuttleStop appropriately.
func (o *ShuttleStop) AddEndStopShuttleRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleRoute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EndStop, o.StopName)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_route\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"end_stop"}),
				strmangle.WhereClause("\"", "\"", 2, shuttleRoutePrimaryKeyColumns),
			)
			values := []interface{}{o.StopName, rel.RouteName}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EndStop, o.StopName)
		}
	}

	if o.R == nil {
		o.R = &shuttleStopR{
			EndStopShuttleRoutes: related,
		}
	} else {
		o.R.EndStopShuttleRoutes = append(o.R.EndStopShuttleRoutes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttleRouteR{
				EndStopShuttleStop: o,
			}
		} else {
			rel.R.EndStopShuttleStop = o
		}
	}
	return nil
}

// SetEndStopShuttleRoutes removes all previously related items of the
// shuttle_stop replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EndStopShuttleStop's EndStopShuttleRoutes accordingly.
// Replaces o.R.EndStopShuttleRoutes with related.
// Sets related.R.EndStopShuttleStop's EndStopShuttleRoutes accordingly.
func (o *ShuttleStop) SetEndStopShuttleRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleRoute) error {
	query := "update \"shuttle_route\" set \"end_stop\" = null where \"end_stop\" = $1"
	values := []interface{}{o.StopName}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EndStopShuttleRoutes {
			queries.SetScanner(&rel.EndStop, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EndStopShuttleStop = nil
		}
		o.R.EndStopShuttleRoutes = nil
	}

	return o.AddEndStopShuttleRoutes(ctx, exec, insert, related...)
}

// RemoveEndStopShuttleRoutes relationships from objects passed in.
// Removes related items from R.EndStopShuttleRoutes (uses pointer comparison, removal does not keep order)
// Sets related.R.EndStopShuttleStop.
func (o *ShuttleStop) RemoveEndStopShuttleRoutes(ctx context.Context, exec boil.ContextExecutor, related ...*ShuttleRoute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EndStop, nil)
		if rel.R != nil {
			rel.R.EndStopShuttleStop = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("end_stop")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EndStopShuttleRoutes {
			if rel != ri {
				continue
			}

			ln := len(o.R.EndStopShuttleRoutes)
			if ln > 1 && i < ln-1 {
				o.R.EndStopShuttleRoutes[i] = o.R.EndStopShuttleRoutes[ln-1]
			}
			o.R.EndStopShuttleRoutes = o.R.EndStopShuttleRoutes[:ln-1]
			break
		}
	}

	return nil
}

// AddStartStopShuttleRoutes adds the given related objects to the existing relationships
// of the shuttle_stop, optionally inserting them as new records.
// Appends related to o.R.StartStopShuttleRoutes.
// Sets related.R.StartStopShuttleStop appropriately.
func (o *ShuttleStop) AddStartStopShuttleRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleRoute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StartStop, o.StopName)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_route\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"start_stop"}),
				strmangle.WhereClause("\"", "\"", 2, shuttleRoutePrimaryKeyColumns),
			)
			values := []interface{}{o.StopName, rel.RouteName}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StartStop, o.StopName)
		}
	}

	if o.R == nil {
		o.R = &shuttleStopR{
			StartStopShuttleRoutes: related,
		}
	} else {
		o.R.StartStopShuttleRoutes = append(o.R.StartStopShuttleRoutes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttleRouteR{
				StartStopShuttleStop: o,
			}
		} else {
			rel.R.StartStopShuttleStop = o
		}
	}
	return nil
}

// SetStartStopShuttleRoutes removes all previously related items of the
// shuttle_stop replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StartStopShuttleStop's StartStopShuttleRoutes accordingly.
// Replaces o.R.StartStopShuttleRoutes with related.
// Sets related.R.StartStopShuttleStop's StartStopShuttleRoutes accordingly.
func (o *ShuttleStop) SetStartStopShuttleRoutes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleRoute) error {
	query := "update \"shuttle_route\" set \"start_stop\" = null where \"start_stop\" = $1"
	values := []interface{}{o.StopName}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.StartStopShuttleRoutes {
			queries.SetScanner(&rel.StartStop, nil)
			if rel.R == nil {
				continue
			}

			rel.R.StartStopShuttleStop = nil
		}
		o.R.StartStopShuttleRoutes = nil
	}

	return o.AddStartStopShuttleRoutes(ctx, exec, insert, related...)
}

// RemoveStartStopShuttleRoutes relationships from objects passed in.
// Removes related items from R.StartStopShuttleRoutes (uses pointer comparison, removal does not keep order)
// Sets related.R.StartStopShuttleStop.
func (o *ShuttleStop) RemoveStartStopShuttleRoutes(ctx context.Context, exec boil.ContextExecutor, related ...*ShuttleRoute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StartStop, nil)
		if rel.R != nil {
			rel.R.StartStopShuttleStop = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("start_stop")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StartStopShuttleRoutes {
			if rel != ri {
				continue
			}

			ln := len(o.R.StartStopShuttleRoutes)
			if ln > 1 && i < ln-1 {
				o.R.StartStopShuttleRoutes[i] = o.R.StartStopShuttleRoutes[ln-1]
			}
			o.R.StartStopShuttleRoutes = o.R.StartStopShuttleRoutes[:ln-1]
			break
		}
	}

	return nil
}

// AddStopNameShuttleRouteStops adds the given related objects to the existing relationships
// of the shuttle_stop, optionally inserting them as new records.
// Appends related to o.R.StopNameShuttleRouteStops.
// Sets related.R.StopNameShuttleStop appropriately.
func (o *ShuttleStop) AddStopNameShuttleRouteStops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShuttleRouteStop) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StopName = o.StopName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shuttle_route_stop\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"stop_name"}),
				strmangle.WhereClause("\"", "\"", 2, shuttleRouteStopPrimaryKeyColumns),
			)
			values := []interface{}{o.StopName, rel.RouteName, rel.StopName}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StopName = o.StopName
		}
	}

	if o.R == nil {
		o.R = &shuttleStopR{
			StopNameShuttleRouteStops: related,
		}
	} else {
		o.R.StopNameShuttleRouteStops = append(o.R.StopNameShuttleRouteStops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shuttleRouteStopR{
				StopNameShuttleStop: o,
			}
		} else {
			rel.R.StopNameShuttleStop = o
		}
	}
	return nil
}

// ShuttleStops retrieves all the records using an executor.
func ShuttleStops(mods ...qm.QueryMod) shuttleStopQuery {
	mods = append(mods, qm.From("\"shuttle_stop\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_stop\".*"})
	}

	return shuttleStopQuery{q}
}

// FindShuttleStop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShuttleStop(ctx context.Context, exec boil.ContextExecutor, stopName string, selectCols ...string) (*ShuttleStop, error) {
	shuttleStopObj := &ShuttleStop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shuttle_stop\" where \"stop_name\"=$1", sel,
	)

	q := queries.Raw(query, stopName)

	err := q.Bind(ctx, exec, shuttleStopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shuttle_stop")
	}

	if err = shuttleStopObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shuttleStopObj, err
	}

	return shuttleStopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShuttleStop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_stop provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleStopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shuttleStopInsertCacheMut.RLock()
	cache, cached := shuttleStopInsertCache[key]
	shuttleStopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shuttleStopAllColumns,
			shuttleStopColumnsWithDefault,
			shuttleStopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shuttleStopType, shuttleStopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shuttleStopType, shuttleStopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shuttle_stop\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shuttle_stop\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shuttle_stop")
	}

	if !cached {
		shuttleStopInsertCacheMut.Lock()
		shuttleStopInsertCache[key] = cache
		shuttleStopInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShuttleStop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShuttleStop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shuttleStopUpdateCacheMut.RLock()
	cache, cached := shuttleStopUpdateCache[key]
	shuttleStopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shuttleStopAllColumns,
			shuttleStopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shuttle_stop, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shuttle_stop\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shuttleStopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shuttleStopType, shuttleStopMapping, append(wl, shuttleStopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shuttle_stop row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shuttle_stop")
	}

	if !cached {
		shuttleStopUpdateCacheMut.Lock()
		shuttleStopUpdateCache[key] = cache
		shuttleStopUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shuttleStopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shuttle_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shuttle_stop")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShuttleStopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shuttle_stop\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shuttleStopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shuttleStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shuttleStop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShuttleStop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shuttle_stop provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shuttleStopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shuttleStopUpsertCacheMut.RLock()
	cache, cached := shuttleStopUpsertCache[key]
	shuttleStopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shuttleStopAllColumns,
			shuttleStopColumnsWithDefault,
			shuttleStopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shuttleStopAllColumns,
			shuttleStopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shuttle_stop, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shuttleStopPrimaryKeyColumns))
			copy(conflict, shuttleStopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shuttle_stop\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shuttleStopType, shuttleStopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shuttleStopType, shuttleStopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shuttle_stop")
	}

	if !cached {
		shuttleStopUpsertCacheMut.Lock()
		shuttleStopUpsertCache[key] = cache
		shuttleStopUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShuttleStop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShuttleStop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShuttleStop provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shuttleStopPrimaryKeyMapping)
	sql := "DELETE FROM \"shuttle_stop\" WHERE \"stop_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shuttle_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shuttle_stop")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shuttleStopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shuttleStopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttle_stop")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_stop")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShuttleStopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shuttleStopBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shuttle_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleStopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shuttleStop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shuttle_stop")
	}

	if len(shuttleStopAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShuttleStop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShuttleStop(ctx, exec, o.StopName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShuttleStopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShuttleStopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shuttleStopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shuttle_stop\".* FROM \"shuttle_stop\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shuttleStopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShuttleStopSlice")
	}

	*o = slice

	return nil
}

// ShuttleStopExists checks if the ShuttleStop row exists.
func ShuttleStopExists(ctx context.Context, exec boil.ContextExecutor, stopName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shuttle_stop\" where \"stop_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, stopName)
	}
	row := exec.QueryRowContext(ctx, sql, stopName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shuttle_stop exists")
	}

	return exists, nil
}

// Exists checks if the ShuttleStop row exists.
func (o *ShuttleStop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShuttleStopExists(ctx, exec, o.StopName)
}
