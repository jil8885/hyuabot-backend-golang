// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShuttleTimetableView is an object representing the database table.
type ShuttleTimetableView struct {
	Seq           null.Int    `boil:"seq" json:"seq,omitempty" toml:"seq" yaml:"seq,omitempty"`
	PeriodType    null.String `boil:"period_type" json:"periodType,omitempty" toml:"periodType" yaml:"periodType,omitempty"`
	Weekday       null.Bool   `boil:"weekday" json:"weekday,omitempty" toml:"weekday" yaml:"weekday,omitempty"`
	RouteName     null.String `boil:"route_name" json:"routeName,omitempty" toml:"routeName" yaml:"routeName,omitempty"`
	RouteTag      null.String `boil:"route_tag" json:"routeTag,omitempty" toml:"routeTag" yaml:"routeTag,omitempty"`
	StopName      null.String `boil:"stop_name" json:"stopName,omitempty" toml:"stopName" yaml:"stopName,omitempty"`
	DepartureTime null.Time   `boil:"departure_time" json:"departureTime,omitempty" toml:"departureTime" yaml:"departureTime,omitempty"`
}

var ShuttleTimetableViewColumns = struct {
	Seq           string
	PeriodType    string
	Weekday       string
	RouteName     string
	RouteTag      string
	StopName      string
	DepartureTime string
}{
	Seq:           "seq",
	PeriodType:    "period_type",
	Weekday:       "weekday",
	RouteName:     "route_name",
	RouteTag:      "route_tag",
	StopName:      "stop_name",
	DepartureTime: "departure_time",
}

var ShuttleTimetableViewTableColumns = struct {
	Seq           string
	PeriodType    string
	Weekday       string
	RouteName     string
	RouteTag      string
	StopName      string
	DepartureTime string
}{
	Seq:           "shuttle_timetable_view.seq",
	PeriodType:    "shuttle_timetable_view.period_type",
	Weekday:       "shuttle_timetable_view.weekday",
	RouteName:     "shuttle_timetable_view.route_name",
	RouteTag:      "shuttle_timetable_view.route_tag",
	StopName:      "shuttle_timetable_view.stop_name",
	DepartureTime: "shuttle_timetable_view.departure_time",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ShuttleTimetableViewWhere = struct {
	Seq           whereHelpernull_Int
	PeriodType    whereHelpernull_String
	Weekday       whereHelpernull_Bool
	RouteName     whereHelpernull_String
	RouteTag      whereHelpernull_String
	StopName      whereHelpernull_String
	DepartureTime whereHelpernull_Time
}{
	Seq:           whereHelpernull_Int{field: "\"shuttle_timetable_view\".\"seq\""},
	PeriodType:    whereHelpernull_String{field: "\"shuttle_timetable_view\".\"period_type\""},
	Weekday:       whereHelpernull_Bool{field: "\"shuttle_timetable_view\".\"weekday\""},
	RouteName:     whereHelpernull_String{field: "\"shuttle_timetable_view\".\"route_name\""},
	RouteTag:      whereHelpernull_String{field: "\"shuttle_timetable_view\".\"route_tag\""},
	StopName:      whereHelpernull_String{field: "\"shuttle_timetable_view\".\"stop_name\""},
	DepartureTime: whereHelpernull_Time{field: "\"shuttle_timetable_view\".\"departure_time\""},
}

var (
	shuttleTimetableViewAllColumns            = []string{"seq", "period_type", "weekday", "route_name", "route_tag", "stop_name", "departure_time"}
	shuttleTimetableViewColumnsWithoutDefault = []string{}
	shuttleTimetableViewColumnsWithDefault    = []string{"seq", "period_type", "weekday", "route_name", "route_tag", "stop_name", "departure_time"}
	shuttleTimetableViewPrimaryKeyColumns     = []string{}
	shuttleTimetableViewGeneratedColumns      = []string{}
)

type (
	// ShuttleTimetableViewSlice is an alias for a slice of pointers to ShuttleTimetableView.
	// This should almost always be used instead of []ShuttleTimetableView.
	ShuttleTimetableViewSlice []*ShuttleTimetableView

	shuttleTimetableViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shuttleTimetableViewType           = reflect.TypeOf(&ShuttleTimetableView{})
	shuttleTimetableViewMapping        = queries.MakeStructMapping(shuttleTimetableViewType)
	shuttleTimetableViewInsertCacheMut sync.RWMutex
	shuttleTimetableViewInsertCache    = make(map[string]insertCache)
	shuttleTimetableViewUpdateCacheMut sync.RWMutex
	shuttleTimetableViewUpdateCache    = make(map[string]updateCache)
	shuttleTimetableViewUpsertCacheMut sync.RWMutex
	shuttleTimetableViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

// One returns a single shuttleTimetableView record from the query.
func (q shuttleTimetableViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShuttleTimetableView, error) {
	o := &ShuttleTimetableView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shuttle_timetable_view")
	}

	return o, nil
}

// All returns all ShuttleTimetableView records from the query.
func (q shuttleTimetableViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShuttleTimetableViewSlice, error) {
	var o []*ShuttleTimetableView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShuttleTimetableView slice")
	}

	return o, nil
}

// Count returns the count of all ShuttleTimetableView records in the query.
func (q shuttleTimetableViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shuttle_timetable_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shuttleTimetableViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shuttle_timetable_view exists")
	}

	return count > 0, nil
}

// ShuttleTimetableViews retrieves all the records using an executor.
func ShuttleTimetableViews(mods ...qm.QueryMod) shuttleTimetableViewQuery {
	mods = append(mods, qm.From("\"shuttle_timetable_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shuttle_timetable_view\".*"})
	}

	return shuttleTimetableViewQuery{q}
}
